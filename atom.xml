<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>败退长安</title>
  
  <subtitle>长安凉夜春衫薄</subtitle>
  <link href="https://182.92.7.32/atom.xml" rel="self"/>
  
  <link href="https://182.92.7.32/"/>
  <updated>2021-02-13T13:02:18.269Z</updated>
  <id>https://182.92.7.32/</id>
  
  <author>
    <name>Rihiko</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>提取wallpaper壁纸</title>
    <link href="https://182.92.7.32/2021/02/13/wallpaper%E5%A3%81%E7%BA%B8/wallpaper%E5%A3%81%E7%BA%B8/"/>
    <id>https://182.92.7.32/2021/02/13/wallpaper%E5%A3%81%E7%BA%B8/wallpaper%E5%A3%81%E7%BA%B8/</id>
    <published>2021-02-13T11:30:55.000Z</published>
    <updated>2021-02-13T13:02:18.269Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、github搜索repkg"><a href="#1、github搜索repkg" class="headerlink" title="1、github搜索repkg"></a>1、github搜索repkg</h1><ul><li><a href="https://github.com/notscuffed/repkg">repkg</a><br><img src="1.png">  </li><li>下载zip，解压得到如下文件<br><img src="2.png">  </li></ul><h1 id="2、visual-studio获取文件"><a href="#2、visual-studio获取文件" class="headerlink" title="2、visual studio获取文件"></a>2、visual studio获取文件</h1><ul><li>打开RePKG，利用visual studio2019运行<br><img src="4.jpg"><br><img src="5.jpg"><h1 id="3、提取壁纸"><a href="#3、提取壁纸" class="headerlink" title="3、提取壁纸"></a>3、提取壁纸</h1></li><li>D:\Steam\steamapps\workshop\content\431960在此路径下找到pkg所在文件夹路径  </li><li>将pkg文件放入wallpaper engine extract文件夹下<br><img src="6.jpg">  </li><li>双击提取文件即可看到00文件夹<br><img src="7.jpg">  </li><li>壁纸则在00文件夹的materials文件夹下</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1、github搜索repkg&quot;&gt;&lt;a href=&quot;#1、github搜索repkg&quot; class=&quot;headerlink&quot; title=&quot;1、github搜索repkg&quot;&gt;&lt;/a&gt;1、github搜索repkg&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;htt</summary>
      
    
    
    
    
    <category term="实用" scheme="https://182.92.7.32/tags/%E5%AE%9E%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>游戏解包</title>
    <link href="https://182.92.7.32/2021/02/13/%E6%B8%B8%E6%88%8F%E8%A7%A3%E5%8C%85/%E6%B8%B8%E6%88%8F%E8%A7%A3%E5%8C%85/"/>
    <id>https://182.92.7.32/2021/02/13/%E6%B8%B8%E6%88%8F%E8%A7%A3%E5%8C%85/%E6%B8%B8%E6%88%8F%E8%A7%A3%E5%8C%85/</id>
    <published>2021-02-13T08:10:56.000Z</published>
    <updated>2021-02-13T08:55:53.444Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、获取源文件"><a href="#1、获取源文件" class="headerlink" title="1、获取源文件"></a>1、获取源文件</h1><p>以碧蓝航线为例<br><img src="1.png"><br>拿到游戏源文件，然后上传至电脑<br><img src="2.png"><br>打开文件路径<br><img src="3.png"></p><h1 id="2、提取加载背景图片"><a href="#2、提取加载背景图片" class="headerlink" title="2、提取加载背景图片"></a>2、提取加载背景图片</h1><h2 id="1、创建新路径"><a href="#1、创建新路径" class="headerlink" title="1、创建新路径"></a>1、创建新路径</h2><p><img src="4.png"><br>复制加载图片文件夹(loadingbg)到新的路径下</p><h2 id="2、安装软件AssetStudioGUI游戏资源提取器"><a href="#2、安装软件AssetStudioGUI游戏资源提取器" class="headerlink" title="2、安装软件AssetStudioGUI游戏资源提取器"></a>2、安装软件AssetStudioGUI游戏资源提取器</h2><p><a href="http://www.8fe.com/pcsoft/10715.html">AssetStudioGUI</a>  </p><h2 id="3、解包加载图片"><a href="#3、解包加载图片" class="headerlink" title="3、解包加载图片"></a>3、解包加载图片</h2><ul><li>导入文件夹<br><img src="5.jpg"></li><li>选择loadingbg文件夹<br><img src="6.png"></li><li>导出文件到新文件夹<br><img src="7.jpg"></li><li>导出成功<br><img src="8.jpg"></li></ul><h1 id="3、提取q版人物模型"><a href="#3、提取q版人物模型" class="headerlink" title="3、提取q版人物模型"></a>3、提取q版人物模型</h1><p>同上<br><img src="9.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1、获取源文件&quot;&gt;&lt;a href=&quot;#1、获取源文件&quot; class=&quot;headerlink&quot; title=&quot;1、获取源文件&quot;&gt;&lt;/a&gt;1、获取源文件&lt;/h1&gt;&lt;p&gt;以碧蓝航线为例&lt;br&gt;&lt;img src=&quot;1.png&quot;&gt;&lt;br&gt;拿到游戏源文件，然后上传至电脑&lt;br</summary>
      
    
    
    
    
    <category term="实用" scheme="https://182.92.7.32/tags/%E5%AE%9E%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Live2D</title>
    <link href="https://182.92.7.32/2021/02/12/Live2D/Live2D/"/>
    <id>https://182.92.7.32/2021/02/12/Live2D/Live2D/</id>
    <published>2021-02-12T08:37:38.000Z</published>
    <updated>2021-02-12T12:44:53.627Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、下载解包所需exe"><a href="#1、下载解包所需exe" class="headerlink" title="1、下载解包所需exe"></a>1、下载解包所需exe</h1><p><a href="https://github.com/Perfare/UnityLive2DExtractor/releases/tag/v1.0.3">UnityLive2DExtractor</a><br><img src="live1.png"></p><h1 id="2、找到游戏中的Live2D模型"><a href="#2、找到游戏中的Live2D模型" class="headerlink" title="2、找到游戏中的Live2D模型"></a>2、找到游戏中的Live2D模型</h1><p><img src="live2.png"><br>assets即为live2d模型所在文件夹</p><h1 id="3、编译文件"><a href="#3、编译文件" class="headerlink" title="3、编译文件"></a>3、编译文件</h1><ul><li>将文件上传至电脑</li><li>打开assets文件<br>ac_[xxx].prefab+ac_[xxx]_[yyy].anim为一组live2d模型<br><img src="live3.png"></li><li>新建一个文件夹然后将文件保存至该文件夹<br><img src="live4.png"></li><li>将文件夹拖至UnityLive2DExtractor.exe进行编译<br><img src="live5.png"><br>编译生成live2Doutput文件夹<br><img src="live6.png"></li></ul><h1 id="4、上传文件到github"><a href="#4、上传文件到github" class="headerlink" title="4、上传文件到github"></a>4、上传文件到github</h1><p><img src="live7.png"></p><h1 id="5、将assets文件所在目录用jsDelivr加速"><a href="#5、将assets文件所在目录用jsDelivr加速" class="headerlink" title="5、将assets文件所在目录用jsDelivr加速"></a>5、将assets文件所在目录用jsDelivr加速</h1><ul><li>复制所在路径<br><img src="live8.png"><br>路径为：<a href="https://github.com/Rihiko/live2d/tree/main/assets">https://github.com/Rihiko/live2d/tree/main/assets</a></li><li>将路径转换为jsdeliver路径<br><img src="live9.png"><br>转换后的路径为：<a href="https://cdn.jsdelivr.net/gh/Rihiko/live2d@tree/main/assets">https://cdn.jsdelivr.net/gh/Rihiko/live2d@tree/main/assets</a><br>打开该路径发现报错：Failed to fetch Rihiko/live2d@tree from GitHub.<br>原因是多了tree分支，将路径改为：<a href="https://cdn.jsdelivr.net/gh/Rihiko/live2d@main/assets">https://cdn.jsdelivr.net/gh/Rihiko/live2d@main/assets</a>    </li><li>打开该路径，发现界面与github的assets目录下内容一致，说明路径正确<br><img src="live10.png"><br>所有文件都可js加速，加速完记得打开看一下路径是否正确</li></ul><h1 id="6、博客界面引入live2d-moc3模型"><a href="#6、博客界面引入live2d-moc3模型" class="headerlink" title="6、博客界面引入live2d(moc3模型)"></a>6、博客界面引入live2d(moc3模型)</h1><p>在html界面中添加如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html &gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;live2d-demo&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;apps.bdimg.com&#x2F;libs&#x2F;jquery&#x2F;2.1.4&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Live2DCubismCore --&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;litstronger&#x2F;live2d-moc3@master&#x2F;js&#x2F;frame&#x2F;live2dcubismcore.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;!-- Include Pixi. --&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;pixi.js&#x2F;4.6.1&#x2F;pixi.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;!-- Include Cubism Components. --&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;litstronger&#x2F;live2d-moc3@master&#x2F;js&#x2F;live2dcubismframework.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;litstronger&#x2F;live2d-moc3@master&#x2F;js&#x2F;live2dcubismpixi.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;!-- User&#39;s Script --&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;litstronger&#x2F;live2d-moc3@master&#x2F;js&#x2F;l2d.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;litstronger&#x2F;live2d-moc3@master&#x2F;js&#x2F;main.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- Canvas --&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;Canvas&quot;  id&#x3D;&quot;L2dCanvas&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    &#x2F;* 配置 *&#x2F;</span><br><span class="line">        var config &#x3D; &#123;</span><br><span class="line">            width: 800,&#x2F;&#x2F;window.innerWidth,</span><br><span class="line">            height: 600,&#x2F;&#x2F;window.innerHeight,</span><br><span class="line">            left: &#39;-300px&#39;,</span><br><span class="line">            bottom: &#39;0px&#39;, </span><br><span class="line">            basePath: &#39;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;alg-wiki&#x2F;AzurLaneL2DViewer@gh-pages&#x2F;assets&#39;,</span><br><span class="line">            role: &#39;bisimai_2&#39;,</span><br><span class="line">            background: &#39;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;alg-wiki&#x2F;AzurLaneL2DViewer@gh-pages&#x2F;assets&#x2F;bg&#x2F;bg_church_jp.png&#39;,</span><br><span class="line">            opacity: 1</span><br><span class="line">        &#125;</span><br><span class="line">        var v &#x3D; new Viewer(config); </span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h1 id="7、添加效果"><a href="#7、添加效果" class="headerlink" title="7、添加效果"></a>7、添加效果</h1><p><img src="live11.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1、下载解包所需exe&quot;&gt;&lt;a href=&quot;#1、下载解包所需exe&quot; class=&quot;headerlink&quot; title=&quot;1、下载解包所需exe&quot;&gt;&lt;/a&gt;1、下载解包所需exe&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Perfar</summary>
      
    
    
    
    
    <category term="实用" scheme="https://182.92.7.32/tags/%E5%AE%9E%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>python数据可视化实战</title>
    <link href="https://182.92.7.32/2021/02/09/python%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AE%9E%E6%88%98/python%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AE%9E%E6%88%98/"/>
    <id>https://182.92.7.32/2021/02/09/python%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AE%9E%E6%88%98/python%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AE%9E%E6%88%98/</id>
    <published>2021-02-09T14:18:36.000Z</published>
    <updated>2021-02-25T08:16:05.263Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、项目介绍"><a href="#1、项目介绍" class="headerlink" title="1、项目介绍"></a>1、项目介绍</h1><p>基于Python+Flask+Echarts打造的疫情监控系统</p><h2 id="1、涉及技术"><a href="#1、涉及技术" class="headerlink" title="1、涉及技术"></a>1、涉及技术</h2><ul><li>python网络爬虫</li><li>使用Python和MySQL数据库交互</li><li>使用Flask构建web后台项目</li><li>基于h5+Echarts数据可视化展示</li><li>在Linux上部署web项目及爬虫</li></ul><h2 id="2、项目环境准备"><a href="#2、项目环境准备" class="headerlink" title="2、项目环境准备"></a>2、项目环境准备</h2><ul><li>Python 3.x</li><li>MySQL</li><li>PyCharm(Python IDE)</li><li>Jupyter notebook(Python IDE)</li><li>Hbuilder(前端IDE，<a href="https://www.dcloud.io/hbuilderx.html">https://www.dcloud.io/hbuilderx.html</a>)</li><li>Linux主机（后期项目部署）</li></ul><h2 id="3、jupyter-notebook"><a href="#3、jupyter-notebook" class="headerlink" title="3、jupyter notebook"></a>3、jupyter notebook</h2><h3 id="1、创建脚本一键启动"><a href="#1、创建脚本一键启动" class="headerlink" title="1、创建脚本一键启动"></a>1、创建脚本一键启动</h3><p>在F:\jupyter工作目录下创建脚本start.cmd，脚本内容为juypyter notebook</p><h3 id="2、notebook的基本操作"><a href="#2、notebook的基本操作" class="headerlink" title="2、notebook的基本操作"></a>2、notebook的基本操作</h3><p>1.新建文件与导入文件<br>2.单元格分类：code、md<br>在蓝色模式下，按M键，由code转化为md类型<br><img src="%E5%AE%9E%E6%88%981.png"><br>3.命令模式（蓝色边框）与编辑模式（绿色模式）<br>ESC键从编辑模式切换到命令模式<br>In []，括号中的内容表示当前代码被执行几次<br>5.常用快捷键  </p><ul><li>单元格类型转换：Y、M；</li><li>插入单元格：A、B；</li><li>进入命令模式：Esc</li><li>代码补全：Tab</li><li>运行单元格：ctrl/shift/alt+enter</li><li>删除单元格：DD</li></ul><h3 id="3、markdown语法"><a href="#3、markdown语法" class="headerlink" title="3、markdown语法"></a>3、markdown语法</h3><p>1.标题：使用16个#跟随一个空格表示16级标题<br>2.无序列表：使用*，-或+后跟随一个空格来表示<br>3.有序列表：使用数字+点表示<br>4.换行：使用两个或以上的空行<br>5.代码：三个反引号<br>6.分割线：三个星号或三个减号<br>7.链接：<a href="%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80">文字</a><br>8.图片：<img src="%E5%9B%BE%E7%89%87%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80%22%E5%9B%BE%E7%89%87%E8%AF%B4%E6%98%8E%E4%BF%A1%E6%81%AF%22" alt="图片说明">   </p><h1 id="2、数据获取"><a href="#2、数据获取" class="headerlink" title="2、数据获取"></a>2、数据获取</h1><h2 id="1、爬虫概述"><a href="#1、爬虫概述" class="headerlink" title="1、爬虫概述"></a>1、爬虫概述</h2><p>爬虫，就是给网站发起请求，并从响应中提取需要的数据自动化程序</p><h3 id="1、发起请求，获取响应"><a href="#1、发起请求，获取响应" class="headerlink" title="1、发起请求，获取响应"></a>1、发起请求，获取响应</h3><ul><li>通过http库，对目标站点进行请求。等同于自己打开浏览器，输入网址</li><li>常用库：urllib(python自带标准库)、urllib3(python第三方扩展库)、requests(python第三方扩展库)</li><li>服务器会返回请求的内容，一般为：HTML、二进制文件（视频、音频）、文档、JSON字符串等</li></ul><h3 id="2、解析内容"><a href="#2、解析内容" class="headerlink" title="2、解析内容"></a>2、解析内容</h3><ul><li>寻找自己需要的信息，就是利用正则表达式或者其他库提取目标信息</li><li>常用库：re、beautifulsoup4</li></ul><h3 id="3、保存数据"><a href="#3、保存数据" class="headerlink" title="3、保存数据"></a>3、保存数据</h3><ul><li>将解析得到的数据持久化到文件或者数据库中<br>urllib发送请求<br>这里使用jupyter notebook进行测试  </li></ul><h2 id="2、使用urllib发送请求"><a href="#2、使用urllib发送请求" class="headerlink" title="2、使用urllib发送请求"></a>2、使用urllib发送请求</h2><h3 id="1、request-urlopen"><a href="#1、request-urlopen" class="headerlink" title="1、request.urlopen()"></a>1、request.urlopen()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from urllib import request</span><br><span class="line">url&#x3D;&quot;http:&#x2F;&#x2F;www.baidu.com&quot;</span><br><span class="line">res&#x3D;request.urlopen(url)  #获取响应</span><br><span class="line"></span><br><span class="line">print(res.info()) #响应头</span><br><span class="line">print(res.getcode()) #状态码 2xx正常,3xx发生重定向,4xx访问资源问题,5xx服务器内部错误</span><br><span class="line">print(res.geturl()) #返回响应地址</span><br></pre></td></tr></table></figure><p><img src="%E5%AE%9E%E6%88%982.png"></p><h3 id="2、获取网页html源码"><a href="#2、获取网页html源码" class="headerlink" title="2、获取网页html源码"></a>2、获取网页html源码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">html &#x3D; res.read()</span><br><span class="line">html &#x3D; html.decode(&quot;utf-8&quot;)#解码</span><br><span class="line">print(html)</span><br></pre></td></tr></table></figure><h3 id="3、解决反爬"><a href="#3、解决反爬" class="headerlink" title="3、解决反爬"></a>3、解决反爬</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from urllib import request</span><br><span class="line">url&#x3D;&quot;http:&#x2F;&#x2F;www.dianping.com&quot;</span><br><span class="line">#最基本的反爬措施：添加header信息</span><br><span class="line">header&#x3D;&#123;</span><br><span class="line">    &quot;User-Agent&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;80.0.3987.149 Safari&#x2F;537.36&quot;</span><br><span class="line">&#125;</span><br><span class="line">req&#x3D;request.Request(url,headers&#x3D;header)</span><br><span class="line">res&#x3D;request.urlopen(req)  #获取响应</span><br><span class="line">#获取网页html源码</span><br><span class="line">html&#x3D;res.read()</span><br><span class="line">html&#x3D;html.decode(&quot;utf-8&quot;)</span><br><span class="line">print(html)</span><br></pre></td></tr></table></figure><h2 id="3、使用requests发送请求"><a href="#3、使用requests发送请求" class="headerlink" title="3、使用requests发送请求"></a>3、使用requests发送请求</h2><h3 id="1、requests-get"><a href="#1、requests-get" class="headerlink" title="1、requests.get()"></a>1、requests.get()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url&#x3D;&quot;http:&#x2F;&#x2F;www.baidu.com&quot;</span><br><span class="line">res&#x3D;requests.get(url)#发起请求</span><br><span class="line"></span><br><span class="line">print(res.encoding)#查看编码</span><br><span class="line">print(res.headers)</span><br><span class="line">#res.headers返回结果里面 如果没有Content-Type encoding&#x3D;utf-8 否则 如果设置了charset就以设置的为准</span><br><span class="line">print(res.url) 否则就是ISO-8859-1</span><br><span class="line"></span><br><span class="line">返回结果：</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">ISO-8859-1</span><br><span class="line">&#123;&#39;Cache-Control&#39;: &#39;private, no-cache, no-store, proxy-revalidate, no-transform&#39;, &#39;Connection&#39;: &#39;keep-alive&#39;, &#39;Content-Encoding&#39;: &#39;gzip&#39;, &#39;Content-Type&#39;: &#39;text&#x2F;html&#39;, &#39;Date&#39;: &#39;Tue, 24 Mar 2020 03:58:05 GMT&#39;, &#39;Last-Modified&#39;: &#39;Mon, 23 Jan 2017 13:27:36 GMT&#39;, &#39;Pragma&#39;: &#39;no-cache&#39;, &#39;Server&#39;: &#39;bfe&#x2F;1.0.8.18&#39;, &#39;Set-Cookie&#39;: &#39;BDORZ&#x3D;27315; max-age&#x3D;86400; domain&#x3D;.baidu.com; path&#x3D;&#x2F;&#39;, &#39;Transfer-Encoding&#39;: &#39;chunked&#39;&#125;</span><br><span class="line">http:&#x2F;&#x2F;www.baidu.com&#x2F;</span><br></pre></td></tr></table></figure><h3 id="2、解决反爬"><a href="#2、解决反爬" class="headerlink" title="2、解决反爬"></a>2、解决反爬</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url&#x3D;&quot;http:&#x2F;&#x2F;www.dianping.com&quot;</span><br><span class="line">header&#x3D;&#123;</span><br><span class="line">    &quot;User-Agent&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;80.0.3987.149 Safari&#x2F;537.36&quot;</span><br><span class="line">&#125;</span><br><span class="line">res&#x3D;requests.get(url,headers&#x3D;header)</span><br><span class="line"></span><br><span class="line">print(res.encoding)</span><br><span class="line">print(res.headers)</span><br><span class="line">print(res.url)</span><br><span class="line">print(res.status_code)#此时的状态码是200说明可以正常访问了</span><br><span class="line"></span><br><span class="line">返回结果：</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">UTF-8</span><br><span class="line">&#123;&#39;Date&#39;: &#39;Tue, 24 Mar 2020 04:14:23 GMT&#39;, &#39;Content-Type&#39;: &#39;text&#x2F;html;charset&#x3D;UTF-8&#39;, &#39;Transfer-Encoding&#39;: &#39;chunked&#39;, &#39;Connection&#39;: &#39;keep-alive&#39;, &#39;Keep-Alive&#39;: &#39;timeout&#x3D;5&#39;, &#39;Vary&#39;: &#39;User-Agent, Accept-Encoding&#39;, &#39;M-TraceId&#39;: &#39;-4673120569475554214, 1931600023016859584&#39;, &#39;Set-Cookie&#39;: &#39;cy&#x3D;1281; Domain&#x3D;.dianping.com; Expires&#x3D;Fri, 24-Apr-2020 04:14:23 GMT; Path&#x3D;&#x2F;, cye&#x3D;nanzhao; Domain&#x3D;.dianping.com; Expires&#x3D;Fri, 24-Apr-2020 04:14:23 GMT; Path&#x3D;&#x2F;&#39;, &#39;Content-Language&#39;: &#39;en-US&#39;, &#39;Content-Encoding&#39;: &#39;gzip&#39;, &#39;Pragma&#39;: &#39;no-cache&#39;, &#39;Cache-Control&#39;: &#39;no-cache&#39;, &#39;Server&#39;: &#39;DPweb&#39;&#125;</span><br><span class="line">http:&#x2F;&#x2F;www.dianping.com&#x2F;</span><br><span class="line">200</span><br></pre></td></tr></table></figure><h2 id="4、beautifulsoup4解析内容"><a href="#4、beautifulsoup4解析内容" class="headerlink" title="4、beautifulsoup4解析内容"></a>4、beautifulsoup4解析内容</h2><p>beautifulsoup4将复杂的HTML文档转换成一个树形结构，每个节点都是python对象</p><ul><li>安装：pip install beautifulsoup4</li><li>BeautifulSoup(html)<br>获取节点：find()、find_all()/select()<br>获取属性：attrs<br>获取文本：text  </li></ul><h3 id="1、a标签解析"><a href="#1、a标签解析" class="headerlink" title="1、a标签解析"></a>1、a标签解析</h3><p><img src="%E5%AE%9E%E6%88%984.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url&#x3D;&quot;http:&#x2F;&#x2F;wsjkw.sc.gov.cn&#x2F;scwsjkw&#x2F;gzbd&#x2F;fyzt.shtml&quot;</span><br><span class="line">res&#x3D;requests.get(url)</span><br><span class="line">res.encoding&#x3D;&quot;utf-8&quot;</span><br><span class="line">html&#x3D;res.text</span><br><span class="line">soup&#x3D;BeautifulSoup(html)</span><br><span class="line">soup.find(&quot;h2&quot;).text</span><br><span class="line">a&#x3D;soup.find(&quot;a&quot;) #获取网页a标签</span><br><span class="line">print(a)</span><br><span class="line">print(a.attrs) #打印标签属性</span><br><span class="line">print(a.attrs[&quot;href&quot;]) #打印标签属性中的href的值</span><br><span class="line"></span><br><span class="line">返回结果：</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;&#x2F;scwsjkw&#x2F;gzbd01&#x2F;2020&#x2F;3&#x2F;24&#x2F;62ae66867eea419dac169bf6a8684fb8.shtml&quot; target&#x3D;&quot;_blank&quot;&gt;&lt;img alt&#x3D;&quot;我省新型冠状病毒肺炎疫情最新情况（3月...&quot; src&#x3D;&quot;&#x2F;scwsjkw&#x2F;gzbd01&#x2F;2020&#x2F;3&#x2F;24&#x2F;62ae66867eea419dac169bf6a8684fb8&#x2F;images&#x2F;a799555b325242f6b0b2924c907f09ad.jpg</span><br><span class="line">&quot;&#x2F;&gt;&lt;&#x2F;a&gt;</span><br><span class="line">&#123;&#39;target&#39;: &#39;_blank&#39;, &#39;href&#39;: &#39;&#x2F;scwsjkw&#x2F;gzbd01&#x2F;2020&#x2F;3&#x2F;24&#x2F;62ae66867eea419dac169bf6a8684fb8.shtml&#39;&#125;</span><br><span class="line">&#x2F;scwsjkw&#x2F;gzbd01&#x2F;2020&#x2F;3&#x2F;24&#x2F;62ae66867eea419dac169bf6a8684fb8.shtml</span><br></pre></td></tr></table></figure><p>然后获取该标签属性中的href值拼接新的url  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url_new&#x3D;&quot;http:&#x2F;&#x2F;wsjkw.sc.gov.cn&quot;+a.attrs[&quot;href&quot;]</span><br><span class="line">res&#x3D;requests.get(url_new)</span><br><span class="line">res.encoding&#x3D;&quot;utf-8&quot;</span><br><span class="line">BeautifulSoup(res.text)#获取Html文本</span><br></pre></td></tr></table></figure><p>返回结果往下拉，找到我们感兴趣的目标：<br><img src="%E5%AE%9E%E6%88%985.png">  </p><h3 id="2、p标签解析"><a href="#2、p标签解析" class="headerlink" title="2、p标签解析"></a>2、p标签解析</h3><p><img src="%E5%AE%9E%E6%88%986.png"><br>定位p标签,锁定我们需要的信息以便下一步正则分析数据  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">soup&#x3D;BeautifulSoup(res.text)</span><br><span class="line">context&#x3D;soup.find(&quot;p&quot;)</span><br><span class="line">print(context)</span><br><span class="line">返回结果：</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&lt;p&gt;&lt;span style&#x3D;&quot;font-size: 12pt;&quot;&gt;    3月23日0-24时，我省新型冠状病毒肺炎新增2例确诊病例（1、黄某某3月17日从英国经上海，于3月18日抵达成都后即接受隔离医学观察和动态诊疗，3月23日确诊；2、王某某3月18日从英国经北京，于3月20日抵达成都后即接受隔离医学观察和动态诊疗，3月23日确诊），相关密切接触者正在实施追踪和集中隔离医学观察。无新增治愈出院病例，无新增疑似病例，无新增死亡病例。</span><br><span class="line">&lt;&#x2F;span&gt;&lt;br&#x2F;&gt;</span><br><span class="line">&lt;span style&#x3D;&quot;font-size: 12pt;&quot;&gt;   （确诊患者&lt;含输入病例&gt;具体情况由各市&lt;州&gt;卫生健康委进行通报）</span><br><span class="line">&lt;&#x2F;span&gt;&lt;br&#x2F;&gt;</span><br><span class="line">&lt;span style&#x3D;&quot;font-size: 12pt;&quot;&gt;    截至3月24日0时，我省累计报告新型冠状病毒肺炎确诊病例545例（其中6例为境外输入病例），涉及21个市（州）。</span><br><span class="line">&lt;&#x2F;span&gt;&lt;br&#x2F;&gt;</span><br><span class="line">&lt;span style&#x3D;&quot;font-size: 12pt;&quot;&gt;    我省183个县（市、区）全部为低风险区。</span><br><span class="line">&lt;&#x2F;span&gt;&lt;br&#x2F;&gt;</span><br><span class="line">&lt;span style&#x3D;&quot;font-size: 12pt;&quot;&gt;    545名确诊患者中，正在住院隔离治疗6人，已治愈出院536人，死亡3人。</span><br><span class="line">&lt;&#x2F;span&gt;&lt;br&#x2F;&gt;</span><br><span class="line">&lt;span style&#x3D;&quot;font-size: 12pt;&quot;&gt;    现有疑似病例0例。</span><br><span class="line">&lt;&#x2F;span&gt;&lt;br&#x2F;&gt;</span><br><span class="line">&lt;span style&#x3D;&quot;font-size: 12pt;&quot;&gt;    现有564人正在接受医学观察。&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure><h2 id="5、re解析内容"><a href="#5、re解析内容" class="headerlink" title="5、re解析内容"></a>5、re解析内容</h2><ul><li>re是python自带的正则表达式模块，使用它需要有一定的正则表达式基础</li><li>re.search(regex,str)  </li></ul><p>1.在str中查找满足条件的字符串，匹配不上返回None<br>2.对返回结果可以分组，可在字符串内添加小括号分离数据<br>groups()<br>group(index):返回指定分组内容  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line">pattern&#x3D;&quot;新增(\d+)例确诊病例&quot;</span><br><span class="line">res&#x3D;re.search(pattern,context)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">返回结果：</span><br><span class="line">&lt;_sre.SRE_Match object; span&#x3D;(25, 33), match&#x3D;&#39;新增2例确诊病例&#39;&gt;</span><br></pre></td></tr></table></figure><p><img src="%E5%AE%9E%E6%88%987.png">  </p><h2 id="6、爬取腾讯疫情数据"><a href="#6、爬取腾讯疫情数据" class="headerlink" title="6、爬取腾讯疫情数据"></a>6、爬取腾讯疫情数据</h2><ul><li>有了爬虫基础后，我们可以自行去全国各地的卫健委网站上爬取数据，不过部分网站反爬虫手段很高明，需要更专业的反爬手段</li><li>我们也可以去各大平台直接爬取最终数据，比如：<br><a href="https://voice.baidu.com/act/newpneumonia/newpneumonia/?from=osari_pc_1">https://voice.baidu.com/act/newpneumonia/newpneumonia/?from=osari_pc_1</a><br><a href="https://news.qq.com/zt2020/page/feiyan.htm#/">https://news.qq.com/zt2020/page/feiyan.htm#/</a>  </li></ul><h3 id="1、找到数据源"><a href="#1、找到数据源" class="headerlink" title="1、找到数据源"></a>1、找到数据源</h3><p>打开google Browser开发者工具，network&gt;&gt;js（一般js、json格式的都在这里面），找get开头的（一般这种请求的数据都是以get命名开头）；</p><p>一个一个筛选，找到是这个：<br><img src="%E5%AE%9E%E6%88%989.png"><br>双击打开或者点开response<br><img src="%E5%AE%9E%E6%88%9810.png"></p><h3 id="2、发起请求，获取数据"><a href="#2、发起请求，获取数据" class="headerlink" title="2、发起请求，获取数据"></a>2、发起请求，获取数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">url&#x3D;&quot;https:&#x2F;&#x2F;view.inews.qq.com&#x2F;g2&#x2F;getOnsInfo?name&#x3D;disease_h5&quot;</span><br><span class="line">#使用requests请求</span><br><span class="line">res&#x3D;requests.get(url)</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure><p><img src="%E5%AE%9E%E6%88%988.png"></p><h3 id="3、拿到json格式的数据后我们把它转换为字典"><a href="#3、拿到json格式的数据后我们把它转换为字典" class="headerlink" title="3、拿到json格式的数据后我们把它转换为字典"></a>3、拿到json格式的数据后我们把它转换为字典</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line">d&#x3D;json.loads(res.text)</span><br><span class="line">print(d)</span><br></pre></td></tr></table></figure><p><img src="%E5%AE%9E%E6%88%9811.png"><br>里面主要两个：ret、data</p><h3 id="4、数据分析"><a href="#4、数据分析" class="headerlink" title="4、数据分析"></a>4、数据分析</h3><p><img src="%E5%AE%9E%E6%88%9818.png"></p><ul><li><p>打印一下数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(d[&quot;data&quot;])</span><br></pre></td></tr></table></figure><p><img src="%E5%AE%9E%E6%88%9812.png"></p></li><li><p>看看data的数据类型是什么</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(type(d[&quot;data&quot;]))</span><br><span class="line"></span><br><span class="line">返回结果：</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&lt;class &#39;str&#39;&gt;</span><br></pre></td></tr></table></figure></li><li><p>再用json模块加载data里的数据到新的变量data_all（即str加载成字典格式）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data_all&#x3D;json.loads(d[&quot;data&quot;])</span><br><span class="line">print(type(data_all))</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&lt;class &#39;dict&#39;&gt;</span><br></pre></td></tr></table></figure></li><li><p>看一下这个字典格式的data里面有什么</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data_all.keys()</span><br></pre></td></tr></table></figure><p><img src="%E5%AE%9E%E6%88%9813.png"></p></li><li><p>打印一下前几个看看怎么样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(data_all[&quot;lastUpdateTime&quot;])</span><br><span class="line">print(data_all[&quot;chinaTotal&quot;])</span><br><span class="line">print(data_all[&quot;chinaAdd&quot;])</span><br></pre></td></tr></table></figure><p><img src="%E5%AE%9E%E6%88%9814.png"></p></li><li><p>看一下areaTree，看一下有几个key</p></li><li><p>可以看到，长度是一，只有中国</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(len(data_all[&quot;areaTree&quot;]))</span><br><span class="line">print(data_all[&quot;areaTree&quot;][0].keys())</span><br></pre></td></tr></table></figure><p><img src="%E5%AE%9E%E6%88%9815.png"></p></li><li><p>分别查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(data_all[&quot;areaTree&quot;][0][&quot;name&quot;])</span><br><span class="line">print(data_all[&quot;areaTree&quot;][0][&quot;today&quot;])</span><br><span class="line">print(data_all[&quot;areaTree&quot;][0][&quot;total&quot;])</span><br></pre></td></tr></table></figure><p><img src="%E5%AE%9E%E6%88%9816.png"></p></li><li><p>children比较长，另起一个单元格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(len(data_all[&quot;areaTree&quot;][0][&quot;children&quot;]))#看看长度</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">34</span><br></pre></td></tr></table></figure></li><li><p>#写个循环遍历到省级</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for i in data_all[&quot;areaTree&quot;][0][&quot;children&quot;]:</span><br><span class="line">    print(i[&quot;name&quot;]) #拿到各省名字</span><br></pre></td></tr></table></figure><p><img src="%E5%AE%9E%E6%88%9817.png"></p></li><li><p>完整代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">import time </span><br><span class="line">import json</span><br><span class="line">import traceback  #追踪异常</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">def get_tencent_data(): </span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    :return: 返回历史数据和当日详细数据</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    url &#x3D; &#39;https:&#x2F;&#x2F;view.inews.qq.com&#x2F;g2&#x2F;getOnsInfo?name&#x3D;disease_h5&#39;</span><br><span class="line">    headers &#x3D; &#123;</span><br><span class="line">        &#39;user-agent&#39;: &#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;79.0.3945.88 Safari&#x2F;537.36&#39;,</span><br><span class="line">    &#125;</span><br><span class="line">    r &#x3D; requests.get(url, headers)</span><br><span class="line">    res &#x3D; json.loads(r.text)  # json字符串转字典</span><br><span class="line">    data_all &#x3D; json.loads(res[&#39;data&#39;])</span><br><span class="line"></span><br><span class="line">    history &#x3D; &#123;&#125;  # 历史数据</span><br><span class="line">    for i in data_all[&quot;chinaDayList&quot;]:</span><br><span class="line">        ds &#x3D; &quot;2020.&quot; + i[&quot;date&quot;]</span><br><span class="line">        tup &#x3D; time.strptime(ds, &quot;%Y.%m.%d&quot;)</span><br><span class="line">        ds &#x3D; time.strftime(&quot;%Y-%m-%d&quot;, tup)  # 改变时间格式,不然插入数据库会报错，数据库是datetime类型</span><br><span class="line">        confirm &#x3D; i[&quot;confirm&quot;]</span><br><span class="line">        suspect &#x3D; i[&quot;suspect&quot;]</span><br><span class="line">        heal &#x3D; i[&quot;heal&quot;]</span><br><span class="line">        dead &#x3D; i[&quot;dead&quot;]</span><br><span class="line">        history[ds] &#x3D; &#123;&quot;confirm&quot;: confirm, &quot;suspect&quot;: suspect, &quot;heal&quot;: heal, &quot;dead&quot;: dead&#125;</span><br><span class="line">    for i in data_all[&quot;chinaDayAddList&quot;]:</span><br><span class="line">        ds &#x3D; &quot;2020.&quot; + i[&quot;date&quot;]</span><br><span class="line">        tup &#x3D; time.strptime(ds, &quot;%Y.%m.%d&quot;)</span><br><span class="line">        ds &#x3D; time.strftime(&quot;%Y-%m-%d&quot;, tup)</span><br><span class="line">        confirm &#x3D; i[&quot;confirm&quot;]</span><br><span class="line">        suspect &#x3D; i[&quot;suspect&quot;]</span><br><span class="line">        heal &#x3D; i[&quot;heal&quot;]</span><br><span class="line">        dead &#x3D; i[&quot;dead&quot;]</span><br><span class="line">        history[ds].update(&#123;&quot;confirm_add&quot;: confirm, &quot;suspect_add&quot;: suspect, &quot;heal_add&quot;: heal, &quot;dead_add&quot;: dead&#125;)</span><br><span class="line"></span><br><span class="line">    details &#x3D; []  # 当日详细数据</span><br><span class="line">    update_time &#x3D; data_all[&quot;lastUpdateTime&quot;]</span><br><span class="line">    data_country &#x3D; data_all[&quot;areaTree&quot;]  # list 25个国家</span><br><span class="line">    data_province &#x3D; data_country[0][&quot;children&quot;]  # 中国各省</span><br><span class="line">    for pro_infos in data_province:</span><br><span class="line">        province &#x3D; pro_infos[&quot;name&quot;]  # 省名</span><br><span class="line">        for city_infos in pro_infos[&quot;children&quot;]:</span><br><span class="line">            city &#x3D; city_infos[&quot;name&quot;]</span><br><span class="line">            confirm &#x3D; city_infos[&quot;total&quot;][&quot;confirm&quot;]</span><br><span class="line">            confirm_add &#x3D; city_infos[&quot;today&quot;][&quot;confirm&quot;]</span><br><span class="line">            heal &#x3D; city_infos[&quot;total&quot;][&quot;heal&quot;]</span><br><span class="line">            dead &#x3D; city_infos[&quot;total&quot;][&quot;dead&quot;]</span><br><span class="line">            details.append([update_time, province, city, confirm, confirm_add, heal, dead])</span><br><span class="line">    return history, details</span><br></pre></td></tr></table></figure></li></ul><h2 id="7、数据存储"><a href="#7、数据存储" class="headerlink" title="7、数据存储"></a>7、数据存储</h2><h3 id="1、创建数据库cov-然后建两张表"><a href="#1、创建数据库cov-然后建两张表" class="headerlink" title="1、创建数据库cov,然后建两张表"></a>1、创建数据库cov,然后建两张表</h3><ul><li>登录<br><img src="%E5%AE%9E%E6%88%9819.png"></li><li>创建cov数据库<br><img src="%E5%AE%9E%E6%88%9820.png"></li><li>切换到cov数据库<br>use cov;</li><li>history 表存储每日总数据<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;history&#96; ( </span><br><span class="line">&#96;ds&#96; datetime NOT NULL COMMENT &#39;日期&#39;, </span><br><span class="line">&#96;confirm&#96; int(11) DEFAULT NULL COMMENT &#39;累计确诊&#39;, </span><br><span class="line">&#96;confirm_add&#96; int(11) DEFAULT NULL COMMENT &#39;当日新增确诊&#39;, </span><br><span class="line">&#96;suspect&#96; int(11) DEFAULT NULL COMMENT &#39;剩余疑似&#39;, </span><br><span class="line">&#96;suspect_add&#96; int(11) DEFAULT NULL COMMENT &#39;当日新增疑似&#39;, </span><br><span class="line">&#96;heal&#96; int(11) DEFAULT NULL COMMENT &#39;累计治愈&#39;, </span><br><span class="line">&#96;heal_add&#96; int(11) DEFAULT NULL COMMENT &#39;当日新增治愈&#39;, </span><br><span class="line">&#96;dead&#96; int(11) DEFAULT NULL COMMENT &#39;累计死亡&#39;, </span><br><span class="line">&#96;dead_add&#96; int(11) DEFAULT NULL COMMENT &#39;当日新增死亡&#39;, </span><br><span class="line">PRIMARY KEY (&#96;ds&#96;) USING BTREE ) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8mb4;</span><br></pre></td></tr></table></figure></li><li>details 表存储每日详细数据<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;details&#96; ( </span><br><span class="line">&#96;id&#96; int(11) NOT NULL AUTO_INCREMENT, </span><br><span class="line">&#96;update_time&#96; datetime DEFAULT NULL COMMENT &#39;数据最后更新时间&#39;, </span><br><span class="line">&#96;province&#96; varchar(50) DEFAULT NULL COMMENT &#39;省&#39;, </span><br><span class="line">&#96;city&#96; varchar(50) DEFAULT NULL COMMENT &#39;市&#39;, </span><br><span class="line">&#96;confirm&#96; int(11) DEFAULT NULL COMMENT &#39;累计确诊&#39;, </span><br><span class="line">&#96;confirm_add&#96; int(11) DEFAULT NULL COMMENT &#39;新增确诊&#39;, </span><br><span class="line">&#96;heal&#96; int(11) DEFAULT NULL COMMENT &#39;累计治愈&#39;, </span><br><span class="line">&#96;dead&#96; int(11) DEFAULT NULL COMMENT &#39;累计死亡&#39;, </span><br><span class="line">PRIMARY KEY (&#96;id&#96;) ) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8mb4;</span><br></pre></td></tr></table></figure></li><li>查看数据库中的数据表<br>show tables;  </li></ul><h3 id="2、使用python的pymysql与数据库交互"><a href="#2、使用python的pymysql与数据库交互" class="headerlink" title="2、使用python的pymysql与数据库交互"></a>2、使用python的pymysql与数据库交互</h3><ul><li>1、建立连接</li><li>2、创建游标</li><li>3、执行操作</li><li>4、关闭连接<h4 id="1、pip-install-pymysql"><a href="#1、pip-install-pymysql" class="headerlink" title="1、pip install pymysql"></a>1、pip install pymysql</h4><h4 id="2、pymysql的简单使用"><a href="#2、pymysql的简单使用" class="headerlink" title="2、pymysql的简单使用"></a>2、pymysql的简单使用</h4></li><li>找到目标主机的IP地址<br>win10：win+R–&gt;cmd–&gt;ipconfig /all<br><img src="%E5%AE%9E%E6%88%9823.png"><br>ip地址为192.168.1.10  </li><li>运行代码，使主机与数据库cov连接<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#pymysql 的简单使用</span><br><span class="line"></span><br><span class="line">#建立连接</span><br><span class="line">conn &#x3D; pymysql.connect(host&#x3D;&quot;192.168.1.10&quot;,</span><br><span class="line">                      user&#x3D;&quot;root&quot;,</span><br><span class="line">                      password&#x3D;&quot;123456&quot;,</span><br><span class="line">                      db&#x3D;&quot;cov&quot;)</span><br><span class="line">#创建游标，默认是元组型</span><br><span class="line">cursor &#x3D; conn.cursor()</span><br><span class="line"></span><br><span class="line">#执行操作</span><br><span class="line">sql&#x3D; &quot;select * from history&quot;</span><br><span class="line">cursor.execute(sql)</span><br><span class="line">conn.commit() #提交事务</span><br><span class="line">res &#x3D; cursor.fetchall()#获取所有查询结果</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">#关闭连接</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>如果报错：Host is not allowed to connect to this MySQL server<br>登录数据库，选择用户将root的主机改为%<br><img src="%E5%AE%9E%E6%88%9824.png"><br>由于cov数据库为空，所以运行后输出()则，表示成功连接<br><img src="%E5%AE%9E%E6%88%9825.png"></li></ul><h4 id="3、插入一条数据"><a href="#3、插入一条数据" class="headerlink" title="3、插入一条数据"></a>3、插入一条数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#pymysql 的简单使用</span><br><span class="line"></span><br><span class="line">#建立连接</span><br><span class="line">conn &#x3D; pymysql.connect(host&#x3D;&quot;192.168.1.10&quot;,</span><br><span class="line">                      user&#x3D;&quot;root&quot;,</span><br><span class="line">                      password&#x3D;&quot;123456&quot;,</span><br><span class="line">                      db&#x3D;&quot;cov&quot;)</span><br><span class="line">#创建游标，默认是元组型</span><br><span class="line">cursor &#x3D; conn.cursor()</span><br><span class="line"></span><br><span class="line">sql&#x3D; &quot;insert into history values(%s,%s,%s,%s,%s,%s,%s,%s,%s)&quot;#9个%s占位</span><br><span class="line">cursor.execute(sql,[time.strftime(&quot;%Y-%m-%d&quot;),10,1,2,3,4,5,6,7])</span><br><span class="line">conn.commit() #提交事务</span><br><span class="line"># res &#x3D; cursor.fetchall()</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><p>如果不报错的话，进行一下查询测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#建立连接</span><br><span class="line">conn &#x3D; pymysql.connect(host&#x3D;&quot;192.168.1.10&quot;,</span><br><span class="line">                      user&#x3D;&quot;root&quot;,</span><br><span class="line">                      password&#x3D;&quot;123456&quot;,</span><br><span class="line">                      db&#x3D;&quot;cov&quot;)</span><br><span class="line">#创建游标，默认是元组型</span><br><span class="line">cursor &#x3D; conn.cursor()</span><br><span class="line"></span><br><span class="line">sql&#x3D; &quot;select * from history&quot;</span><br><span class="line">cursor.execute(sql)</span><br><span class="line"># conn.commit() #提交事务</span><br><span class="line">res &#x3D; cursor.fetchall()</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><p>返回结果：<br>((datetime.datetime(2021, 2, 12, 0, 0), 10, 1, 2, 3, 4, 5, 6, 7),)</p><h4 id="4、通用存储方法"><a href="#4、通用存储方法" class="headerlink" title="4、通用存储方法"></a>4、通用存储方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">def get_conn():</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    :return: 连接，游标</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    # 创建连接</span><br><span class="line">    conn &#x3D; pymysql.connect(host&#x3D;&quot;127.0.0.1&quot;,</span><br><span class="line">                           user&#x3D;&quot;root&quot;,</span><br><span class="line">                           password&#x3D;&quot;123456&quot;,</span><br><span class="line">                           db&#x3D;&quot;cov&quot;,</span><br><span class="line">                           charset&#x3D;&quot;utf8&quot;)</span><br><span class="line">    # 创建游标</span><br><span class="line">    cursor &#x3D; conn.cursor()  # 执行完毕返回的结果集默认以元组显示</span><br><span class="line">    return conn, cursor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def close_conn(conn, cursor):</span><br><span class="line">    if cursor:</span><br><span class="line">        cursor.close()</span><br><span class="line">    if conn:</span><br><span class="line">        conn.close()</span><br></pre></td></tr></table></figure><h4 id="5、更新details表"><a href="#5、更新details表" class="headerlink" title="5、更新details表"></a>5、更新details表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">def update_details():</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    更新 details 表</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    cursor &#x3D; None</span><br><span class="line">    conn &#x3D; None</span><br><span class="line">    # python捕获异常</span><br><span class="line">    try:</span><br><span class="line">        li &#x3D; get_tencent_data()[1]  #  0 是历史数据字典,1 最新详细数据列表</span><br><span class="line">        conn, cursor &#x3D; get_conn()</span><br><span class="line">        sql &#x3D; &quot;insert into details(update_time,province,city,confirm,confirm_add,heal,dead) values(%s,%s,%s,%s,%s,%s,%s)&quot;</span><br><span class="line">        sql_query &#x3D; &#39;select %s&#x3D;(select update_time from details order by id desc limit 1)&#39; #对比当前最大时间戳</span><br><span class="line">        cursor.execute(sql_query,li[0][0])</span><br><span class="line">        if not cursor.fetchone()[0]:</span><br><span class="line">            print(f&quot;&#123;time.asctime()&#125;开始更新最新数据&quot;)</span><br><span class="line">            for item in li:</span><br><span class="line">                cursor.execute(sql, item)</span><br><span class="line">            conn.commit()  # 提交事务 update delete insert操作</span><br><span class="line">            print(f&quot;&#123;time.asctime()&#125;更新最新数据完毕&quot;)</span><br><span class="line">        else:</span><br><span class="line">            print(f&quot;&#123;time.asctime()&#125;已是最新数据！&quot;)</span><br><span class="line">    except:</span><br><span class="line">        traceback.print_exc()</span><br><span class="line">    finally:</span><br><span class="line">        close_conn(conn, cursor)</span><br></pre></td></tr></table></figure><h4 id="6、插入历史数据"><a href="#6、插入历史数据" class="headerlink" title="6、插入历史数据"></a>6、插入历史数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">def insert_history():</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">        插入历史数据</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    cursor &#x3D; None</span><br><span class="line">    conn &#x3D; None</span><br><span class="line">    try:</span><br><span class="line">        dic &#x3D; get_tencent_data()[0]  # 0 是历史数据字典,1 最新详细数据列表</span><br><span class="line">        print(f&quot;&#123;time.asctime()&#125;开始插入历史数据&quot;)</span><br><span class="line">        conn, cursor &#x3D; get_conn()</span><br><span class="line">        sql &#x3D; &quot;insert into history values(%s,%s,%s,%s,%s,%s,%s,%s,%s)&quot;</span><br><span class="line">        for k, v in dic.items():</span><br><span class="line">            # item 格式 &#123;&#39;2020-01-13&#39;: &#123;&#39;confirm&#39;: 41, &#39;suspect&#39;: 0, &#39;heal&#39;: 0, &#39;dead&#39;: 1&#125;</span><br><span class="line">            cursor.execute(sql, [k, v.get(&quot;confirm&quot;), v.get(&quot;confirm_add&quot;), v.get(&quot;suspect&quot;),</span><br><span class="line">                                 v.get(&quot;suspect_add&quot;), v.get(&quot;heal&quot;), v.get(&quot;heal_add&quot;),</span><br><span class="line">                                 v.get(&quot;dead&quot;), v.get(&quot;dead_add&quot;)])</span><br><span class="line"></span><br><span class="line">        conn.commit()  # 提交事务 update delete insert操作</span><br><span class="line">        print(f&quot;&#123;time.asctime()&#125;插入历史数据完毕&quot;)</span><br><span class="line">    except:</span><br><span class="line">        traceback.print_exc()</span><br><span class="line">    finally:</span><br><span class="line">        close_conn(conn, cursor)</span><br></pre></td></tr></table></figure><h4 id="7、更新历史数据"><a href="#7、更新历史数据" class="headerlink" title="7、更新历史数据"></a>7、更新历史数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">def update_history():</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    更新历史数据</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    cursor &#x3D; None</span><br><span class="line">    conn &#x3D; None</span><br><span class="line">    try:</span><br><span class="line">        dic &#x3D; get_tencent_data()[0]  #  0 是历史数据字典,1 最新详细数据列表</span><br><span class="line">        print(f&quot;&#123;time.asctime()&#125;开始更新历史数据&quot;)</span><br><span class="line">        conn, cursor &#x3D; get_conn()</span><br><span class="line">        sql &#x3D; &quot;insert into history values(%s,%s,%s,%s,%s,%s,%s,%s,%s)&quot;</span><br><span class="line">        sql_query &#x3D; &quot;select confirm from history where ds&#x3D;%s&quot;</span><br><span class="line">        for k, v in dic.items():</span><br><span class="line">            # item 格式 &#123;&#39;2020-01-13&#39;: &#123;&#39;confirm&#39;: 41, &#39;suspect&#39;: 0, &#39;heal&#39;: 0, &#39;dead&#39;: 1&#125;</span><br><span class="line">            if not cursor.execute(sql_query, k):</span><br><span class="line">                cursor.execute(sql, [k, v.get(&quot;confirm&quot;), v.get(&quot;confirm_add&quot;), v.get(&quot;suspect&quot;),</span><br><span class="line">                                     v.get(&quot;suspect_add&quot;), v.get(&quot;heal&quot;), v.get(&quot;heal_add&quot;),</span><br><span class="line">                                     v.get(&quot;dead&quot;), v.get(&quot;dead_add&quot;)])</span><br><span class="line">        conn.commit()  # 提交事务 update delete insert操作</span><br><span class="line">        print(f&quot;&#123;time.asctime()&#125;历史数据更新完毕&quot;)</span><br><span class="line">    except:</span><br><span class="line">        traceback.print_exc()</span><br><span class="line">    finally:</span><br><span class="line">        close_conn(conn, cursor)</span><br></pre></td></tr></table></figure><h4 id="8、插入历史数据"><a href="#8、插入历史数据" class="headerlink" title="8、插入历史数据"></a>8、插入历史数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert_history()</span><br></pre></td></tr></table></figure><p>运行后发现报错<br><img src="%E5%AE%9E%E6%88%9826.png"><br>原因是：项目是2020.2月份做出来的，现在腾讯后台有所更改,本来history和detail两张表的数据可以在一个url(<a href="https://view.inews.qq.com/g2/getOnsInfo?name=disease_h5)%E8%8E%B7%E5%8F%96%EF%BC%8C%E7%8E%B0%E5%9C%A8%E6%94%B9%E4%BA%86%EF%BC%8C%E5%88%86%E6%95%A3%E5%88%B0%E4%BA%86%E5%8F%A6%E4%B8%80%E4%B8%AAurl(https://view.inews.qq.com/g2/getOnsInfo?name=disease_other)%EF%BC%8C%E6%89%80%E4%BB%A5%E6%97%A0%E6%B3%95%E7%88%AC%E5%8F%96%E5%88%B0chinaDayList%EF%BC%8C%E5%90%8C%E6%97%B6%E4%B9%9F%E5%8F%AF%E7%9C%8B%E5%88%B0%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E9%94%AE%E5%AD%97%E4%B8%AD%E5%B9%B6%E6%97%A0chinaDayList">https://view.inews.qq.com/g2/getOnsInfo?name=disease_h5)获取，现在改了，分散到了另一个url(https://view.inews.qq.com/g2/getOnsInfo?name=disease_other)，所以无法爬取到chinaDayList，同时也可看到之间的关键字中并无chinaDayList</a><br><img src="%E5%AE%9E%E6%88%9813.png"></p><h3 id="3、腾讯数据爬取-更新代码"><a href="#3、腾讯数据爬取-更新代码" class="headerlink" title="3、腾讯数据爬取(更新代码)"></a>3、腾讯数据爬取(更新代码)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"># url&#x3D;&quot;https:&#x2F;&#x2F;view.inews.qq.com&#x2F;g2&#x2F;getOnsInfo?name&#x3D;disease_h5&quot;</span><br><span class="line">url&#x3D;&quot;https:&#x2F;&#x2F;view.inews.qq.com&#x2F;g2&#x2F;getOnsInfo?name&#x3D;disease_other&quot;</span><br><span class="line">#使用requests请求</span><br><span class="line">res&#x3D;requests.get(url)</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure><p><img src="%E5%AE%9E%E6%88%9827.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line">d&#x3D;json.loads(res.text)#和上次一样先将json格式转字典</span><br><span class="line"># print(d)</span><br><span class="line"></span><br><span class="line">print(type(d[&quot;data&quot;]))#查看key为data的数据还是&lt;class &#39;str&#39;&gt;</span><br><span class="line"></span><br><span class="line">data_history&#x3D;json.loads(d[&quot;data&quot;])#str&gt;&gt;dict</span><br><span class="line">print(type(data_history))#返回&lt;class &#39;dict&#39;&gt;</span><br></pre></td></tr></table></figure><p><img src="%E5%AE%9E%E6%88%9828.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data_history.keys()#查看keys们都有谁</span><br></pre></td></tr></table></figure><p><img src="%E5%AE%9E%E6%88%9829.png">可以看到出现了我们想要的chinaDayList</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">import time </span><br><span class="line">import json</span><br><span class="line">import traceback  #追踪异常</span><br><span class="line">import requests</span><br><span class="line">#导包不用变还是那几个包包</span><br><span class="line">def get_tencent_data(): </span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    :return: 返回历史数据和当日详细数据</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    url &#x3D; &#39;https:&#x2F;&#x2F;view.inews.qq.com&#x2F;g2&#x2F;getOnsInfo?name&#x3D;disease_h5&#39;</span><br><span class="line">    url_his&#x3D;&#39;https:&#x2F;&#x2F;view.inews.qq.com&#x2F;g2&#x2F;getOnsInfo?name&#x3D;disease_other&#39;#加上这个history大兄弟++++++++</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    headers &#x3D; &#123;</span><br><span class="line">        &#39;user-agent&#39;: &#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;79.0.3945.88 Safari&#x2F;537.36&#39;,</span><br><span class="line">    &#125;</span><br><span class="line">    r &#x3D; requests.get(url, headers)</span><br><span class="line">    res &#x3D; json.loads(r.text)  # json字符串转字典</span><br><span class="line">    data_all &#x3D; json.loads(res[&#39;data&#39;])</span><br><span class="line">    </span><br><span class="line">    #再加上history的配套东东++++++++</span><br><span class="line">    r_his&#x3D;requests.get(url_his,headers)</span><br><span class="line">    res_his&#x3D;json.loads(r_his.text)</span><br><span class="line">    data_his&#x3D;json.loads(res_his[&#39;data&#39;])</span><br><span class="line"></span><br><span class="line">    history &#x3D; &#123;&#125;  # 历史数据</span><br><span class="line">#     for i in data_all[&quot;chinaDayList&quot;]:</span><br><span class="line">#         ds &#x3D; &quot;2020.&quot; + i[&quot;date&quot;]</span><br><span class="line">#         tup &#x3D; time.strptime(ds, &quot;%Y.%m.%d&quot;)</span><br><span class="line">#         ds &#x3D; time.strftime(&quot;%Y-%m-%d&quot;, tup)  # 改变时间格式,不然插入数据库会报错，数据库是datetime类型</span><br><span class="line">#         confirm &#x3D; i[&quot;confirm&quot;]</span><br><span class="line">#         suspect &#x3D; i[&quot;suspect&quot;]</span><br><span class="line">#         heal &#x3D; i[&quot;heal&quot;]</span><br><span class="line">#         dead &#x3D; i[&quot;dead&quot;]</span><br><span class="line">#         history[ds] &#x3D; &#123;&quot;confirm&quot;: confirm, &quot;suspect&quot;: suspect, &quot;heal&quot;: heal, &quot;dead&quot;: dead&#125;</span><br><span class="line">#     for i in data_all[&quot;chinaDayAddList&quot;]:</span><br><span class="line">#         ds &#x3D; &quot;2020.&quot; + i[&quot;date&quot;]</span><br><span class="line">#         tup &#x3D; time.strptime(ds, &quot;%Y.%m.%d&quot;)</span><br><span class="line">#         ds &#x3D; time.strftime(&quot;%Y-%m-%d&quot;, tup)</span><br><span class="line">#         confirm &#x3D; i[&quot;confirm&quot;]</span><br><span class="line">#         suspect &#x3D; i[&quot;suspect&quot;]</span><br><span class="line">#         heal &#x3D; i[&quot;heal&quot;]</span><br><span class="line">#         dead &#x3D; i[&quot;dead&quot;]</span><br><span class="line">#         history[ds].update(&#123;&quot;confirm_add&quot;: confirm, &quot;suspect_add&quot;: suspect, &quot;heal_add&quot;: heal, &quot;dead_add&quot;: dead&#125;)</span><br><span class="line"></span><br><span class="line">#通过上面的代码肯定不行了，里面只有当日详细数据，修改也很简单，改一下循环遍历的数据源即可：++++</span><br><span class="line">    for i in data_his[&quot;chinaDayList&quot;]:</span><br><span class="line">        ds &#x3D; &quot;2020.&quot; + i[&quot;date&quot;]</span><br><span class="line">        tup &#x3D; time.strptime(ds, &quot;%Y.%m.%d&quot;)</span><br><span class="line">        ds &#x3D; time.strftime(&quot;%Y-%m-%d&quot;, tup)  # 改变时间格式,不然插入数据库会报错，数据库是datetime类型</span><br><span class="line">        confirm &#x3D; i[&quot;confirm&quot;]</span><br><span class="line">        suspect &#x3D; i[&quot;suspect&quot;]</span><br><span class="line">        heal &#x3D; i[&quot;heal&quot;]</span><br><span class="line">        dead &#x3D; i[&quot;dead&quot;]</span><br><span class="line">        history[ds] &#x3D; &#123;&quot;confirm&quot;: confirm, &quot;suspect&quot;: suspect, &quot;heal&quot;: heal, &quot;dead&quot;: dead&#125;</span><br><span class="line">    for i in data_his[&quot;chinaDayAddList&quot;]:</span><br><span class="line">        ds &#x3D; &quot;2020.&quot; + i[&quot;date&quot;]</span><br><span class="line">        tup &#x3D; time.strptime(ds, &quot;%Y.%m.%d&quot;)</span><br><span class="line">        ds &#x3D; time.strftime(&quot;%Y-%m-%d&quot;, tup)</span><br><span class="line">        confirm &#x3D; i[&quot;confirm&quot;]</span><br><span class="line">        suspect &#x3D; i[&quot;suspect&quot;]</span><br><span class="line">        heal &#x3D; i[&quot;heal&quot;]</span><br><span class="line">        dead &#x3D; i[&quot;dead&quot;]</span><br><span class="line">        history[ds].update(&#123;&quot;confirm_add&quot;: confirm, &quot;suspect_add&quot;: suspect, &quot;heal_add&quot;: heal, &quot;dead_add&quot;: dead&#125;)</span><br><span class="line">        </span><br><span class="line">#下面就不用动了</span><br><span class="line">    details &#x3D; []  # 当日详细数据</span><br><span class="line">    update_time &#x3D; data_all[&quot;lastUpdateTime&quot;]</span><br><span class="line">    data_country &#x3D; data_all[&quot;areaTree&quot;]  # list 25个国家</span><br><span class="line">    data_province &#x3D; data_country[0][&quot;children&quot;]  # 中国各省</span><br><span class="line">    for pro_infos in data_province:</span><br><span class="line">        province &#x3D; pro_infos[&quot;name&quot;]  # 省名</span><br><span class="line">        for city_infos in pro_infos[&quot;children&quot;]:</span><br><span class="line">            city &#x3D; city_infos[&quot;name&quot;]</span><br><span class="line">            confirm &#x3D; city_infos[&quot;total&quot;][&quot;confirm&quot;]</span><br><span class="line">            confirm_add &#x3D; city_infos[&quot;today&quot;][&quot;confirm&quot;]</span><br><span class="line">            heal &#x3D; city_infos[&quot;total&quot;][&quot;heal&quot;]</span><br><span class="line">            dead &#x3D; city_infos[&quot;total&quot;][&quot;dead&quot;]</span><br><span class="line">            details.append([update_time, province, city, confirm, confirm_add, heal, dead])</span><br><span class="line">    return history, details</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">def get_conn():</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    :return: 连接，游标</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    # 创建连接</span><br><span class="line">    conn &#x3D; pymysql.connect(host&#x3D;&quot;127.0.0.1&quot;,</span><br><span class="line">                           user&#x3D;&quot;root&quot;,</span><br><span class="line">                           password&#x3D;&quot;123456&quot;,</span><br><span class="line">                           db&#x3D;&quot;cov&quot;,</span><br><span class="line">                           charset&#x3D;&quot;utf8&quot;)</span><br><span class="line">    # 创建游标</span><br><span class="line">    cursor &#x3D; conn.cursor()  # 执行完毕返回的结果集默认以元组显示</span><br><span class="line">    return conn, cursor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def close_conn(conn, cursor):</span><br><span class="line">    if cursor:</span><br><span class="line">        cursor.close()</span><br><span class="line">    if conn:</span><br><span class="line">        conn.close()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">def update_details():</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    更新 details 表</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    cursor &#x3D; None</span><br><span class="line">    conn &#x3D; None</span><br><span class="line">    try:</span><br><span class="line">        li &#x3D; get_tencent_data()[1]  #  0 是历史数据字典,1 最新详细数据列表</span><br><span class="line">        conn, cursor &#x3D; get_conn()</span><br><span class="line">        sql &#x3D; &quot;insert into details(update_time,province,city,confirm,confirm_add,heal,dead) values(%s,%s,%s,%s,%s,%s,%s)&quot;</span><br><span class="line">        sql_query &#x3D; &#39;select %s&#x3D;(select update_time from details order by id desc limit 1)&#39; #对比当前最大时间戳</span><br><span class="line">        cursor.execute(sql_query,li[0][0])</span><br><span class="line">        if not cursor.fetchone()[0]:</span><br><span class="line">            print(f&quot;&#123;time.asctime()&#125;开始更新最新数据&quot;)</span><br><span class="line">            for item in li:</span><br><span class="line">                cursor.execute(sql, item)</span><br><span class="line">            conn.commit()  # 提交事务 update delete insert操作</span><br><span class="line">            print(f&quot;&#123;time.asctime()&#125;更新最新数据完毕&quot;)</span><br><span class="line">        else:</span><br><span class="line">            print(f&quot;&#123;time.asctime()&#125;已是最新数据！&quot;)</span><br><span class="line">    except:</span><br><span class="line">        traceback.print_exc()</span><br><span class="line">    finally:</span><br><span class="line">        close_conn(conn, cursor)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">def insert_history():</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">        插入历史数据</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    cursor &#x3D; None</span><br><span class="line">    conn &#x3D; None</span><br><span class="line">    try:</span><br><span class="line">        dic &#x3D; get_tencent_data()[0]  # 0 是历史数据字典,1 最新详细数据列表</span><br><span class="line">        print(f&quot;&#123;time.asctime()&#125;开始插入历史数据&quot;)</span><br><span class="line">        conn, cursor &#x3D; get_conn()</span><br><span class="line">        sql &#x3D; &quot;insert into history values(%s,%s,%s,%s,%s,%s,%s,%s,%s)&quot;</span><br><span class="line">        for k, v in dic.items():</span><br><span class="line">            # item 格式 &#123;&#39;2020-01-13&#39;: &#123;&#39;confirm&#39;: 41, &#39;suspect&#39;: 0, &#39;heal&#39;: 0, &#39;dead&#39;: 1&#125;</span><br><span class="line">            cursor.execute(sql, [k, v.get(&quot;confirm&quot;), v.get(&quot;confirm_add&quot;), v.get(&quot;suspect&quot;),</span><br><span class="line">                                 v.get(&quot;suspect_add&quot;), v.get(&quot;heal&quot;), v.get(&quot;heal_add&quot;),</span><br><span class="line">                                 v.get(&quot;dead&quot;), v.get(&quot;dead_add&quot;)])</span><br><span class="line"></span><br><span class="line">        conn.commit()  # 提交事务 update delete insert操作</span><br><span class="line">        print(f&quot;&#123;time.asctime()&#125;插入历史数据完毕&quot;)</span><br><span class="line">    except:</span><br><span class="line">        traceback.print_exc()</span><br><span class="line">    finally:</span><br><span class="line">        close_conn(conn, cursor)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">def update_history():</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    更新历史数据</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    cursor &#x3D; None</span><br><span class="line">    conn &#x3D; None</span><br><span class="line">    try:</span><br><span class="line">        dic &#x3D; get_tencent_data()[0]  #  0 是历史数据字典,1 最新详细数据列表</span><br><span class="line">        print(f&quot;&#123;time.asctime()&#125;开始更新历史数据&quot;)</span><br><span class="line">        conn, cursor &#x3D; get_conn()</span><br><span class="line">        sql &#x3D; &quot;insert into history values(%s,%s,%s,%s,%s,%s,%s,%s,%s)&quot;</span><br><span class="line">        sql_query &#x3D; &quot;select confirm from history where ds&#x3D;%s&quot;</span><br><span class="line">        for k, v in dic.items():</span><br><span class="line">            # item 格式 &#123;&#39;2020-01-13&#39;: &#123;&#39;confirm&#39;: 41, &#39;suspect&#39;: 0, &#39;heal&#39;: 0, &#39;dead&#39;: 1&#125;</span><br><span class="line">            if not cursor.execute(sql_query, k):</span><br><span class="line">                cursor.execute(sql, [k, v.get(&quot;confirm&quot;), v.get(&quot;confirm_add&quot;), v.get(&quot;suspect&quot;),</span><br><span class="line">                                     v.get(&quot;suspect_add&quot;), v.get(&quot;heal&quot;), v.get(&quot;heal_add&quot;),</span><br><span class="line">                                     v.get(&quot;dead&quot;), v.get(&quot;dead_add&quot;)])</span><br><span class="line">        conn.commit()  # 提交事务 update delete insert操作</span><br><span class="line">        print(f&quot;&#123;time.asctime()&#125;历史数据更新完毕&quot;)</span><br><span class="line">    except:</span><br><span class="line">        traceback.print_exc()</span><br><span class="line">    finally:</span><br><span class="line">        close_conn(conn, cursor)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#插入历史数据</span><br><span class="line">insert_history()</span><br><span class="line">#更新详细数据</span><br><span class="line">update_details()</span><br></pre></td></tr></table></figure><p>最后显示<img src="%E5%AE%9E%E6%88%9830.png"><img src="%E5%AE%9E%E6%88%9853.png"><br>则表示插入数据成功<br>可以打开数据库查看一下<br><img src="%E5%AE%9E%E6%88%9831.png"></p><h3 id="7、爬取百度热搜数据-暂时不用"><a href="#7、爬取百度热搜数据-暂时不用" class="headerlink" title="7、爬取百度热搜数据(暂时不用)"></a>7、爬取百度热搜数据(暂时不用)</h3><p>百度的数据页面使用了动态渲染技术，我们可以用 selenium 来爬取</p><ul><li>selenium 是一个用于 web 应用程序测试的工具,直接运行在浏览器中，就像真正的用 户在操作一样</li><li>安装：pip install selenium</li><li>安装浏览器（Firefox、Google等）</li><li>下载对应版本浏览器驱动：<a href="http://npm.taobao.org/mirrors/chromedriver/">http://npm.taobao.org/mirrors/chromedriver/</a><br>创建浏览器对象<br>浏览器.get()<br>浏览器.find()  </li><li>版本查看方法：例：Google的是 设置&gt;&gt;关于Chrome</li><li>找到对应版本下载解压到之前创建的note文件夹</li></ul><h1 id="3、web项目"><a href="#3、web项目" class="headerlink" title="3、web项目"></a>3、web项目</h1><h2 id="1、flask快速入门"><a href="#1、flask快速入门" class="headerlink" title="1、flask快速入门"></a>1、flask快速入门</h2><h3 id="1、flask介绍"><a href="#1、flask介绍" class="headerlink" title="1、flask介绍"></a>1、flask介绍</h3><ul><li>Flask 是一个使用 Python 编写的轻量级 Web 应用框架。其 WSGI（Python Web Server Gateway Interface） 工具包采用 Werkzeug ，模板引擎则使 用 Jinja2 ，是目前十分流行的 web 框架。</li><li>安装：pip install flask  </li></ul><h3 id="2、创建flask项目"><a href="#2、创建flask项目" class="headerlink" title="2、创建flask项目"></a>2、创建flask项目</h3><p><img src="%E5%AE%9E%E6%88%9832.png"><br><img src="%E5%AE%9E%E6%88%9833.png"><br>创建完毕后，点击运行app，然后访问<a href="http://127.0.0.1:5000/">http://127.0.0.1:5000/</a> 即可看到helloworld<br><img src="%E5%AE%9E%E6%88%9835.jpg"><br><img src="%E5%AE%9E%E6%88%9834.jpg"></p><h3 id="3、创建新路由并出现登录框"><a href="#3、创建新路由并出现登录框" class="headerlink" title="3、创建新路由并出现登录框"></a>3、创建新路由并出现登录框</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line"></span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;abc&#39;)</span><br><span class="line">def hello_world1():</span><br><span class="line">    return &quot;&quot;&quot;</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">        账号：&lt;input&gt;&lt;br&gt;</span><br><span class="line">        密码：&lt;input&gt;&lt;br&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>刷新运行，然后访问<a href="http://127.0.0.1:5000/abc">http://127.0.0.1:5000/abc</a>即可看到登录框<br><img src="%E5%AE%9E%E6%88%9836.png"></p><h3 id="4、flask使用request获取参数"><a href="#4、flask使用request获取参数" class="headerlink" title="4、flask使用request获取参数"></a>4、flask使用request获取参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">from flask import request</span><br><span class="line">app &#x3D; Flask(__name__)#flask实例</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;&#39;)</span><br><span class="line">def hello_world():</span><br><span class="line">    return &#39;Hello World!&#39;</span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;abc&#39;)</span><br><span class="line">def hello_world1():</span><br><span class="line">    id &#x3D; request.values.get(&quot;id&quot;)</span><br><span class="line">    return f&quot;&quot;&quot;</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">        账号：&lt;input value&#x3D;&quot;&#123;id&#125;&quot;&gt;&lt;br&gt; </span><br><span class="line">        密码：&lt;input&gt;&lt;br&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p><img src="%E5%AE%9E%E6%88%9837.jpg"></p><ul><li>当没有输入id时显示None，这时可以输入?=的方式传参<br><img src="%E5%AE%9E%E6%88%9838.jpg"></li></ul><h3 id="5、网页传参到后台"><a href="#5、网页传参到后台" class="headerlink" title="5、网页传参到后台"></a>5、网页传参到后台</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">from flask import request</span><br><span class="line"></span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;&#39;)</span><br><span class="line">def hello_world():</span><br><span class="line">    return &#39;Hello World!&#39;</span><br><span class="line"></span><br><span class="line">@app.route(&quot;&#x2F;abc&quot;)</span><br><span class="line">def helloworld1():</span><br><span class="line">    id&#x3D;request.values.get(&quot;id&quot;)</span><br><span class="line">    return f&quot;&quot;&quot;</span><br><span class="line">    &lt;form action&#x3D;&quot;&#x2F;login&quot;&gt;</span><br><span class="line">        账号：&lt;input name&#x3D;&quot;name&quot; value&#x3D;&quot;&#123;id&#125;&quot;&gt;&lt;br&gt;</span><br><span class="line">        密码：&lt;input name&#x3D;&quot;pwd&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;submit&quot;&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">@app.route(&quot;&#x2F;login&quot;)</span><br><span class="line">def helloworld2():</span><br><span class="line">    name&#x3D;request.values.get(&quot;name&quot;)</span><br><span class="line">    pwd&#x3D;request.values.get(&quot;pwd&quot;)</span><br><span class="line">    return f&#39;name&#x3D;&#123;name&#125;,pwd&#x3D;&#123;pwd&#125;&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p><img src="%E5%AE%9E%E6%88%9839.jpg">提交<br><img src="%E5%AE%9E%E6%88%9840.jpg"><br><img src="%E5%AE%9E%E6%88%9841.jpg"></p><h3 id="6、返回index-html页面"><a href="#6、返回index-html页面" class="headerlink" title="6、返回index.html页面"></a>6、返回index.html页面</h3><ul><li>模板就是预先写好的index.html页面，里面可以使用特殊语法引入变量</li><li>使用render_template返回index.html模板页面 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">from flask import request</span><br><span class="line">from flask import render_template</span><br><span class="line"></span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;&#39;)</span><br><span class="line">def hello_world():</span><br><span class="line">    return &#39;Hello World!&#39;</span><br><span class="line"></span><br><span class="line">@app.route(&quot;&#x2F;abc&quot;)</span><br><span class="line">def helloworld1():</span><br><span class="line">    id&#x3D;request.values.get(&quot;id&quot;)</span><br><span class="line">    return f&quot;&quot;&quot;</span><br><span class="line">    &lt;form action&#x3D;&quot;&#x2F;login&quot;&gt;</span><br><span class="line">        账号：&lt;input name&#x3D;&quot;name&quot; value&#x3D;&quot;&#123;id&#125;&quot;&gt;&lt;br&gt;</span><br><span class="line">        密码：&lt;input name&#x3D;&quot;pwd&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;submit&quot;&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">@app.route(&quot;&#x2F;login&quot;)</span><br><span class="line">def helloworld2():</span><br><span class="line">    name&#x3D;request.values.get(&quot;name&quot;)</span><br><span class="line">    pwd&#x3D;request.values.get(&quot;pwd&quot;)</span><br><span class="line">    return f&#39;name&#x3D;&#123;name&#125;,pwd&#x3D;&#123;pwd&#125;&#39;</span><br><span class="line"></span><br><span class="line">@app.route(&quot;&#x2F;tem&quot;)</span><br><span class="line">def helloworld3():</span><br><span class="line">    #该HTML文件是在templates文件夹中创建的，body里只有一行“demodemodemo”</span><br><span class="line">    return render_template(&quot;index.html&quot;)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><img src="%E5%AE%9E%E6%88%9842.jpg"><br>可以看到，通过访问/tem可以返回到index.html页面</li></ul><h2 id="2、使用Ajax局部页面刷新"><a href="#2、使用Ajax局部页面刷新" class="headerlink" title="2、使用Ajax局部页面刷新"></a>2、使用Ajax局部页面刷新</h2><ul><li><p>Ajax 是 Asynchronous JavaScript and XML 的简称，通过 Ajax 向服务 器发送请求，接收服务器返回的 json 数据，然后使用 JavaScript 修改网 页的来实现页面局部数据更新</p></li><li><p>使用 jquery 框架可方便的编写 ajax 代码，需要 jquery.js 文件<br><img src="%E5%AE%9E%E6%88%9843.png"><br>前台index.html调用ajax</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;mypage&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;..&#x2F;static&#x2F;js&#x2F;jquery.js&quot;&gt;&lt;&#x2F;script&gt;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;疫情追踪&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;h3&gt;实时报道&lt;&#x2F;h3&gt;</span><br><span class="line">&lt;button&gt;点我&lt;&#x2F;button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(&quot;button&quot;).click(function()&#123;&#x2F;&#x2F;点击按钮发送ajax请求</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:&quot;&#x2F;ajax&quot;,&#x2F;&#x2F;目标地址</span><br><span class="line">            type:&quot;post&quot;,&#x2F;&#x2F;请求方式</span><br><span class="line">            data:&#123;&quot;name&quot;:&quot;李四&quot;,&quot;score&quot;:&quot;99&quot;&#125;,</span><br><span class="line">            success:function (d) &#123;&#x2F;&#x2F;成功回调</span><br><span class="line">               $(&quot;h1&quot;).html(&quot;武汉感染人数：&quot;+d) &#x2F;&#x2F;用武汉感染人数：+d替换掉h1中内容</span><br><span class="line">            &#125;,</span><br><span class="line">            error:function () &#123;&#x2F;&#x2F;失败之后的提示</span><br><span class="line">                alert(&quot;发送ajax请求失败&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>后台app.py,函数名不能重复，新增函数hello world4</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">from flask import request</span><br><span class="line">from flask import render_template</span><br><span class="line"></span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;&#39;)</span><br><span class="line">def hello_world():</span><br><span class="line">    return &#39;Hello World!&#39;</span><br><span class="line"></span><br><span class="line">@app.route(&quot;&#x2F;abc&quot;)</span><br><span class="line">def helloworld1():</span><br><span class="line">    id&#x3D;request.values.get(&quot;id&quot;)</span><br><span class="line">    return f&quot;&quot;&quot;</span><br><span class="line">    &lt;form action&#x3D;&quot;&#x2F;login&quot;&gt;</span><br><span class="line">        账号：&lt;input name&#x3D;&quot;name&quot; value&#x3D;&quot;&#123;id&#125;&quot;&gt;&lt;br&gt;</span><br><span class="line">        密码：&lt;input name&#x3D;&quot;pwd&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;submit&quot;&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">@app.route(&quot;&#x2F;login&quot;)</span><br><span class="line">def helloworld2():</span><br><span class="line">    name&#x3D;request.values.get(&quot;name&quot;)</span><br><span class="line">    pwd&#x3D;request.values.get(&quot;pwd&quot;)</span><br><span class="line">    return f&#39;name&#x3D;&#123;name&#125;,pwd&#x3D;&#123;pwd&#125;&#39;</span><br><span class="line"></span><br><span class="line">@app.route(&quot;&#x2F;tem&quot;)</span><br><span class="line">def helloworld3():</span><br><span class="line">    #该HTML文件是在templates文件夹中创建的，body里只有一行“demodemodemo”</span><br><span class="line">    return render_template(&quot;index.html&quot;)</span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;ajax&#39;,methods&#x3D;[&quot;get&quot;,&quot;post&quot;])#默认只支持get请求，所以要加上post</span><br><span class="line">def helloworld4():</span><br><span class="line">    return &#39;10000&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></li><li><p>1、先访问<a href="http://127.0.0.1:5000/">http://127.0.0.1:5000/</a><br><img src="%E5%AE%9E%E6%88%9834.jpg">  </p></li><li><p>2、然后访问<a href="http://127.0.0.1:5000/tem">http://127.0.0.1:5000/tem</a><br><img src="%E5%AE%9E%E6%88%9844.png"></p></li><li><p>3、点击按钮<br><img src="%E5%AE%9E%E6%88%9845.jpg"><br>可以看到h1页面刷新，ajax请求成功</p></li><li><p>4、也可以打印name和score</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&#39;&#x2F;ajax&#39;,methods&#x3D;[&quot;get&quot;,&quot;post&quot;])#默认只支持get请求，所以要加上post</span><br><span class="line">def helloworld4():</span><br><span class="line">    name&#x3D;request.values.get(&quot;name&quot;)</span><br><span class="line">    score&#x3D;request.values.get(&quot;score&quot;)</span><br><span class="line">    print(f&quot;name:&#123;name&#125;,score:&#123;score&#125;&quot;)#在控制台打印获取的name和score</span><br><span class="line">    return &#39;10000&#39;</span><br></pre></td></tr></table></figure><p><img src="%E5%AE%9E%E6%88%9846.png">  </p></li></ul><h2 id="3、可视化大屏制作"><a href="#3、可视化大屏制作" class="headerlink" title="3、可视化大屏制作"></a>3、可视化大屏制作</h2><p><img src="%E5%AE%9E%E6%88%9848.png"></p><h3 id="1、使用绝对定位划分板块"><a href="#1、使用绝对定位划分板块" class="headerlink" title="1、使用绝对定位划分板块"></a>1、使用绝对定位划分板块</h3><p><img src="%E5%AE%9E%E6%88%9847.png"></p><h3 id="2、采用vscode编辑前端部分"><a href="#2、采用vscode编辑前端部分" class="headerlink" title="2、采用vscode编辑前端部分"></a>2、采用vscode编辑前端部分</h3><h4 id="1、新建main-html文件"><a href="#1、新建main-html文件" class="headerlink" title="1、新建main.html文件"></a>1、新建main.html文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;疫情监控&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div&gt;我是标题&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;我是左1&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;我是左2&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;我是中1&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;我是中2&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;我是右1&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;我是右2&lt;&#x2F;div&gt;           </span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p><img src="%E5%AE%9E%E6%88%9849.jpg"></p><h4 id="2、引入css样式"><a href="#2、引入css样式" class="headerlink" title="2、引入css样式"></a>2、引入css样式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;疫情监控&lt;&#x2F;title&gt;</span><br><span class="line">        &lt;link href&#x3D;&quot;..&#x2F;static&#x2F;css&#x2F;main.css&quot; rel&#x3D;&quot;stylesheet&quot;&#x2F;&gt; &lt;!--一定要指明类型是什么,rel&#x3D;--&gt;</span><br><span class="line">        &lt;style&gt;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;style&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div&gt;我是标题&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;我是左1&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;我是左2&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;我是中1&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;我是中2&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;我是右1&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;我是右2&lt;&#x2F;div&gt;           </span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h4 id="3、编写样式"><a href="#3、编写样式" class="headerlink" title="3、编写样式"></a>3、编写样式</h4><ul><li>标题绝对布局<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#title&#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    width: 40%;</span><br><span class="line">    height: 10%;</span><br><span class="line">    top:0;</span><br><span class="line">    left: 30%;</span><br><span class="line">    background: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>边框绝对布局<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">#center1&#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    width: 40%;</span><br><span class="line">    height: 30%;</span><br><span class="line">    top: 10%;</span><br><span class="line">    left: 30%;</span><br><span class="line">    background: orange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#center2&#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    width: 40%;</span><br><span class="line">    height: 60%;</span><br><span class="line">    top: 40%;</span><br><span class="line">    left: 30%;</span><br><span class="line">    background:blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#left1&#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    width: 30%;</span><br><span class="line">    height: 45%;</span><br><span class="line">    top:10%;</span><br><span class="line">    left: 0;</span><br><span class="line">    background: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#left2&#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    width: 30%;</span><br><span class="line">    height: 45%;</span><br><span class="line">    top: 55%;</span><br><span class="line">    left: 0;</span><br><span class="line">    background: yellow;</span><br><span class="line">&#125;</span><br><span class="line">#right1&#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    width: 30%;</span><br><span class="line">    height: 45%;</span><br><span class="line">    top:10%;</span><br><span class="line">    right: 0%;</span><br><span class="line">    background: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#right2&#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    width: 30%;</span><br><span class="line">    height: 45%;</span><br><span class="line">    top:55%;</span><br><span class="line">    right: 0;</span><br><span class="line">    background: rgb(125, 14, 236);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="%E5%AE%9E%E6%88%9850.png"></li></ul><h4 id="4、统计数字及时间"><a href="#4、统计数字及时间" class="headerlink" title="4、统计数字及时间"></a>4、统计数字及时间</h4><ul><li><p>统计数字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">.num&#123;</span><br><span class="line">    width: 25%;</span><br><span class="line">    float: left;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    color: gold;</span><br><span class="line">    font-size: 30px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.txt&#123;</span><br><span class="line">    width: 25%;</span><br><span class="line">    float: left;</span><br><span class="line">    font-family:  &quot;幼圆&quot;;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.txt h2&#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="%E5%AE%9E%E6%88%9851.png"></p></li><li><p>调用ajax请求，更改时间   </p></li></ul><p>前台main.html  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    function gettime()&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:&quot;&#x2F;time&quot;,</span><br><span class="line">            timeout:10000,&#x2F;&#x2F;超时延时时间设置为10s</span><br><span class="line">            success:function(data)&#123;</span><br><span class="line">                $(&quot;#time&quot;).html(data)</span><br><span class="line">            &#125;,</span><br><span class="line">            error:function(xhr,type,errorThrown)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;        </span><br><span class="line">&lt;&#x2F;script&gt; </span><br><span class="line">setInterval(gettime,1000)&#x2F;&#x2F;1s执行一次gettime</span><br></pre></td></tr></table></figure><p>后台app.py  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import utils</span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;&#39;)</span><br><span class="line">def hello_world():</span><br><span class="line">    return render_template(&quot;main.html&quot;)</span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;time&#39;)</span><br><span class="line">def get_time():</span><br><span class="line"></span><br><span class="line">    return utils.get_time()</span><br></pre></td></tr></table></figure><p>新建utils.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def get_time():</span><br><span class="line">    time_str &#x3D; time.strftime(&quot;%Y&#123;&#125;%m&#123;&#125;%d&#123;&#125;%X&quot;)</span><br><span class="line">    return time_str.format(&quot;年&quot;,&quot;月&quot;,&quot;日&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__&#x3D;&#x3D;&quot;__main__&quot;:</span><br><span class="line">    print(get_time())</span><br></pre></td></tr></table></figure><p><img src="%E5%AE%9E%E6%88%9852.png"></p><h4 id="5、-与数据库交互"><a href="#5、-与数据库交互" class="headerlink" title="5、 与数据库交互"></a>5、 与数据库交互</h4><ul><li>utils.py<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line">def get_time():</span><br><span class="line">    time_str &#x3D;  time.strftime(&quot;%Y&#123;&#125;%m&#123;&#125;%d&#123;&#125;%X&quot;)</span><br><span class="line">    return time_str.format(&quot;年&quot;,&quot;月&quot;,&quot;日&quot;)</span><br><span class="line"></span><br><span class="line">def get_conn():</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    :return: 连接，游标</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    # 创建连接</span><br><span class="line">    conn &#x3D; pymysql.connect(host&#x3D;&quot;192.168.1.10&quot;,</span><br><span class="line">                           user&#x3D;&quot;root&quot;,</span><br><span class="line">                           password&#x3D;&quot;123456&quot;,</span><br><span class="line">                           db&#x3D;&quot;cov&quot;,</span><br><span class="line">                           charset&#x3D;&quot;utf8&quot;)</span><br><span class="line">    # 创建游标</span><br><span class="line">    cursor &#x3D; conn.cursor()  # 执行完毕返回的结果集默认以元组显示</span><br><span class="line">    return conn, cursor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def close_conn(conn, cursor):</span><br><span class="line">    if cursor:</span><br><span class="line">        cursor.close()</span><br><span class="line">    if conn:</span><br><span class="line">        conn.close()</span><br><span class="line"></span><br><span class="line">#封装通用查询数据库的方法</span><br><span class="line">def query(sql,*args):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    封装通用查询</span><br><span class="line">    :param sql:</span><br><span class="line">    :param args:</span><br><span class="line">    :return: 返回查询到的结果，((),(),)的形式</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    conn, cursor&#x3D;get_conn()</span><br><span class="line">    cursor.execute(sql,args)</span><br><span class="line">    res &#x3D; cursor.fetchall()</span><br><span class="line">    close_conn(conn,cursor)</span><br><span class="line">    return res</span><br><span class="line"></span><br><span class="line">#获取关键信息,疑似从历史中去取，别的从更新表中去取</span><br><span class="line">def get_center1_data():</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    :return:返回大屏 div id&#x3D;center1的数据</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    #因为会更新多次数据，取时间戳最新的那组数据</span><br><span class="line">    sql &#x3D; &quot;select sum(confirm),&quot; \</span><br><span class="line">          &quot;(select suspect from history order by ds desc limit 1)&quot; \</span><br><span class="line">          &quot;sum(hea1),&quot; \</span><br><span class="line">          &quot;sum(dead)&quot; \</span><br><span class="line">          &quot;from details &quot; \</span><br><span class="line">          &quot;where update_time&#x3D;(select updata_time from details order by update_time desc limit 1) &quot;</span><br><span class="line">    res &#x3D; query(sql)</span><br><span class="line">    return res[0]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__&#x3D;&#x3D;&quot;__main__&quot;:</span><br><span class="line">    print(get_time())#将get_time 改为print(get_center1_data())验证一下是否成功</span><br></pre></td></tr></table></figure><img src="%E5%AE%9E%E6%88%9854.png"></li><li>app.py定义一个新函数，新路由center1，并将字典转化为json字符串返回<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from flask import jsonify</span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;center1&#39;)</span><br><span class="line">def get_center1_data():</span><br><span class="line">    data &#x3D; utils.get_center1_data()</span><br><span class="line">    return jsonify(&#123;&quot;confirm&quot;:data[0],&quot;suspect&quot;:data[1],&quot;heal&quot;:data[2],&quot;dead&quot;:data[3]&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>main.html 发起ajax请求<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function get_center1_data()&#123;</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                url:&quot;&#x2F;center1&quot;,</span><br><span class="line">                success:function(data)&#123;</span><br><span class="line">                    $(&quot;.num h1&quot;).eq(0).text(data.confirm)</span><br><span class="line">                    $(&quot;.num h1&quot;).eq(1).text(data.suspect)</span><br><span class="line">                    $(&quot;.num h1&quot;).eq(2).text(data.heal)</span><br><span class="line">                    $(&quot;.num h1&quot;).eq(3).text(data.dead)</span><br><span class="line">                &#125;,</span><br><span class="line">                error:function(xhr,type,errorThrown)&#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        setInterval(gettime,1000)&#x2F;&#x2F;1s执行一次gettime</span><br><span class="line">        setInterval(get_center1_data,1000)&#x2F;&#x2F;1s执行一次</span><br></pre></td></tr></table></figure>运行app.py后发现报错：Object of type ‘Decimal’ is not JSON serializable<br><a href="https://www.jianshu.com/p/aa59ee8f8009">flask完美解决Object of type ‘Decimal’ is not JSON serializable</a><br>pip install simplejson<br><img src="%E5%AE%9E%E6%88%9855.png">调用mysql成功</li></ul><h3 id="3、echarts快速入门"><a href="#3、echarts快速入门" class="headerlink" title="3、echarts快速入门"></a>3、echarts快速入门</h3><h4 id="1、echarts全国疫情地图实现"><a href="#1、echarts全国疫情地图实现" class="headerlink" title="1、echarts全国疫情地图实现"></a>1、echarts全国疫情地图实现</h4><ul><li>复制中国地图 option，导入 china.js</li><li>获取数据<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def get_c2_data():</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    :return:  返回各省数据</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    # 因为会更新多次数据，取时间戳最新的那组数据</span><br><span class="line">    sql &#x3D; &quot;select province,sum(confirm) from details &quot; \</span><br><span class="line">          &quot;where update_time&#x3D;(select update_time from details &quot; \</span><br><span class="line">          &quot;order by update_time desc limit 1) &quot; \</span><br><span class="line">          &quot;group by province&quot;</span><br><span class="line">    res &#x3D; query(sql)</span><br><span class="line">    return res</span><br></pre></td></tr></table></figure><h4 id="2、获取疫情地图数据"><a href="#2、获取疫情地图数据" class="headerlink" title="2、获取疫情地图数据"></a>2、获取疫情地图数据</h4>创建controller.js文件返回疫情数据<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function get_center2_data() &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url:&quot;&#x2F;center2&quot;,</span><br><span class="line">        success: function(data) &#123;</span><br><span class="line">ec_center_option.series[0].data&#x3D;data.data</span><br><span class="line">            ec_center.setOption(ec_center_option)</span><br><span class="line">&#125;,</span><br><span class="line">error: function(xhr, type, errorThrown) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、app-py文件创建路由"><a href="#3、app-py文件创建路由" class="headerlink" title="3、app.py文件创建路由"></a>3、app.py文件创建路由</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&#39;&#x2F;center2&#39;)</span><br><span class="line">def get_center2_data():</span><br><span class="line">    res &#x3D; []</span><br><span class="line">    for tup in utils.get_center2_data():</span><br><span class="line">        print(tup)</span><br><span class="line">        res.append(&#123;&quot;name&quot;:tup[0],&quot;value&quot;:int(tup[1])&#125;)</span><br><span class="line">    return jsonify(&#123;&quot;data&quot;:res&#125;)</span><br></pre></td></tr></table></figure><h4 id="4、运行结果"><a href="#4、运行结果" class="headerlink" title="4、运行结果"></a>4、运行结果</h4><img src="%E5%AE%9E%E6%88%9856.png"></li></ul><h4 id="5、左1折线图（导入ec-left1-js）"><a href="#5、左1折线图（导入ec-left1-js）" class="headerlink" title="5、左1折线图（导入ec_left1.js）"></a>5、左1折线图（导入ec_left1.js）</h4><ul><li>utils.py<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def get_left1_data():</span><br><span class="line">    sql &#x3D; &quot;select ds,confirm,suspect,heal,dead from history&quot;</span><br><span class="line">    res &#x3D; query(sql)</span><br><span class="line">    return res</span><br></pre></td></tr></table></figure></li><li>app.py<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&quot;&#x2F;left1&quot;)</span><br><span class="line">def get_left1_data():</span><br><span class="line">    data &#x3D; utils.get_left1_data()</span><br><span class="line">    day,confirm,suspect,heal,dead &#x3D; [],[],[],[],[]</span><br><span class="line">    for a,b,c,d,e in data[7:]:#去掉前7天数据，因为不是每项都有</span><br><span class="line">        day.append(a.strftime(&quot;%m-%d&quot;)) #a是datatime类型</span><br><span class="line">        confirm.append(b)</span><br><span class="line">        suspect.append(c)</span><br><span class="line">        heal.append(d)</span><br><span class="line">        dead.append(e)</span><br><span class="line">    return jsonify(&#123;&quot;day&quot;:day,&quot;confirm&quot;: confirm, &quot;suspect&quot;: suspect, &quot;heal&quot;: heal, &quot;dead&quot;: dead&#125;)</span><br></pre></td></tr></table></figure><h4 id="6、左2折线图（导入ec-left2-js）"><a href="#6、左2折线图（导入ec-left2-js）" class="headerlink" title="6、左2折线图（导入ec_left2.js）"></a>6、左2折线图（导入ec_left2.js）</h4></li><li>utils.py<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def get_left2_data():</span><br><span class="line">    sql &#x3D; &quot;select ds,confirm_add,suspect_add from history&quot;</span><br><span class="line">    res &#x3D; query(sql)</span><br><span class="line">    return res</span><br></pre></td></tr></table></figure></li><li>app.py<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&quot;&#x2F;left2&quot;)</span><br><span class="line">def get_left2_data():</span><br><span class="line">    data &#x3D; utils.get_left2_data()</span><br><span class="line">    day, confirm_add, suspect_add &#x3D; [], [], []</span><br><span class="line">    for a, b, c in data[7:]:</span><br><span class="line">        day.append(a.strftime(&quot;%m-%d&quot;))  # a是datatime类型</span><br><span class="line">        confirm_add.append(b)</span><br><span class="line">        suspect_add.append(c)</span><br><span class="line">    return jsonify(&#123;&quot;day&quot;: day, &quot;confirm_add&quot;: confirm_add, &quot;suspect_add&quot;: suspect_add&#125;)</span><br></pre></td></tr></table></figure><h4 id="7、运行结果"><a href="#7、运行结果" class="headerlink" title="7、运行结果"></a>7、运行结果</h4><img src="%E5%AE%9E%E6%88%9857.png"></li></ul><h4 id="8、右1柱状图"><a href="#8、右1柱状图" class="headerlink" title="8、右1柱状图"></a>8、右1柱状图</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">def get_right1_data():</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    :return:  返回非湖北地区城市确诊人数前5名</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    sql &#x3D; &#39;SELECT city,confirm FROM &#39; \</span><br><span class="line">          &#39;(select city,confirm from details  &#39; \</span><br><span class="line">          &#39;where update_time&#x3D;(select update_time from details order by update_time desc limit 1) &#39; \</span><br><span class="line">          &#39;and province not in (&quot;湖北&quot;,&quot;北京&quot;,&quot;上海&quot;,&quot;天津&quot;,&quot;江苏&quot;) &#39; \</span><br><span class="line">          &#39;union all &#39; \</span><br><span class="line">          &#39;select province as city,sum(confirm) as confirm from details  &#39; \</span><br><span class="line">          &#39;where update_time&#x3D;(select update_time from details order by update_time desc limit 1) &#39; \</span><br><span class="line">          &#39;and province in (&quot;北京&quot;,&quot;上海&quot;,&quot;黑龙江&quot;,&quot;广东&quot;) group by province) as a &#39; \</span><br><span class="line">          &#39;ORDER BY confirm DESC LIMIT 5&#39;</span><br><span class="line">    res &#x3D; query(sql)</span><br><span class="line">    return res</span><br></pre></td></tr></table></figure><h4 id="9、运行结果"><a href="#9、运行结果" class="headerlink" title="9、运行结果"></a>9、运行结果</h4><p><img src="%E5%AE%9E%E6%88%9858.png"></p><h2 id="4、部署Flask项目"><a href="#4、部署Flask项目" class="headerlink" title="4、部署Flask项目"></a>4、部署Flask项目</h2><ul><li>将所有ec_left1.js, ec_left2.js, ec_right1.js, ec_right2.js文件中的data数据清空</li><li>将main.html中的数据123，时间清除</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1、项目介绍&quot;&gt;&lt;a href=&quot;#1、项目介绍&quot; class=&quot;headerlink&quot; title=&quot;1、项目介绍&quot;&gt;&lt;/a&gt;1、项目介绍&lt;/h1&gt;&lt;p&gt;基于Python+Flask+Echarts打造的疫情监控系统&lt;/p&gt;
&lt;h2 id=&quot;1、涉及技术&quot;&gt;&lt;a</summary>
      
    
    
    
    
    <category term="MySQL" scheme="https://182.92.7.32/tags/MySQL/"/>
    
    <category term="Linux" scheme="https://182.92.7.32/tags/Linux/"/>
    
    <category term="Python" scheme="https://182.92.7.32/tags/Python/"/>
    
    <category term="Echarts" scheme="https://182.92.7.32/tags/Echarts/"/>
    
  </entry>
  
  <entry>
    <title>Pytorch搭建yolo3目标检测平台</title>
    <link href="https://182.92.7.32/2021/02/05/Pytorch%E6%90%AD%E5%BB%BAyolo3%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E5%B9%B3%E5%8F%B0/Pytorch%E6%90%AD%E5%BB%BAyolo3%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E5%B9%B3%E5%8F%B0/"/>
    <id>https://182.92.7.32/2021/02/05/Pytorch%E6%90%AD%E5%BB%BAyolo3%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E5%B9%B3%E5%8F%B0/Pytorch%E6%90%AD%E5%BB%BAyolo3%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E5%B9%B3%E5%8F%B0/</id>
    <published>2021-02-05T13:17:43.000Z</published>
    <updated>2021-02-19T03:47:53.985Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、什么是yolo目标检测网络"><a href="#1、什么是yolo目标检测网络" class="headerlink" title="1、什么是yolo目标检测网络"></a>1、什么是yolo目标检测网络</h1><p>计算机通过这四个参数来确定猫的位置<br><img src="yolo1.png"><br>yolo3是如何确定这个图片的位置？<br><img src="yolo2.png"><br>当一张图片被传入到yolo3的网络中，首先被调整到416x416的大小，为了防止失真，会在图像的边缘加上灰条，之后yolo3会将这张图像分成13x13，26x26，52x52的网格，由于图像在多次卷积压缩后，小物体的特征容易消失，所以52x52的网格用于检测小物体，13x13用于检测大物体，由于猫是一个比较大的物体所以用13x13检测，每个网格点负责其右下角区域的检测，如果物体的中心点落在这个区域，这个物体的位置就由这个网格点来确定。<br><img src="yolo3.png"></p><h1 id="2、yolo3整体结构介绍"><a href="#2、yolo3整体结构介绍" class="headerlink" title="2、yolo3整体结构介绍"></a>2、yolo3整体结构介绍</h1><p>将图像分成很多点，每个点进行3个先验框的预测<br><img src="yolo4.jpg"><br>1、darknet53(特征提取网络)，其重要特点是使用了残差网络Residual(前面一个特征层可以不经过卷积直接映射到后面的特征层，有助于训练，有助于提取)，总共有23个残差结构块，darknet53中的残差卷积就是进行一次3X3、步长为2的卷积，然后保存该卷积layer，再进行一次1X1的卷积和一次3X3的卷积，并把这个结果加上layer作为最后的结果， 残差网络的特点是容易优化，并且能够通过增加相当的深度来提高准确率。其内部的残差块使用了跳跃连接，缓解了在深度神经网络中增加深度带来的梯度消失问题。<br>2、</p><ul><li>输入图像–卷积–残差网络特征提取</li><li>提取完之后，三个不同形状的特征层输出，分别是13x13x1024,26x26x512,52x52x256</li><li>然后利用3个特征层进行目标检测的预测 </li></ul><p>3、输出层的shape分别为(13,13,75)，(26,26,75)，(52,52,75)，最后一个维度为75是因为该图是基于voc数据集的，它的类为20种，yolo3只有针对每一个特征层存在3个先验框，所以最后维度为3x25；<br>如果使用的是coco训练集，类则为80种，最后的维度应该为255 = 3x85，三个特征层的shape为(13,13,255)，(26,26,255)，(52,52,255)</p><h2 id="1、对13x13特征层进行处理"><a href="#1、对13x13特征层进行处理" class="headerlink" title="1、对13x13特征层进行处理"></a>1、对13x13特征层进行处理</h2><p>进行5次卷积之后有两个输出，向上进行上采样和26x26特征层结合，再进行5次卷积，然后再进行3x3卷积和1x1卷积，向右先进行3x3卷积，再进行1x1的卷积，进行通道调整，调整完的结果就是一个特征层的预测结果，预测结果为13x13x75(13x13x3x25,25包含了4+1+20，通道数为75)<br>13x13：将图像分成13x13个小网格，每个网格会生成3先验框，这3个先验框有25个参数<br>4:x_offset、y_offset、height、width<br>1:置信度，来判断该框是不是一个有物体的框<br>20:分类结果  </p><h2 id="2、特征提取网络代码"><a href="#2、特征提取网络代码" class="headerlink" title="2、特征提取网络代码"></a>2、特征提取网络代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"># darknet53特有的卷积：单次卷积</span><br><span class="line">@wraps(Conv2D)</span><br><span class="line">def DarknetConv2D(*args, **kwargs):</span><br><span class="line">    darknet_conv_kwargs &#x3D; &#123;&#39;kernel_regularizer&#39;: l2(5e-4)&#125;#进行一次正则化</span><br><span class="line">    darknet_conv_kwargs[&#39;padding&#39;] &#x3D; &#39;valid&#39; if kwargs.get(&#39;strides&#39;)&#x3D;&#x3D;(2,2) else &#39;same&#39;</span><br><span class="line">    darknet_conv_kwargs.update(kwargs)</span><br><span class="line">    return Conv2D(*args, **darknet_conv_kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 卷积块 DarknetConv2D + BatchNormalization + LeakyReLU</span><br><span class="line">def DarknetConv2D_BN_Leaky(*args,**kwargs):</span><br><span class="line">    no_bias_kwargs&#x3D;&#123;&quot;use_bias&quot;:False&#125;</span><br><span class="line">    no_bias_kwargs.update(kwargs)</span><br><span class="line">    return compose(</span><br><span class="line">        DarknetConv2D(*args, **no_bias_kwargs),</span><br><span class="line">        BatchNormalization(),</span><br><span class="line">        LeakyReLU(alpha&#x3D;0.1)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 卷积块 DarknetConv2D + BatchNormalization + LeakyReLU</span><br><span class="line">def resblock_body(x, num_filters, num_blocks):</span><br><span class="line">    #首先调整输入的长和宽，然后进行残差结构</span><br><span class="line">    #x:输入, num_filters:输出通道, num_blocks,重复块的次数</span><br><span class="line">    # Darknet uses left and top padding instead of &#39;same&#39; mode</span><br><span class="line">    x &#x3D; ZeroPadding2D(((1,0),(1,0)))(x)</span><br><span class="line">    x &#x3D; DarknetConv2D_BN_Leaky(num_filters, (3,3), strides&#x3D;(2,2))(x)#此处使用了stride&#x3D;2降低分辨率(不用pooling)</span><br><span class="line">    #重复构建残差网络,这个算基本的block</span><br><span class="line">    for i in range(num_blocks):#</span><br><span class="line">        y &#x3D; compose(</span><br><span class="line">                DarknetConv2D_BN_Leaky(num_filters&#x2F;&#x2F;2, (1,1)),#使用1x1的conv先将通道先降1&#x2F;2,</span><br><span class="line">                DarknetConv2D_BN_Leaky(num_filters, (3,3)))(x)#使用3x3将通道后拉升回去</span><br><span class="line">        x &#x3D; Add()([x, y])#add主干+残差</span><br><span class="line">    return x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># darknet53的主体部分</span><br><span class="line">def darknet_body(x):</span><br><span class="line">    #416,416,3</span><br><span class="line">    x &#x3D; DarknetConv2D_BN_Leaky(32,(3,3))(x)</span><br><span class="line">    #208,208,64</span><br><span class="line">    x &#x3D; resblock_body(x, 64, 1)#残差结构重复1次</span><br><span class="line">    #104,104,128</span><br><span class="line">    x &#x3D; resblock_body(x, 128, 2)#残差结构重复2次</span><br><span class="line">    #52,52,256</span><br><span class="line">    x &#x3D; resblock_body(x, 256, 8)#残差结构重复8次</span><br><span class="line">    feat1 &#x3D; x #提取特征层，传入yolo预测值处理的网络当中</span><br><span class="line">    #26,26，512</span><br><span class="line">    x &#x3D; resblock_body(x, 512, 8)#残差结构重复8次</span><br><span class="line">    feat2 &#x3D; x</span><br><span class="line">    #13,13，1024</span><br><span class="line">    x &#x3D; resblock_body(x, 1024, 4)#残差结构重复4次</span><br><span class="line">    feat3 &#x3D; x</span><br><span class="line">    return feat1,feat2,feat3#输出三个特征层</span><br></pre></td></tr></table></figure><h2 id="3、通过提取特征获得预测结果"><a href="#3、通过提取特征获得预测结果" class="headerlink" title="3、通过提取特征获得预测结果"></a>3、通过提取特征获得预测结果</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">from functools import wraps</span><br><span class="line"></span><br><span class="line">import numpy as np</span><br><span class="line">import tensorflow as tf</span><br><span class="line">from keras import backend as K</span><br><span class="line">from keras.layers import Conv2D, Add, ZeroPadding2D, UpSampling2D, Concatenate, MaxPooling2D</span><br><span class="line">from keras.layers.advanced_activations import LeakyReLU</span><br><span class="line">from keras.layers.normalization import BatchNormalization</span><br><span class="line">from keras.models import Model</span><br><span class="line">from keras.regularizers import l2</span><br><span class="line">from nets.darknet53 import darknet_body</span><br><span class="line">from utils.utils import compose</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#--------------------------------------------------#</span><br><span class="line">#   单次卷积</span><br><span class="line">#--------------------------------------------------#</span><br><span class="line">@wraps(Conv2D)</span><br><span class="line">def DarknetConv2D(*args, **kwargs):</span><br><span class="line">    darknet_conv_kwargs &#x3D; &#123;&#39;kernel_regularizer&#39;: l2(5e-4)&#125;</span><br><span class="line">    darknet_conv_kwargs[&#39;padding&#39;] &#x3D; &#39;valid&#39; if kwargs.get(&#39;strides&#39;)&#x3D;&#x3D;(2,2) else &#39;same&#39;</span><br><span class="line">    darknet_conv_kwargs.update(kwargs)</span><br><span class="line">    return Conv2D(*args, **darknet_conv_kwargs)</span><br><span class="line"></span><br><span class="line">#---------------------------------------------------#</span><br><span class="line">#   卷积块</span><br><span class="line">#   DarknetConv2D + BatchNormalization + LeakyReLU</span><br><span class="line">#---------------------------------------------------#</span><br><span class="line">def DarknetConv2D_BN_Leaky(*args, **kwargs):</span><br><span class="line">    no_bias_kwargs &#x3D; &#123;&#39;use_bias&#39;: False&#125;</span><br><span class="line">    no_bias_kwargs.update(kwargs)</span><br><span class="line">    return compose( </span><br><span class="line">        DarknetConv2D(*args, **no_bias_kwargs),</span><br><span class="line">        BatchNormalization(),</span><br><span class="line">        LeakyReLU(alpha&#x3D;0.1))</span><br><span class="line"></span><br><span class="line">#---------------------------------------------------#</span><br><span class="line">#   特征层-&gt;最后的输出</span><br><span class="line">#---------------------------------------------------#</span><br><span class="line">def make_last_layers(x, num_filters, out_filters):</span><br><span class="line">    # 五次卷积</span><br><span class="line">    x &#x3D; DarknetConv2D_BN_Leaky(num_filters, (1,1))(x)</span><br><span class="line">    x &#x3D; DarknetConv2D_BN_Leaky(num_filters*2, (3,3))(x)</span><br><span class="line">    x &#x3D; DarknetConv2D_BN_Leaky(num_filters, (1,1))(x)</span><br><span class="line">    x &#x3D; DarknetConv2D_BN_Leaky(num_filters*2, (3,3))(x)</span><br><span class="line">    x &#x3D; DarknetConv2D_BN_Leaky(num_filters, (1,1))(x)</span><br><span class="line"></span><br><span class="line">    # 将最后的通道数调整为outfilter；向右调整</span><br><span class="line">    y &#x3D; DarknetConv2D_BN_Leaky(num_filters*2, (3,3))(x)</span><br><span class="line">    y &#x3D; DarknetConv2D(out_filters, (1,1))(y)</span><br><span class="line">            </span><br><span class="line">    return x, y</span><br><span class="line"></span><br><span class="line">#---------------------------------------------------#</span><br><span class="line">#   特征层-&gt;最后的输出</span><br><span class="line">#---------------------------------------------------#</span><br><span class="line">def yolo_body(inputs, num_anchors, num_classes):</span><br><span class="line">    # 生成darknet53的主干模型</span><br><span class="line">    # 52，52，256</span><br><span class="line">    # 26，26，512</span><br><span class="line">    # 13，13，1024</span><br><span class="line">    feat1,feat2,feat3 &#x3D; darknet_body(inputs)</span><br><span class="line">    darknet &#x3D; Model(inputs, feat3)</span><br><span class="line"></span><br><span class="line">    # 第一个特征层</span><br><span class="line">    # y1&#x3D;(batch_size,13,13,3,85)</span><br><span class="line">    x, y1 &#x3D; make_last_layers(darknet.output, 512, num_anchors*(num_classes+5))</span><br><span class="line"></span><br><span class="line">    x &#x3D; compose(</span><br><span class="line">            DarknetConv2D_BN_Leaky(256, (1,1)),</span><br><span class="line">            UpSampling2D(2))(x)</span><br><span class="line">    x &#x3D; Concatenate()([x,feat2])</span><br><span class="line">    # 第二个特征层</span><br><span class="line">    # y2&#x3D;(batch_size,26,26,3,85)</span><br><span class="line">    x, y2 &#x3D; make_last_layers(x, 256, num_anchors*(num_classes+5))</span><br><span class="line"></span><br><span class="line">    x &#x3D; compose(</span><br><span class="line">            DarknetConv2D_BN_Leaky(128, (1,1)),</span><br><span class="line">            UpSampling2D(2))(x)</span><br><span class="line">    x &#x3D; Concatenate()([x,feat1])</span><br><span class="line">    # 第三个特征层</span><br><span class="line">    # y3&#x3D;(batch_size,52,52,3,85)</span><br><span class="line">    x, y3 &#x3D; make_last_layers(x, 128, num_anchors*(num_classes+5))</span><br><span class="line"></span><br><span class="line">    return Model(inputs, [y1,y2,y3])</span><br></pre></td></tr></table></figure><h2 id="4、预测结果的解码"><a href="#4、预测结果的解码" class="headerlink" title="4、预测结果的解码"></a>4、预测结果的解码</h2><ul><li><p>由第二步我们可以获得三个特征层的预测结果，shape分别为(N,13,13,255)(大目标)，(N,26,26,255)，(N,52,52,255)(小目标)的数据，对应每个图分为13x13、26x26、52x52的网格上3个预测框的位置。</p></li><li><p>但是这个预测结果并不对应着最终的预测框在图片上的位置，还需要解码才可以完成。</p></li><li><p>此处要讲一下yolo3的预测原理，yolo3的3个特征层分别将整幅图分为13x13、26x26、52x52的网格，每个网络点负责一个区域的检测。</p></li><li><p>我们知道特征层的预测结果对应着三个预测框的位置，我们先将其reshape一下，其结果为(N,13,13,3,85)，(N,26,26,3,85)，(N,52,52,3,85)。</p></li><li><p>最后一个维度中的85包含了4+1+80，分别代表x_offset、y_offset、h和w、(这四个参数为框的情况)，置信度、分类结果。加上x，y偏移量后才是真实图片的位置，h，w要经过指数运算后再乘上先验框才是真实框的长宽  </p></li><li><p>yolo3的解码过程就是将每个网格点加上它对应的x_offset和y_offset，加完后的结果就是预测框的中心，然后再利用 先验框和h、w结合 计算出预测框的长和宽。这样就能得到整个预测框的位置了。</p></li></ul><p><img src="yolo5.png"></p><h3 id="1、初始化yolo"><a href="#1、初始化yolo" class="headerlink" title="1、初始化yolo"></a>1、初始化yolo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#   初始化yolo</span><br><span class="line">def __init__(self, **kwargs):</span><br><span class="line">    self.__dict__.update(self._defaults)</span><br><span class="line">    self.class_names &#x3D; self._get_class()#获得所有类的名字</span><br><span class="line">    self.anchors &#x3D; self._get_anchors()#获得所有先验框[9,2]</span><br><span class="line"></span><br><span class="line">    self.sess &#x3D; K.get_session()#tensorflow结构</span><br><span class="line">    self.boxes, self.scores, self.classes &#x3D; self.generate()</span><br></pre></td></tr></table></figure><h3 id="2、载入模型"><a href="#2、载入模型" class="headerlink" title="2、载入模型"></a>2、载入模型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">#载入模型</span><br><span class="line">def generate(self):</span><br><span class="line"></span><br><span class="line">    #获得预训练好的模型的位置</span><br><span class="line">    model_path &#x3D; os.path.expanduser(self.model_path)</span><br><span class="line">    assert model_path.endswith(&#39;.h5&#39;), &#39;Keras model or weights must be a .h5 file.&#39;</span><br><span class="line"></span><br><span class="line">    #计算先验框的数量和种类的数量</span><br><span class="line">    num_anchors &#x3D; len(self.anchors)</span><br><span class="line">    num_classes &#x3D; len(self.class_names)</span><br><span class="line"></span><br><span class="line">    #载入模型，如果原来的模型里已经包括了模型结构则直接载入，否则先构建模型再载入</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        self.yolo_model &#x3D; load_model(model_path, compile&#x3D;False)</span><br><span class="line">    except:</span><br><span class="line">        self.yolo_model &#x3D; yolo_body(Input(shape&#x3D;(None,None,3)), num_anchors&#x2F;&#x2F;3, num_classes)</span><br><span class="line">        self.yolo_model.load_weights(self.model_path)</span><br><span class="line">    else:</span><br><span class="line">        assert self.yolo_model.layers[-1].output_shape[-1] &#x3D;&#x3D; \</span><br><span class="line">            num_anchors&#x2F;len(self.yolo_model.output) * (num_classes + 5), \</span><br><span class="line">            &#39;Mismatch between model and given anchor and class sizes&#39;</span><br><span class="line"></span><br><span class="line">    print(&#39;&#123;&#125; model, anchors, and classes loaded.&#39;.format(model_path))</span><br><span class="line"></span><br><span class="line">    # 画框设置不同的颜色</span><br><span class="line">    hsv_tuples &#x3D; [(x &#x2F; len(self.class_names), 1., 1.)</span><br><span class="line">            for x in range(len(self.class_names))]</span><br><span class="line">    self.colors &#x3D; list(map(lambda x: colorsys.hsv_to_rgb(*x), hsv_tuples))</span><br><span class="line">    self.colors &#x3D; list(</span><br><span class="line">    map(lambda x: (int(x[0] * 255), int(x[1] * 255), int(x[2] * 255)),</span><br><span class="line">                self.colors))</span><br><span class="line"></span><br><span class="line">    # 打乱颜色</span><br><span class="line">    np.random.seed(10101)</span><br><span class="line">    np.random.shuffle(self.colors)</span><br><span class="line">    np.random.seed(None)</span><br><span class="line"></span><br><span class="line">    self.input_image_shape &#x3D; K.placeholder(shape&#x3D;(2, ))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #   在yolo_eval函数中，我们会对预测结果进行后处理</span><br><span class="line">    #   后处理的内容包括，解码、非极大抑制、门限筛选等</span><br><span class="line"></span><br><span class="line">    boxes, scores, classes &#x3D; yolo_eval(self.yolo_model.output, self.anchors,</span><br><span class="line">        num_classes, self.input_image_shape, max_boxes &#x3D; self.max_boxes,</span><br><span class="line">        score_threshold &#x3D; self.score, iou_threshold &#x3D; self.iou)</span><br><span class="line">    return boxes, scores, classes</span><br></pre></td></tr></table></figure><h3 id="3、yolo-eval函数："><a href="#3、yolo-eval函数：" class="headerlink" title="3、yolo_eval函数："></a>3、yolo_eval函数：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">def yolo_eval(yolo_outputs,</span><br><span class="line">              anchors,</span><br><span class="line">              num_classes,</span><br><span class="line">              image_shape,</span><br><span class="line">              max_boxes&#x3D;20,</span><br><span class="line">              score_threshold&#x3D;.6,</span><br><span class="line">              iou_threshold&#x3D;.5):</span><br><span class="line">    </span><br><span class="line">    #  获得特征层的数量，有效特征层的数量为3</span><br><span class="line">    num_layers &#x3D; len(yolo_outputs)</span><br><span class="line">    #   13x13的特征层对应的anchor是[116,90],[156,198],[373,326]</span><br><span class="line">    #   26x26的特征层对应的anchor是[30,61],[62,45],[59,119]</span><br><span class="line">    #   52x52的特征层对应的anchor是[10,13],[16,30],[33,23]</span><br><span class="line">    </span><br><span class="line">    anchor_mask &#x3D; [[6,7,8], [3,4,5], [0,1,2]]</span><br><span class="line">    </span><br><span class="line">    #   这里获得的是输入图片的大小，一般是416x416</span><br><span class="line"></span><br><span class="line">    input_shape &#x3D; K.shape(yolo_outputs[0])[1:3] * 32</span><br><span class="line">    boxes &#x3D; []</span><br><span class="line">    box_scores &#x3D; []</span><br><span class="line"></span><br><span class="line">    #   对每个特征层进行处理得到三个特征层的列表，将三个特征层的列表进行堆叠之后，所有的特征层都在一条横上，这个横上的每个点对应它的种类预测结果</span><br><span class="line">    for l in range(num_layers):</span><br><span class="line">        _boxes, _box_scores &#x3D; yolo_boxes_and_scores(yolo_outputs[l], anchors[anchor_mask[l]], num_classes, input_shape, image_shape)</span><br><span class="line">        boxes.append(_boxes)</span><br><span class="line">        box_scores.append(_box_scores)</span><br><span class="line"></span><br><span class="line">    #   将每个特征层的结果进行堆叠</span><br><span class="line">    boxes &#x3D; K.concatenate(boxes, axis&#x3D;0)</span><br><span class="line">    box_scores &#x3D; K.concatenate(box_scores, axis&#x3D;0)</span><br><span class="line"></span><br><span class="line">    #   判断得分是否大于score_threshold，如果大于说明框里有东西且有类别</span><br><span class="line">    mask &#x3D; box_scores &gt;&#x3D; score_threshold</span><br><span class="line">    max_boxes_tensor &#x3D; K.constant(max_boxes, dtype&#x3D;&#39;int32&#39;)#max_boxes,一张图片中最多20个框</span><br><span class="line">    boxes_ &#x3D; []</span><br><span class="line">    scores_ &#x3D; []</span><br><span class="line">    classes_ &#x3D; []</span><br><span class="line">    for c in range(num_classes):</span><br><span class="line"></span><br><span class="line">        #   取出所有box_scores &gt;&#x3D; score_threshold的框，和成绩</span><br><span class="line">        class_boxes &#x3D; tf.boolean_mask(boxes, mask[:, c])</span><br><span class="line">        class_box_scores &#x3D; tf.boolean_mask(box_scores[:, c], mask[:, c])</span><br><span class="line"></span><br><span class="line">        #   非极大抑制，同一个目标有好几个预测框，只留下预测概率最大的，防止重复检测结果</span><br><span class="line">        nms_index &#x3D; tf.image.non_max_suppression(</span><br><span class="line">            class_boxes, class_box_scores, max_boxes_tensor, iou_threshold&#x3D;iou_threshold)</span><br><span class="line"></span><br><span class="line">        #-----------------------------------------------------------#</span><br><span class="line">        #   获取非极大抑制后的结果</span><br><span class="line">        #   下列三个分别是</span><br><span class="line">        #   框的位置，得分与种类</span><br><span class="line">        #-----------------------------------------------------------#</span><br><span class="line">        class_boxes &#x3D; K.gather(class_boxes, nms_index)</span><br><span class="line">        class_box_scores &#x3D; K.gather(class_box_scores, nms_index)</span><br><span class="line">        classes &#x3D; K.ones_like(class_box_scores, &#39;int32&#39;) * c</span><br><span class="line">        boxes_.append(class_boxes)</span><br><span class="line">        scores_.append(class_box_scores)</span><br><span class="line">        classes_.append(classes)</span><br><span class="line">    boxes_ &#x3D; K.concatenate(boxes_, axis&#x3D;0)</span><br><span class="line">    scores_ &#x3D; K.concatenate(scores_, axis&#x3D;0)</span><br><span class="line">    classes_ &#x3D; K.concatenate(classes_, axis&#x3D;0)</span><br><span class="line"></span><br><span class="line">    return boxes_, scores_, classes_ </span><br></pre></td></tr></table></figure><h3 id="4、获取每个box和它的得分"><a href="#4、获取每个box和它的得分" class="headerlink" title="4、获取每个box和它的得分"></a>4、获取每个box和它的得分</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">def yolo_boxes_and_scores(feats, anchors, num_classes, input_shape, image_shape):</span><br><span class="line"></span><br><span class="line">    #   将预测值调成真实值</span><br><span class="line">    #   box_xy : -1,13,13,3,2; </span><br><span class="line">    #   box_wh : -1,13,13,3,2; </span><br><span class="line">    #   box_confidence : -1,13,13,3,1; </span><br><span class="line">    #   box_class_probs : -1,13,13,3,80;</span><br><span class="line">    box_xy, box_wh, box_confidence, box_class_probs &#x3D; yolo_head(feats, anchors, num_classes, input_shape)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #   在图像传入网络预测前会进行letterbox_image给图像周围添加灰条</span><br><span class="line">    #   因此生成的box_xy, box_wh是相对于有灰条的图像的</span><br><span class="line">    #   我们需要对齐进行修改，去除灰条的部分。</span><br><span class="line">    #   将box_xy、和box_wh调节成y_min,y_max,xmin,xmax</span><br><span class="line">    #   得到真实图片左上角和右下角的点</span><br><span class="line">    boxes &#x3D; yolo_correct_boxes(box_xy, box_wh, input_shape, image_shape)</span><br><span class="line"></span><br><span class="line">    #   获得最终得分和框的位置</span><br><span class="line">    boxes &#x3D; K.reshape(boxes, [-1, 4])</span><br><span class="line">    box_scores &#x3D; box_confidence * box_class_probs</span><br><span class="line">    box_scores &#x3D; K.reshape(box_scores, [-1, num_classes])</span><br><span class="line">    return boxes, box_scores</span><br></pre></td></tr></table></figure><h3 id="5、将预测值的每个特征层调成真实值"><a href="#5、将预测值的每个特征层调成真实值" class="headerlink" title="5、将预测值的每个特征层调成真实值"></a>5、将预测值的每个特征层调成真实值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">def yolo_head(feats, anchors, num_classes, input_shape, calc_loss&#x3D;False):</span><br><span class="line">    num_anchors &#x3D; len(anchors)</span><br><span class="line">    #   [1, 1, 1, num_anchors, 2]</span><br><span class="line">    anchors_tensor &#x3D; K.reshape(K.constant(anchors), [1, 1, 1, num_anchors, 2])</span><br><span class="line"></span><br><span class="line">    #-------------------------解码核心部分---------------------------#</span><br><span class="line">    #   获得x，y的网格13x13</span><br><span class="line">    #   (13, 13, 1, 2)</span><br><span class="line">    grid_shape &#x3D; K.shape(feats)[1:3]</span><br><span class="line">    grid_y &#x3D; K.tile(K.reshape(K.arange(0, stop&#x3D;grid_shape[0]), [-1, 1, 1, 1]),</span><br><span class="line">        [1, grid_shape[1], 1, 1])</span><br><span class="line">    grid_x &#x3D; K.tile(K.reshape(K.arange(0, stop&#x3D;grid_shape[1]), [1, -1, 1, 1]),</span><br><span class="line">        [grid_shape[0], 1, 1, 1])</span><br><span class="line">    grid &#x3D; K.concatenate([grid_x, grid_y])</span><br><span class="line">    grid &#x3D; K.cast(grid, K.dtype(feats))</span><br><span class="line">    #[[0,0],[0,1],[0,2]......[13,13]]用列表的方式对应网格中的每一个点</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #   将预测结果调整成(batch_size,13,13,3,85)</span><br><span class="line">    #   85可拆分成4 + 1 + 80</span><br><span class="line">    #   4代表的是中心宽高的调整参数</span><br><span class="line">    #   1代表的是框的置信度</span><br><span class="line">    #   80代表的是种类的置信度</span><br><span class="line">    feats &#x3D; K.reshape(feats, [-1, grid_shape[0], grid_shape[1], num_anchors, num_classes + 5])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #   将预测值调成真实值</span><br><span class="line">    #   box_xy对应框的中心点</span><br><span class="line">    #   box_wh对应框的宽和高</span><br><span class="line">    box_xy &#x3D; (K.sigmoid(feats[..., :2]) + grid) &#x2F; K.cast(grid_shape[::-1], K.dtype(feats))#加上偏移量除以13转化成比例</span><br><span class="line"></span><br><span class="line">    box_wh &#x3D; K.exp(feats[..., 2:4]) * anchors_tensor &#x2F; K.cast(input_shape[::-1], K.dtype(feats))#取指数然后乘先验框</span><br><span class="line"></span><br><span class="line">    box_confidence &#x3D; K.sigmoid(feats[..., 4:5])#置信度</span><br><span class="line">    box_class_probs &#x3D; K.sigmoid(feats[..., 5:])#预测种类</span><br><span class="line">    #-------------------------------------------------------------#</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #   在计算loss的时候返回grid, feats, box_xy, box_wh</span><br><span class="line">    #   在预测的时候返回box_xy, box_wh, box_confidence, box_class_probs</span><br><span class="line">    if calc_loss &#x3D;&#x3D; True:</span><br><span class="line">        return grid, feats, box_xy, box_wh</span><br><span class="line">    return box_xy, box_wh, box_confidence, box_class_probs</span><br></pre></td></tr></table></figure><h3 id="6、对box进行调整，使其符合真实图片的样子"><a href="#6、对box进行调整，使其符合真实图片的样子" class="headerlink" title="6、对box进行调整，使其符合真实图片的样子"></a>6、对box进行调整，使其符合真实图片的样子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">def yolo_correct_boxes(box_xy, box_wh, input_shape, image_shape):</span><br><span class="line"></span><br><span class="line">    #   把y轴放前面是因为方便预测框和图像的宽高进行相乘</span><br><span class="line">    box_yx &#x3D; box_xy[..., ::-1]</span><br><span class="line">    box_hw &#x3D; box_wh[..., ::-1]</span><br><span class="line"></span><br><span class="line">    #转换类型进行指数运算    </span><br><span class="line">    input_shape &#x3D; K.cast(input_shape, K.dtype(box_yx))</span><br><span class="line">    image_shape &#x3D; K.cast(image_shape, K.dtype(box_yx))</span><br><span class="line"></span><br><span class="line">    new_shape &#x3D; K.round(image_shape * K.min(input_shape&#x2F;image_shape))</span><br><span class="line"></span><br><span class="line">    #   这里求出来的offset是图像有效区域相对于图像左上角的偏移情况</span><br><span class="line">    #   new_shape指的是宽高缩放情况</span><br><span class="line"></span><br><span class="line">    offset &#x3D; (input_shape-new_shape)&#x2F;2.&#x2F;input_shape</span><br><span class="line">    scale &#x3D; input_shape&#x2F;new_shape</span><br><span class="line"></span><br><span class="line">    box_yx &#x3D; (box_yx - offset) * scale</span><br><span class="line">    box_hw *&#x3D; scale</span><br><span class="line"></span><br><span class="line">    box_mins &#x3D; box_yx - (box_hw &#x2F; 2.)</span><br><span class="line">    box_maxes &#x3D; box_yx + (box_hw &#x2F; 2.)</span><br><span class="line">    boxes &#x3D;  K.concatenate([</span><br><span class="line">        box_mins[..., 0:1],  # y_min</span><br><span class="line">        box_mins[..., 1:2],  # x_min</span><br><span class="line">        box_maxes[..., 0:1],  # y_max</span><br><span class="line">        box_maxes[..., 1:2]  # x_max</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line">    boxes *&#x3D; K.concatenate([image_shape, image_shape])</span><br><span class="line">    return boxes  </span><br></pre></td></tr></table></figure><h3 id="7、结果预测"><a href="#7、结果预测" class="headerlink" title="7、结果预测"></a>7、结果预测</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">#   检测图片</span><br><span class="line">   #---------------------------------------------------#</span><br><span class="line">   def detect_image(self, image):</span><br><span class="line">       start &#x3D; timer()</span><br><span class="line"></span><br><span class="line">       #   给图像增加灰条，实现不失真的resize,调整图片，使其符合要求</span><br><span class="line">       new_image_size &#x3D; (self.model_image_size[1],self.model_image_size[0])</span><br><span class="line">       boxed_image &#x3D; letterbox_image(image, new_image_size)</span><br><span class="line">       image_data &#x3D; np.array(boxed_image, dtype&#x3D;&#39;float32&#39;)</span><br><span class="line">       image_data &#x2F;&#x3D; 255.</span><br><span class="line"></span><br><span class="line">       #   添加上batch_size维度</span><br><span class="line">       image_data &#x3D; np.expand_dims(image_data, 0)</span><br><span class="line"></span><br><span class="line">       #   将图像输入网络当中进行预测！</span><br><span class="line">       out_boxes, out_scores, out_classes &#x3D; self.sess.run(</span><br><span class="line">           [self.boxes, self.scores, self.classes],</span><br><span class="line">           feed_dict&#x3D;&#123;</span><br><span class="line">               self.yolo_model.input: image_data,</span><br><span class="line">               self.input_image_shape: [image.size[1], image.size[0]],</span><br><span class="line">               K.learning_phase(): 0&#125;)</span><br><span class="line"></span><br><span class="line">       print(&#39;Found &#123;&#125; boxes for &#123;&#125;&#39;.format(len(out_boxes), &#39;img&#39;))</span><br><span class="line"></span><br><span class="line">       #   设置字体</span><br><span class="line">       font &#x3D; ImageFont.truetype(font&#x3D;&#39;font&#x2F;simhei.ttf&#39;,</span><br><span class="line">                   size&#x3D;np.floor(3e-2 * image.size[1] + 0.5).astype(&#39;int32&#39;))</span><br><span class="line"></span><br><span class="line">       thickness &#x3D; max((image.size[0] + image.size[1]) &#x2F;&#x2F; 300, 1)</span><br><span class="line"></span><br><span class="line">       # 对每一个预测的结果在图片上进行绘画</span><br><span class="line">       for i, c in list(enumerate(out_classes)):</span><br><span class="line">           predicted_class &#x3D; self.class_names[c]</span><br><span class="line">           box &#x3D; out_boxes[i]</span><br><span class="line">           score &#x3D; out_scores[i]</span><br><span class="line"></span><br><span class="line">           top, left, bottom, right &#x3D; box</span><br><span class="line">           top &#x3D; top - 5</span><br><span class="line">           left &#x3D; left - 5</span><br><span class="line">           bottom &#x3D; bottom + 5</span><br><span class="line">           right &#x3D; right + 5</span><br><span class="line"></span><br><span class="line">           top &#x3D; max(0, np.floor(top + 0.5).astype(&#39;int32&#39;))</span><br><span class="line">           left &#x3D; max(0, np.floor(left + 0.5).astype(&#39;int32&#39;))</span><br><span class="line">           bottom &#x3D; min(image.size[1], np.floor(bottom + 0.5).astype(&#39;int32&#39;))</span><br><span class="line">           right &#x3D; min(image.size[0], np.floor(right + 0.5).astype(&#39;int32&#39;))</span><br><span class="line"></span><br><span class="line">           # 画框框</span><br><span class="line">           label &#x3D; &#39;&#123;&#125; &#123;:.2f&#125;&#39;.format(predicted_class, score)</span><br><span class="line">           draw &#x3D; ImageDraw.Draw(image)</span><br><span class="line">           label_size &#x3D; draw.textsize(label, font)</span><br><span class="line">           label &#x3D; label.encode(&#39;utf-8&#39;)</span><br><span class="line">           print(label, top, left, bottom, right)</span><br><span class="line">           </span><br><span class="line">           if top - label_size[1] &gt;&#x3D; 0:</span><br><span class="line">               text_origin &#x3D; np.array([left, top - label_size[1]])</span><br><span class="line">           else:</span><br><span class="line">               text_origin &#x3D; np.array([left, top + 1])</span><br><span class="line"></span><br><span class="line">           for i in range(thickness):</span><br><span class="line">               draw.rectangle(</span><br><span class="line">                   [left + i, top + i, right - i, bottom - i],</span><br><span class="line">                   outline&#x3D;self.colors[c])</span><br><span class="line">           draw.rectangle(</span><br><span class="line">               [tuple(text_origin), tuple(text_origin + label_size)],</span><br><span class="line">               fill&#x3D;self.colors[c])</span><br><span class="line">           draw.text(text_origin, str(label,&#39;UTF-8&#39;), fill&#x3D;(0, 0, 0), font&#x3D;font)</span><br><span class="line">           del draw</span><br><span class="line"></span><br><span class="line">       end &#x3D; timer()</span><br><span class="line">       print(end - start)</span><br><span class="line">       return image</span><br><span class="line"></span><br><span class="line">   def close_session(self):</span><br><span class="line">       self.sess.close()</span><br></pre></td></tr></table></figure><h2 id="5、训练的是什么-loss函数的组成"><a href="#5、训练的是什么-loss函数的组成" class="headerlink" title="5、训练的是什么-loss函数的组成"></a>5、训练的是什么-loss函数的组成</h2><h3 id="1、计算loss所需参数"><a href="#1、计算loss所需参数" class="headerlink" title="1、计算loss所需参数"></a>1、计算loss所需参数</h3><p>在计算loss的时候，实际上是y_pre(网络的预测输出)和y_true(网络的实际情况)之间的对比，他们的偏差就是loss值<br>y_pre就是一幅图像经过网络之后的输出，内部含有三个特征层(分别是13x13，26x26，52x52)的内容；其需要解码才能够在图上作画<br>y_true就相当于把真实图像上的每个框映射到特征层的网格上，它的每个真实框对应的(13,13)、(26,26)、(52,52)网格上的偏移位置、长宽与种类。其仍需要编码才能与y_pred的结构一致，y_true就是最理想的y_pre<br>实际上y_pre和y_true内容的shape都是<br>(batch_size,13,13,3,85)<br>(batch_size,26,26,3,85)<br>(batch_size,52,52,3,85)  </p><h3 id="2、y-pre是什么"><a href="#2、y-pre是什么" class="headerlink" title="2、y_pre是什么"></a>2、y_pre是什么</h3><p>对于yolo3的模型来说，网络最后输出的内容就是三个特征层每个网格点对应的预测框及其种类，即三个特征层分别对应着图片被分为不同size的网格后，每个网格点上三个先验框对应的位置、置信度及其种类。<br>对于输出的y1、y2、y3而言，[…, : 2]指的是相对于每个网格点的偏移量，[…, 2: 4]指的是宽和高，[…, 4: 5]指的是该框的置信度，[…, 5: ]指的是每个种类的预测概率。<br>现在的y_pre还是没有解码的，解码了之后才是真实图像上的情况。  </p><h3 id="3、y-true是什么。"><a href="#3、y-true是什么。" class="headerlink" title="3、y_true是什么。"></a>3、y_true是什么。</h3><p>y_true就是一个真实图像中，它的每个真实框对应的(13,13)、(26,26)、(52,52)网格上的偏移位置、长宽与种类。其仍需要编码才能与y_pred的结构一致<br>在yolo3中，其使用了一个专门的函数用于处理读取进来的图片的框的真实情况。 </p><h3 id="4、y-true代码"><a href="#4、y-true代码" class="headerlink" title="4、y_true代码"></a>4、y_true代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">#   读入xml文件，并输出y_true</span><br><span class="line">def preprocess_true_boxes(true_boxes, input_shape, anchors, num_classes):</span><br><span class="line">    assert (true_boxes[..., 4]&lt;num_classes).all(), &#39;class id must be less than num_classes&#39;</span><br><span class="line">    # 一共有三个特征层数</span><br><span class="line">    num_layers &#x3D; len(anchors)&#x2F;&#x2F;3</span><br><span class="line"></span><br><span class="line">    #   13x13的特征层对应的anchor是[116,90],[156,198],[373,326]</span><br><span class="line">    #   26x26的特征层对应的anchor是[30,61],[62,45],[59,119]</span><br><span class="line">    #   52x52的特征层对应的anchor是[10,13],[16,30],[33,23]</span><br><span class="line">    anchor_mask &#x3D; [[6,7,8], [3,4,5], [0,1,2]]</span><br><span class="line"></span><br><span class="line">    #   获得框的坐标和图片的大小</span><br><span class="line">    true_boxes &#x3D; np.array(true_boxes, dtype&#x3D;&#39;float32&#39;)</span><br><span class="line">    input_shape &#x3D; np.array(input_shape, dtype&#x3D;&#39;int32&#39;)</span><br><span class="line"></span><br><span class="line">    #   通过计算获得真实框的中心和宽高</span><br><span class="line">    #   中心点(m,n,2) 宽高(m,n,2)</span><br><span class="line">    boxes_xy &#x3D; (true_boxes[..., 0:2] + true_boxes[..., 2:4]) &#x2F;&#x2F; 2</span><br><span class="line">    boxes_wh &#x3D; true_boxes[..., 2:4] - true_boxes[..., 0:2]</span><br><span class="line"></span><br><span class="line">    #   将真实框归一化到小数形式</span><br><span class="line">    true_boxes[..., 0:2] &#x3D; boxes_xy&#x2F;input_shape[::-1]</span><br><span class="line">    true_boxes[..., 2:4] &#x3D; boxes_wh&#x2F;input_shape[::-1]</span><br><span class="line"></span><br><span class="line">    # m为图片数量，grid_shapes为网格的shape</span><br><span class="line">    m &#x3D; true_boxes.shape[0]</span><br><span class="line">    grid_shapes &#x3D; [input_shape&#x2F;&#x2F;&#123;0:32, 1:16, 2:8&#125;[l] for l in range(num_layers)]</span><br><span class="line"></span><br><span class="line">    #   y_true的格式为(m,13,13,3,85)(m,26,26,3,85)(m,52,52,3,85)</span><br><span class="line">    y_true &#x3D; [np.zeros((m,grid_shapes[l][0],grid_shapes[l][1],len(anchor_mask[l]),5+num_classes),</span><br><span class="line">        dtype&#x3D;&#39;float32&#39;) for l in range(num_layers)]</span><br><span class="line"></span><br><span class="line">    #   [9,2] -&gt; [1,9,2]</span><br><span class="line">    anchors &#x3D; np.expand_dims(anchors, 0)</span><br><span class="line">    anchor_maxes &#x3D; anchors &#x2F; 2.</span><br><span class="line">    anchor_mins &#x3D; -anchor_maxes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #长宽要大于0才有效，先验框一个维度的扩增，扩增后才可与boxes_xy和boxes_wh加减</span><br><span class="line">    valid_mask &#x3D; boxes_wh[..., 0]&gt;0</span><br><span class="line"></span><br><span class="line">    for b in range(m):</span><br><span class="line">        # 对每一张图进行处理</span><br><span class="line">        #[n,2]</span><br><span class="line">        wh &#x3D; boxes_wh[b, valid_mask[b]]</span><br><span class="line">        if len(wh)&#x3D;&#x3D;0: continue</span><br><span class="line"></span><br><span class="line">        #   [n,2] -&gt; [n,1,2]</span><br><span class="line">        wh &#x3D; np.expand_dims(wh, -2)</span><br><span class="line">        box_maxes &#x3D; wh &#x2F; 2.</span><br><span class="line">        box_mins &#x3D; -box_maxes</span><br><span class="line"></span><br><span class="line">        #   计算所有真实框和先验框的交并比</span><br><span class="line">        #   intersect_area  [n,9]</span><br><span class="line">        #   box_area        [n,1]</span><br><span class="line">        #   anchor_area     [1,9]</span><br><span class="line">        #   iou             [n,9]</span><br><span class="line">        intersect_mins &#x3D; np.maximum(box_mins, anchor_mins)</span><br><span class="line">        intersect_maxes &#x3D; np.minimum(box_maxes, anchor_maxes)</span><br><span class="line">        intersect_wh &#x3D; np.maximum(intersect_maxes - intersect_mins, 0.)</span><br><span class="line">        intersect_area &#x3D; intersect_wh[..., 0] * intersect_wh[..., 1]</span><br><span class="line">        box_area &#x3D; wh[..., 0] * wh[..., 1]</span><br><span class="line">        anchor_area &#x3D; anchors[..., 0] * anchors[..., 1]</span><br><span class="line">        iou &#x3D; intersect_area &#x2F; (box_area + anchor_area - intersect_area)</span><br><span class="line"></span><br><span class="line">        #   维度是[n,]将每个真实值与先验框进行对比，判断和那个先验框最契合</span><br><span class="line">        best_anchor &#x3D; np.argmax(iou, axis&#x3D;-1)</span><br><span class="line"></span><br><span class="line">        #找真实框属于哪个特征层的哪个网格点的哪个先验框</span><br><span class="line">        for t, n in enumerate(best_anchor):</span><br><span class="line"></span><br><span class="line">            #   找到每个真实框所属的特征层</span><br><span class="line">            for l in range(num_layers):</span><br><span class="line">                if n in anchor_mask[l]:</span><br><span class="line">                    #-----------------------------------------------------------#</span><br><span class="line">                    #   floor用于向下取整，找到真实框所属的特征层对应的x、y轴坐标</span><br><span class="line">                    #-----------------------------------------------------------#</span><br><span class="line">                    i &#x3D; np.floor(true_boxes[b,t,0] * grid_shapes[l][1]).astype(&#39;int32&#39;)</span><br><span class="line">                    j &#x3D; np.floor(true_boxes[b,t,1] * grid_shapes[l][0]).astype(&#39;int32&#39;)</span><br><span class="line">                    #-----------------------------------------------------------#</span><br><span class="line">                    #   k指的的当前这个特征点的第k个先验框</span><br><span class="line">                    #-----------------------------------------------------------#</span><br><span class="line">                    k &#x3D; anchor_mask[l].index(n)</span><br><span class="line">                    #-----------------------------------------------------------#</span><br><span class="line">                    #   c指的是当前这个真实框的种类</span><br><span class="line">                    #-----------------------------------------------------------#</span><br><span class="line">                    c &#x3D; true_boxes[b, t, 4].astype(&#39;int32&#39;)</span><br><span class="line">                    #-----------------------------------------------------------#</span><br><span class="line">                    #   y_true的shape为(m,13,13,3,85)(m,26,26,3,85)(m,52,52,3,85)</span><br><span class="line">                    #   最后的85可以拆分成4+1+80，4代表的是框的中心与宽高、</span><br><span class="line">                    #   1代表的是置信度、80代表的是种类</span><br><span class="line">                    #-----------------------------------------------------------#</span><br><span class="line">                    y_true[l][b, j, i, k, 0:4] &#x3D; true_boxes[b, t, 0:4]</span><br><span class="line">                    y_true[l][b, j, i, k, 4] &#x3D; 1</span><br><span class="line">                    y_true[l][b, j, i, k, 5+c] &#x3D; 1</span><br><span class="line"></span><br><span class="line">    return y_true</span><br></pre></td></tr></table></figure><h3 id="5、loss代码"><a href="#5、loss代码" class="headerlink" title="5、loss代码"></a>5、loss代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line">def yolo_loss(args, anchors, num_classes, ignore_thresh&#x3D;.5, print_loss&#x3D;False, normalize&#x3D;True):</span><br><span class="line"></span><br><span class="line">    # 一共有三个特征层</span><br><span class="line">    num_layers &#x3D; len(anchors)&#x2F;&#x2F;3 </span><br><span class="line"></span><br><span class="line">    #将预测结果和实际ground truth分开，args是[*model_body.output, *y_true]</span><br><span class="line">    # y_true是一个列表，包含三个特征层，shape分别为(m,13,13,3,85),(m,26,26,3,85),(m,52,52,3,85)。</span><br><span class="line">    #yolo_outputs是一个列表，包含三个特征层，shape分别为(m,13,13,3,85),(m,26,26,3,85),(m,52,52,3,85)。</span><br><span class="line">    y_true &#x3D; args[num_layers:]</span><br><span class="line">    yolo_outputs &#x3D; args[:num_layers]</span><br><span class="line"></span><br><span class="line">    #   13x13的特征层对应的anchor是[116,90],[156,198],[373,326]</span><br><span class="line">    #   26x26的特征层对应的anchor是[30,61],[62,45],[59,119]</span><br><span class="line">    #   52x52的特征层对应的anchor是[10,13],[16,30],[33,23]</span><br><span class="line">    anchor_mask &#x3D; [[6,7,8], [3,4,5], [0,1,2]]</span><br><span class="line"></span><br><span class="line">    # 得到input_shpae为416,416 </span><br><span class="line">    input_shape &#x3D; K.cast(K.shape(yolo_outputs[0])[1:3] * 32, K.dtype(y_true[0]))</span><br><span class="line"></span><br><span class="line">    #   得到网格的shape为[13,13]; [26,26]; [52,52]</span><br><span class="line">    grid_shapes &#x3D; [K.cast(K.shape(yolo_outputs[l])[1:3], K.dtype(y_true[0])) for l in range(num_layers)]</span><br><span class="line">    loss &#x3D; 0</span><br><span class="line">    num_pos &#x3D; 0</span><br><span class="line"></span><br><span class="line">    #   取出每一张图片</span><br><span class="line">    #   m的值就是batch_size</span><br><span class="line">    m &#x3D; K.shape(yolo_outputs[0])[0]</span><br><span class="line">    mf &#x3D; K.cast(m, K.dtype(yolo_outputs[0]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #y_true是一个列表，包含三个特征层，shape分别为(m,13,13,3,85),(m,26,26,3,85),(m,52,52,3,85)。</span><br><span class="line">    #yolo_outputs是一个列表，包含三个特征层，shape分别为(m,13,13,3,85),(m,26,26,3,85),(m,52,52,3,85)。</span><br><span class="line">    for l in range(num_layers):</span><br><span class="line"></span><br><span class="line">        #以第一个特征层(m,13,13,3,85)为例子</span><br><span class="line">        #取出该特征层中存在目标的点的位置。(m,13,13,3,1)</span><br><span class="line">        object_mask &#x3D; y_true[l][..., 4:5]</span><br><span class="line"></span><br><span class="line">        #取出其对应的种类(m,13,13,3,80)</span><br><span class="line">        true_class_probs &#x3D; y_true[l][..., 5:]</span><br><span class="line"></span><br><span class="line">        #将yolo_outputs的特征层输出进行处理、获得四个返回值</span><br><span class="line">        #其中：</span><br><span class="line">        #grid        (13,13,1,2) 网格坐标</span><br><span class="line">        #raw_pred    (m,13,13,3,85) 尚未处理的预测结果</span><br><span class="line">        #pred_xy     (m,13,13,3,2) 解码后的中心坐标</span><br><span class="line">        #pred_wh     (m,13,13,3,2) 解码后的宽高坐标</span><br><span class="line">        #yolo_head是一个解码的过程，将预测值调成真实值</span><br><span class="line">        grid, raw_pred, pred_xy, pred_wh &#x3D; yolo_head(yolo_outputs[l],</span><br><span class="line">            anchors[anchor_mask[l]], num_classes, input_shape, calc_loss&#x3D;True)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        #pred_box是解码后的预测的box的位置</span><br><span class="line">        #(m,13,13,3,4)</span><br><span class="line">        pred_box &#x3D; K.concatenate([pred_xy, pred_wh])</span><br><span class="line"></span><br><span class="line">        #ignore_mask是对负样本的筛选</span><br><span class="line">        #找到负样本群组，第一步是创建一个数组，[]</span><br><span class="line">        ignore_mask &#x3D; tf.TensorArray(K.dtype(y_true[0]), size&#x3D;1, dynamic_size&#x3D;True)</span><br><span class="line">        object_mask_bool &#x3D; K.cast(object_mask, &#39;bool&#39;)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        #对每一张图片计算ignore_mask</span><br><span class="line">        def loop_body(b, ignore_mask):</span><br><span class="line"></span><br><span class="line">            #   取出n个真实框：n,4</span><br><span class="line">            true_box &#x3D; tf.boolean_mask(y_true[l][b,...,0:4], object_mask_bool[b,...,0])</span><br><span class="line"></span><br><span class="line">            #   计算预测框与真实框的iou</span><br><span class="line">            #   pred_box    13,13,3,4 预测框的坐标</span><br><span class="line">            #   true_box    n,4 真实框的坐标</span><br><span class="line">            #   iou         13,13,3,n 预测框和真实框的iou</span><br><span class="line">            iou &#x3D; box_iou(pred_box[b], true_box)</span><br><span class="line"></span><br><span class="line">            #   best_iou    13,13,3 每个特征点与真实框的最大重合程度</span><br><span class="line">            best_iou &#x3D; K.max(iou, axis&#x3D;-1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            #判断预测框和真实框的最大iou小于ignore_thresh，取小于是为了减小负样本的loss函数，且方便计算</span><br><span class="line">            #则认为该预测框没有与之对应的真实框</span><br><span class="line">            #该操作的目的是：</span><br><span class="line">            #忽略预测结果与真实框非常对应特征点，因为这些框已经比较准了</span><br><span class="line">            #不适合当作负样本，所以忽略掉。</span><br><span class="line">            ignore_mask &#x3D; ignore_mask.write(b, K.cast(best_iou&lt;ignore_thresh, K.dtype(true_box)))</span><br><span class="line">            return b+1, ignore_mask</span><br><span class="line"></span><br><span class="line">        # 在这个地方进行一个循环、循环是对每一张图片进行的</span><br><span class="line">        _, ignore_mask &#x3D; K.control_flow_ops.while_loop(lambda b,*args: b &lt; m, loop_body, [0, ignore_mask])</span><br><span class="line"></span><br><span class="line">        #ignore_mask用于提取出作为负样本的特征点</span><br><span class="line">        #(m,13,13,3)</span><br><span class="line">        ignore_mask &#x3D; ignore_mask.stack()</span><br><span class="line"></span><br><span class="line">        #(m,13,13,3,1)</span><br><span class="line">        ignore_mask &#x3D; K.expand_dims(ignore_mask, -1)</span><br><span class="line"></span><br><span class="line">        #将真实框进行编码，使其格式与预测的相同，后面用于计算loss</span><br><span class="line">        raw_true_xy &#x3D; y_true[l][..., :2] * grid_shapes[l][:] - grid</span><br><span class="line">        raw_true_wh &#x3D; K.log(y_true[l][..., 2:4] &#x2F; anchors[anchor_mask[l]] * input_shape[::-1])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        #object_mask如果真实存在目标则保存其wh值</span><br><span class="line">        #switch接口，就是一个if&#x2F;else条件判断语句</span><br><span class="line">        raw_true_wh &#x3D; K.switch(object_mask, raw_true_wh, K.zeros_like(raw_true_wh))</span><br><span class="line"></span><br><span class="line">        #真实框越大，比重越小，小框的比重更大。</span><br><span class="line">        box_loss_scale &#x3D; 2 - y_true[l][...,2:3]*y_true[l][...,3:4]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        #利用binary_crossentropy计算中心点偏移情况，效果更好</span><br><span class="line">        xy_loss &#x3D; object_mask * box_loss_scale * K.binary_crossentropy(raw_true_xy, raw_pred[...,0:2], from_logits&#x3D;True)</span><br><span class="line"></span><br><span class="line">        #wh_loss用于计算宽高损失</span><br><span class="line">        wh_loss &#x3D; object_mask * box_loss_scale * 0.5 * K.square(raw_true_wh-raw_pred[...,2:4])</span><br><span class="line">        </span><br><span class="line">        #如果该位置本来有框，那么计算1与置信度的交叉熵</span><br><span class="line">        #如果该位置本来没有框，那么计算0与置信度的交叉熵</span><br><span class="line">        #在这其中会忽略一部分样本，这些被忽略的样本满足条件best_iou&lt;ignore_thresh</span><br><span class="line"></span><br><span class="line">        #   该操作的目的是：</span><br><span class="line">        #   忽略预测结果与真实框非常对应特征点，因为这些框已经比较准了</span><br><span class="line">        #   不适合当作负样本，所以忽略掉。</span><br><span class="line">        confidence_loss &#x3D; object_mask * K.binary_crossentropy(object_mask, raw_pred[...,4:5], from_logits&#x3D;True) + \</span><br><span class="line">            (1-object_mask) * K.binary_crossentropy(object_mask, raw_pred[...,4:5], from_logits&#x3D;True) * ignore_mask #加上ignore_mask限制负样本的数量</span><br><span class="line">        </span><br><span class="line">        class_loss &#x3D; object_mask * K.binary_crossentropy(true_class_probs, raw_pred[...,5:], from_logits&#x3D;True)</span><br><span class="line"></span><br><span class="line">        #   将所有损失求和</span><br><span class="line">        xy_loss &#x3D; K.sum(xy_loss)</span><br><span class="line">        wh_loss &#x3D; K.sum(wh_loss)</span><br><span class="line">        confidence_loss &#x3D; K.sum(confidence_loss)</span><br><span class="line">        class_loss &#x3D; K.sum(class_loss)</span><br><span class="line"></span><br><span class="line">        #   计算正样本数量</span><br><span class="line">        num_pos +&#x3D; tf.maximum(K.sum(K.cast(object_mask, tf.float32)), 1)</span><br><span class="line">        loss +&#x3D; xy_loss + wh_loss + confidence_loss + class_loss</span><br><span class="line"></span><br><span class="line">        if print_loss:</span><br><span class="line">            loss &#x3D; tf.Print(loss, [loss, xy_loss, wh_loss, confidence_loss, class_loss, tf.shape(ignore_mask)], summarize&#x3D;100, message&#x3D;&#39;loss: &#39;)</span><br><span class="line">    </span><br><span class="line">    if normalize:</span><br><span class="line">        loss &#x3D; loss &#x2F; num_pos</span><br><span class="line">    else:</span><br><span class="line">        loss &#x3D; loss &#x2F; mf</span><br><span class="line">    return loss</span><br></pre></td></tr></table></figure><h3 id="6、loss的组成"><a href="#6、loss的组成" class="headerlink" title="6、loss的组成"></a>6、loss的组成</h3><p>计算预测种类的loss，其计算的是实际上存在目标的，预测类与真实类的差距。<br>其实际上计算的总的loss是三个loss的和，这三个loss分别是：</p><ul><li>实际存在的框，编码后的长宽与xy轴偏移量与预测值的差距。</li><li>实际存在的框，预测结果中置信度的值与1对比；实际不存在的框，在上述步骤中，在第四步中得到其最大IOU的值与0对比。</li><li>实际存在的框，种类预测结果与实际结果的对比。  </li></ul><h1 id="3、如何用yolo3训练自己的数据集"><a href="#3、如何用yolo3训练自己的数据集" class="headerlink" title="3、如何用yolo3训练自己的数据集"></a>3、如何用yolo3训练自己的数据集</h1><h2 id="1、如何制作voc格式的数据集"><a href="#1、如何制作voc格式的数据集" class="headerlink" title="1、如何制作voc格式的数据集"></a>1、如何制作voc格式的数据集</h2><p><img src="yolo7.png">   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">└── VOCdevkit     #根目录</span><br><span class="line">    └── VOC2007   #不同年份的数据集，这里只下载了2007</span><br><span class="line">        ├── Annotations  #存放xml文件，与JPEGImages中的图片一一对应，解释图片的内容等等</span><br><span class="line">        ├── ImageSets    #该目录下存放的都是txt文件，这些txt将数据集的图片分成了各种集合。如Main下的train.txt中记录的是用于训练的图片集合</span><br><span class="line">        │   ├── Layout</span><br><span class="line">        │   ├── Main</span><br><span class="line">        │   └── Segmentation</span><br><span class="line">        ├── JPEGImages         #存放源图片</span><br><span class="line">        ├── SegmentationClass  #存放的是图片，语义分割相关</span><br><span class="line">        └── SegmentationObject #存放的是图片，实例分割相关</span><br></pre></td></tr></table></figure><h2 id="2、标签"><a href="#2、标签" class="headerlink" title="2、标签"></a>2、标签</h2><p>Annotations这个文件夹放置的是对每一张图片的标注。标注使用XML文件的格式。XML是标记语言，形如HTML。每一个XML文件对应一张图片的标注结果，000005.jpg对应的XML文件(000005.xml)标记结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">&lt;annotation&gt;</span><br><span class="line">    &lt;folder&gt;VOC2007&lt;&#x2F;folder&gt;</span><br><span class="line">    &lt;!--文件名--&gt;</span><br><span class="line">    &lt;filename&gt;000005.jpg&lt;&#x2F;filename&gt;.   </span><br><span class="line">    &lt;!--数据来源--&gt;</span><br><span class="line">    &lt;source&gt;</span><br><span class="line">        &lt;!--数据来源--&gt;</span><br><span class="line">        &lt;database&gt;The VOC2007 Database&lt;&#x2F;database&gt;</span><br><span class="line">        &lt;annotation&gt;PASCAL VOC2007&lt;&#x2F;annotation&gt;</span><br><span class="line">    &lt;!--来源是flickr，一个雅虎的图像分享网站，下面是id，对于我们没有用--&gt;</span><br><span class="line">        &lt;image&gt;flickr&lt;&#x2F;image&gt;</span><br><span class="line">        &lt;flickrid&gt;325991873&lt;&#x2F;flickrid&gt;</span><br><span class="line">    &lt;&#x2F;source&gt;</span><br><span class="line">    &lt;!--图片的所有者，也没有用--&gt;</span><br><span class="line">    &lt;owner&gt;</span><br><span class="line">        &lt;flickrid&gt;archintent louisville&lt;&#x2F;flickrid&gt;</span><br><span class="line">        &lt;name&gt;?&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;&#x2F;owner&gt;</span><br><span class="line">    &lt;!--图像尺寸,宽、高、长--&gt;</span><br><span class="line">    &lt;size&gt;</span><br><span class="line">        &lt;width&gt;500&lt;&#x2F;width&gt;</span><br><span class="line">        &lt;height&gt;375&lt;&#x2F;height&gt;</span><br><span class="line">        &lt;depth&gt;3&lt;&#x2F;depth&gt;</span><br><span class="line">    &lt;&#x2F;size&gt;</span><br><span class="line">    &lt;!--是否用于分割，0表示用于，1表示不用于--&gt;</span><br><span class="line">    &lt;segmented&gt;0&lt;&#x2F;segmented&gt;</span><br><span class="line">    &lt;!--下面是图像中标注的物体,每一个object包含一个标准的物体--&gt;</span><br><span class="line">    &lt;object&gt;</span><br><span class="line">        &lt;!--物体名称，拍摄角度--&gt;</span><br><span class="line">        &lt;name&gt;chair&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;pose&gt;Rear&lt;&#x2F;pose&gt;</span><br><span class="line">        &lt;!--是否被裁减，0表示完整，1表示不完整--&gt;</span><br><span class="line">        &lt;truncated&gt;0&lt;&#x2F;truncated&gt;</span><br><span class="line">        &lt;!--是否容易识别，0表示容易，1表示困难--&gt;</span><br><span class="line">        &lt;difficult&gt;0&lt;&#x2F;difficult&gt;</span><br><span class="line">        &lt;!--bounding box的四个坐标，目标所在图片上的位置--&gt;</span><br><span class="line">        &lt;bndbox&gt;</span><br><span class="line">            &lt;xmin&gt;263&lt;&#x2F;xmin&gt;</span><br><span class="line">            &lt;ymin&gt;211&lt;&#x2F;ymin&gt;</span><br><span class="line">            &lt;xmax&gt;324&lt;&#x2F;xmax&gt;</span><br><span class="line">            &lt;ymax&gt;339&lt;&#x2F;ymax&gt;</span><br><span class="line">        &lt;&#x2F;bndbox&gt;</span><br><span class="line">    &lt;&#x2F;object&gt;</span><br><span class="line">    &lt;object&gt;</span><br><span class="line">        &lt;name&gt;chair&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;pose&gt;Unspecified&lt;&#x2F;pose&gt;</span><br><span class="line">        &lt;truncated&gt;0&lt;&#x2F;truncated&gt;</span><br><span class="line">        &lt;difficult&gt;0&lt;&#x2F;difficult&gt;</span><br><span class="line">        &lt;bndbox&gt;</span><br><span class="line">            &lt;xmin&gt;165&lt;&#x2F;xmin&gt;</span><br><span class="line">            &lt;ymin&gt;264&lt;&#x2F;ymin&gt;</span><br><span class="line">            &lt;xmax&gt;253&lt;&#x2F;xmax&gt;</span><br><span class="line">            &lt;ymax&gt;372&lt;&#x2F;ymax&gt;</span><br><span class="line">        &lt;&#x2F;bndbox&gt;</span><br><span class="line">    &lt;&#x2F;object&gt;</span><br><span class="line">    &lt;object&gt;</span><br><span class="line">        &lt;name&gt;chair&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;pose&gt;Unspecified&lt;&#x2F;pose&gt;</span><br><span class="line">        &lt;truncated&gt;1&lt;&#x2F;truncated&gt;</span><br><span class="line">        &lt;difficult&gt;1&lt;&#x2F;difficult&gt;</span><br><span class="line">        &lt;bndbox&gt;</span><br><span class="line">            &lt;xmin&gt;5&lt;&#x2F;xmin&gt;</span><br><span class="line">            &lt;ymin&gt;244&lt;&#x2F;ymin&gt;</span><br><span class="line">            &lt;xmax&gt;67&lt;&#x2F;xmax&gt;</span><br><span class="line">            &lt;ymax&gt;374&lt;&#x2F;ymax&gt;</span><br><span class="line">        &lt;&#x2F;bndbox&gt;</span><br><span class="line">    &lt;&#x2F;object&gt;</span><br><span class="line">    &lt;object&gt;</span><br><span class="line">        &lt;name&gt;chair&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;pose&gt;Unspecified&lt;&#x2F;pose&gt;</span><br><span class="line">        &lt;truncated&gt;0&lt;&#x2F;truncated&gt;</span><br><span class="line">        &lt;difficult&gt;0&lt;&#x2F;difficult&gt;</span><br><span class="line">        &lt;bndbox&gt;</span><br><span class="line">            &lt;xmin&gt;241&lt;&#x2F;xmin&gt;</span><br><span class="line">            &lt;ymin&gt;194&lt;&#x2F;ymin&gt;</span><br><span class="line">            &lt;xmax&gt;295&lt;&#x2F;xmax&gt;</span><br><span class="line">            &lt;ymax&gt;299&lt;&#x2F;ymax&gt;</span><br><span class="line">        &lt;&#x2F;bndbox&gt;</span><br><span class="line">    &lt;&#x2F;object&gt;</span><br><span class="line">    &lt;object&gt;</span><br><span class="line">        &lt;name&gt;chair&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;pose&gt;Unspecified&lt;&#x2F;pose&gt;</span><br><span class="line">        &lt;truncated&gt;1&lt;&#x2F;truncated&gt;</span><br><span class="line">        &lt;difficult&gt;1&lt;&#x2F;difficult&gt;</span><br><span class="line">        &lt;bndbox&gt;</span><br><span class="line">            &lt;xmin&gt;277&lt;&#x2F;xmin&gt;</span><br><span class="line">            &lt;ymin&gt;186&lt;&#x2F;ymin&gt;</span><br><span class="line">            &lt;xmax&gt;312&lt;&#x2F;xmax&gt;</span><br><span class="line">            &lt;ymax&gt;220&lt;&#x2F;ymax&gt;</span><br><span class="line">        &lt;&#x2F;bndbox&gt;</span><br><span class="line">    &lt;&#x2F;object&gt;</span><br><span class="line">&lt;&#x2F;annotation&gt;</span><br></pre></td></tr></table></figure><p>每一个标签文件与JPEGImages(存放源图片)的图片对应</p><h2 id="3、voc2yolo3-py"><a href="#3、voc2yolo3-py" class="headerlink" title="3、voc2yolo3.py"></a>3、voc2yolo3.py</h2><p>运行该文件，标签与源图片相对应，生成train.txt文件存在与ImageSets–Main–train.txt中</p><h2 id="4、voc-annotation-py"><a href="#4、voc-annotation-py" class="headerlink" title="4、voc_annotation.py"></a>4、voc_annotation.py</h2><p>将train.txt和源图片进行遍历，遍历后生成2007_train.txt文件,文件中174，101，349，351，14前面为目标在图片中的位置，最后一个数为分的类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#   运行前一定要修改classes</span><br><span class="line">#   如果生成的2007_train.txt里面没有目标信息</span><br><span class="line">#   那么就是因为classes没有设定正确</span><br><span class="line">import xml.etree.ElementTree as ET</span><br><span class="line">from os import getcwd</span><br><span class="line"></span><br><span class="line">sets&#x3D;[(&#39;2007&#39;, &#39;train&#39;), (&#39;2007&#39;, &#39;val&#39;), (&#39;2007&#39;, &#39;test&#39;)]</span><br><span class="line"></span><br><span class="line"># class 要与voc_class.txt中的类一样</span><br><span class="line">classes &#x3D; [&quot;aeroplane&quot;, &quot;bicycle&quot;, &quot;bird&quot;, &quot;boat&quot;, &quot;bottle&quot;, &quot;bus&quot;, &quot;car&quot;, &quot;cat&quot;, &quot;chair&quot;, &quot;cow&quot;, &quot;diningtable&quot;, &quot;dog&quot;, &quot;horse&quot;, &quot;motorbike&quot;, &quot;person&quot;, &quot;pottedplant&quot;, &quot;sheep&quot;, &quot;sofa&quot;, &quot;train&quot;, &quot;tvmonitor&quot;]</span><br><span class="line"></span><br><span class="line">def convert_annotation(year, image_id, list_file):</span><br><span class="line">    in_file &#x3D; open(&#39;VOCdevkit&#x2F;VOC%s&#x2F;Annotations&#x2F;%s.xml&#39;%(year, image_id), encoding&#x3D;&#39;utf-8&#39;)</span><br><span class="line">    tree&#x3D;ET.parse(in_file)</span><br><span class="line">    root &#x3D; tree.getroot()</span><br><span class="line"></span><br><span class="line">    for obj in root.iter(&#39;object&#39;):</span><br><span class="line">        difficult &#x3D; 0 </span><br><span class="line">        if obj.find(&#39;difficult&#39;)!&#x3D;None:</span><br><span class="line">            difficult &#x3D; obj.find(&#39;difficult&#39;).text</span><br><span class="line">            </span><br><span class="line">        cls &#x3D; obj.find(&#39;name&#39;).text</span><br><span class="line">        if cls not in classes or int(difficult)&#x3D;&#x3D;1:</span><br><span class="line">            continue</span><br><span class="line">        cls_id &#x3D; classes.index(cls)</span><br><span class="line">        xmlbox &#x3D; obj.find(&#39;bndbox&#39;)</span><br><span class="line">        b &#x3D; (int(xmlbox.find(&#39;xmin&#39;).text), int(xmlbox.find(&#39;ymin&#39;).text), int(xmlbox.find(&#39;xmax&#39;).text), int(xmlbox.find(&#39;ymax&#39;).text))</span><br><span class="line">        list_file.write(&quot; &quot; + &quot;,&quot;.join([str(a) for a in b]) + &#39;,&#39; + str(cls_id))</span><br><span class="line"></span><br><span class="line">wd &#x3D; getcwd()</span><br><span class="line"></span><br><span class="line">for year, image_set in sets:</span><br><span class="line">    image_ids &#x3D; open(&#39;VOCdevkit&#x2F;VOC%s&#x2F;ImageSets&#x2F;Main&#x2F;%s.txt&#39;%(year, image_set)).read().strip().split()</span><br><span class="line">    list_file &#x3D; open(&#39;%s_%s.txt&#39;%(year, image_set), &#39;w&#39;)</span><br><span class="line">    for image_id in image_ids:</span><br><span class="line">        list_file.write(&#39;%s&#x2F;VOCdevkit&#x2F;VOC%s&#x2F;JPEGImages&#x2F;%s.jpg&#39;%(wd, year, image_id))</span><br><span class="line">        convert_annotation(year, image_id, list_file)</span><br><span class="line">        list_file.write(&#39;\n&#39;)</span><br><span class="line">    list_file.close()</span><br></pre></td></tr></table></figure><h2 id="5、train-py"><a href="#5、train-py" class="headerlink" title="5、train.py"></a>5、train.py</h2><p>然后voc读取2007_train.txt进行训练  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line"></span><br><span class="line">    #   获得图片路径和标签</span><br><span class="line">    annotation_path &#x3D; &#39;2007_train.txt&#39;</span><br><span class="line"></span><br><span class="line">    #   训练后的模型保存的位置，保存在logs文件夹里面</span><br><span class="line">    log_dir &#x3D; &#39;logs&#x2F;&#39;</span><br><span class="line"></span><br><span class="line">    #   classes和anchor的路径，非常重要</span><br><span class="line">    #   训练前一定要修改classes_path，使其对应自己的数据集</span><br><span class="line">    classes_path &#x3D; &#39;model_data&#x2F;voc_classes.txt&#39;    </span><br><span class="line">    anchors_path &#x3D; &#39;model_data&#x2F;yolo_anchors.txt&#39;</span><br><span class="line"></span><br><span class="line">    #   权值文件请看README，百度网盘下载</span><br><span class="line">    #   训练自己的数据集时提示维度不匹配正常</span><br><span class="line">    #   预测的东西都不一样了自然维度不匹配</span><br><span class="line">    weights_path &#x3D; &#39;model_data&#x2F;yolo_weights.h5&#39;</span><br><span class="line"></span><br><span class="line">    #   输入的shape大小</span><br><span class="line">    input_shape &#x3D; (416,416)</span><br><span class="line"></span><br><span class="line">    #   是否对损失进行归一化，用于改变loss的大小</span><br><span class="line">    #   用于决定计算最终loss是除上batch_size还是除上正样本数量</span><br><span class="line">    normalize &#x3D; False</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #   获取classes和anchor</span><br><span class="line">    class_names &#x3D; get_classes(classes_path)</span><br><span class="line">    anchors &#x3D; get_anchors(anchors_path)</span><br><span class="line"></span><br><span class="line">    #   一共有多少类和多少先验框</span><br><span class="line">    num_classes &#x3D; len(class_names)</span><br><span class="line">    num_anchors &#x3D; len(anchors)</span><br><span class="line"></span><br><span class="line">    K.clear_session()</span><br><span class="line"></span><br><span class="line">    #   创建yolo模型</span><br><span class="line">    image_input &#x3D; Input(shape&#x3D;(None, None, 3))</span><br><span class="line">    h, w &#x3D; input_shape</span><br><span class="line">    print(&#39;Create YOLOv3 model with &#123;&#125; anchors and &#123;&#125; classes.&#39;.format(num_anchors, num_classes))</span><br><span class="line">    model_body &#x3D; yolo_body(image_input, num_anchors&#x2F;&#x2F;3, num_classes)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    #   载入预训练权重(迁移学习的思想)，darknet53中有已经训练好的权重适合目标检测，我们不再训练这些适合目标检测的权重，只训练别的</span><br><span class="line">    print(&#39;Load weights &#123;&#125;.&#39;.format(weights_path))</span><br><span class="line">    model_body.load_weights(weights_path, by_name&#x3D;True, skip_mismatch&#x3D;True)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    #   在这个地方设置损失，将网络的输出结果传入loss函数</span><br><span class="line">    #   把整个模型的输出作为loss</span><br><span class="line">    y_true &#x3D; [Input(shape&#x3D;(h&#x2F;&#x2F;&#123;0:32, 1:16, 2:8&#125;[l], w&#x2F;&#x2F;&#123;0:32, 1:16, 2:8&#125;[l], \</span><br><span class="line">        num_anchors&#x2F;&#x2F;3, num_classes+5)) for l in range(3)]</span><br><span class="line">    loss_input &#x3D; [*model_body.output, *y_true]</span><br><span class="line">    model_loss &#x3D; Lambda(yolo_loss, output_shape&#x3D;(1,), name&#x3D;&#39;yolo_loss&#39;,</span><br><span class="line">        arguments&#x3D;&#123;&#39;anchors&#39;: anchors, &#39;num_classes&#39;: num_classes, &#39;ignore_thresh&#39;: 0.5, &#39;normalize&#39;: normalize&#125;)(loss_input)</span><br><span class="line"></span><br><span class="line">    model &#x3D; Model([model_body.input, *y_true], model_loss)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #   主干特征提取网络特征通用，冻结训练可以加快训练速度</span><br><span class="line">    #   也可以在训练初期防止权值被破坏。</span><br><span class="line">    #   提示OOM或者显存不足请调小Batch_size</span><br><span class="line">    freeze_layers &#x3D; 184</span><br><span class="line">    for i in range(freeze_layers): model_body.layers[i].trainable &#x3D; False</span><br><span class="line">    print(&#39;Freeze the first &#123;&#125; layers of total &#123;&#125; layers.&#39;.format(freeze_layers, len(model_body.layers)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #   训练参数的设置</span><br><span class="line">    #   logging表示tensorboard的保存地址</span><br><span class="line">    #   checkpoint用于设置权值保存的细节，period用于修改多少epoch保存一次</span><br><span class="line">    #   reduce_lr用于设置学习率下降的方式</span><br><span class="line">    #   early_stopping用于设定早停，val_loss多次不下降自动结束训练，表示模型基本收敛</span><br><span class="line">    logging &#x3D; TensorBoard(log_dir&#x3D;log_dir)</span><br><span class="line">    checkpoint &#x3D; ModelCheckpoint(log_dir + &#39;ep&#123;epoch:03d&#125;-loss&#123;loss:.3f&#125;-val_loss&#123;val_loss:.3f&#125;.h5&#39;,</span><br><span class="line">        monitor&#x3D;&#39;val_loss&#39;, save_weights_only&#x3D;True, save_best_only&#x3D;False, period&#x3D;1)</span><br><span class="line">    reduce_lr &#x3D; ReduceLROnPlateau(monitor&#x3D;&#39;val_loss&#39;, factor&#x3D;0.5, patience&#x3D;3, verbose&#x3D;1)</span><br><span class="line">    early_stopping &#x3D; EarlyStopping(monitor&#x3D;&#39;val_loss&#39;, min_delta&#x3D;0, patience&#x3D;10, verbose&#x3D;1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #   验证集的划分在train.py代码里面进行</span><br><span class="line">    #   2007_test.txt和2007_val.txt里面没有内容是正常的。训练不会使用到。</span><br><span class="line">    #   当前划分方式下，验证集和训练集的比例为1:9，90%训练，10%验证</span><br><span class="line">    val_split &#x3D; 0.1</span><br><span class="line">    with open(annotation_path) as f:</span><br><span class="line">        lines &#x3D; f.readlines()</span><br><span class="line">    np.random.seed(10101)</span><br><span class="line">    np.random.shuffle(lines)</span><br><span class="line">    np.random.seed(None)</span><br><span class="line">    num_val &#x3D; int(len(lines)*val_split)</span><br><span class="line">    num_train &#x3D; len(lines) - num_val</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    #   主干特征提取网络特征通用，冻结训练可以加快训练速度</span><br><span class="line">    #   也可以在训练初期防止权值被破坏。</span><br><span class="line">    #   Init_Epoch为起始世代</span><br><span class="line">    #   Freeze_Epoch为冻结训练的世代</span><br><span class="line">    #   Epoch总训练世代</span><br><span class="line">    #   提示OOM或者显存不足请调小Batch_size</span><br><span class="line">    if True:</span><br><span class="line">        Init_epoch &#x3D; 0</span><br><span class="line">        Freeze_epoch &#x3D; 50</span><br><span class="line">        batch_size &#x3D; 8</span><br><span class="line">        learning_rate_base &#x3D; 1e-3</span><br><span class="line"></span><br><span class="line">        model.compile(optimizer&#x3D;Adam(lr&#x3D;learning_rate_base), loss&#x3D;&#123;</span><br><span class="line">            &#39;yolo_loss&#39;: lambda y_true, y_pred: y_pred&#125;)</span><br><span class="line"></span><br><span class="line">        print(&#39;Train on &#123;&#125; samples, val on &#123;&#125; samples, with batch size &#123;&#125;.&#39;.format(num_train, num_val, batch_size))</span><br><span class="line">        model.fit_generator(data_generator(lines[:num_train], batch_size, input_shape, anchors, num_classes, random&#x3D;True),</span><br><span class="line">                steps_per_epoch&#x3D;max(1, num_train&#x2F;&#x2F;batch_size),</span><br><span class="line">                validation_data&#x3D;data_generator(lines[num_train:], batch_size, input_shape, anchors, num_classes, random&#x3D;False),</span><br><span class="line">                validation_steps&#x3D;max(1, num_val&#x2F;&#x2F;batch_size),</span><br><span class="line">                epochs&#x3D;Freeze_epoch,</span><br><span class="line">                initial_epoch&#x3D;Init_epoch,</span><br><span class="line">                callbacks&#x3D;[logging, checkpoint, reduce_lr, early_stopping])</span><br><span class="line">        model.save_weights(log_dir + &#39;trained_weights_stage_1.h5&#39;)</span><br><span class="line"></span><br><span class="line">    for i in range(freeze_layers): model_body.layers[i].trainable &#x3D; True</span><br><span class="line"></span><br><span class="line">    #解冻后训练</span><br><span class="line">    if True:</span><br><span class="line">        Freeze_epoch &#x3D; 50</span><br><span class="line">        Epoch &#x3D; 100</span><br><span class="line">        batch_size &#x3D; 2#bactch_size改的小一点，将所有层进行解冻后数据集会很大</span><br><span class="line">        learning_rate_base &#x3D; 1e-4</span><br><span class="line"></span><br><span class="line">        model.compile(optimizer&#x3D;Adam(lr&#x3D;learning_rate_base), loss&#x3D;&#123;</span><br><span class="line">            &#39;yolo_loss&#39;: lambda y_true, y_pred: y_pred&#125;)</span><br><span class="line"></span><br><span class="line">        print(&#39;Train on &#123;&#125; samples, val on &#123;&#125; samples, with batch size &#123;&#125;.&#39;.format(num_train, num_val, batch_size))</span><br><span class="line">        model.fit_generator(data_generator(lines[:num_train], batch_size, input_shape, anchors, num_classes, random&#x3D;True),</span><br><span class="line">                steps_per_epoch&#x3D;max(1, num_train&#x2F;&#x2F;batch_size),</span><br><span class="line">                validation_data&#x3D;data_generator(lines[num_train:], batch_size, input_shape, anchors, num_classes, random&#x3D;False),</span><br><span class="line">                validation_steps&#x3D;max(1, num_val&#x2F;&#x2F;batch_size),</span><br><span class="line">                epochs&#x3D;Epoch,</span><br><span class="line">                initial_epoch&#x3D;Freeze_epoch,</span><br><span class="line">                callbacks&#x3D;[logging, checkpoint, reduce_lr, early_stopping])</span><br><span class="line">        model.save_weights(log_dir + &#39;last1.h5&#39;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1、什么是yolo目标检测网络&quot;&gt;&lt;a href=&quot;#1、什么是yolo目标检测网络&quot; class=&quot;headerlink&quot; title=&quot;1、什么是yolo目标检测网络&quot;&gt;&lt;/a&gt;1、什么是yolo目标检测网络&lt;/h1&gt;&lt;p&gt;计算机通过这四个参数来确定猫的位置&lt;</summary>
      
    
    
    
    
    <category term="目标检测" scheme="https://182.92.7.32/tags/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>2.5 多分类学习</title>
    <link href="https://182.92.7.32/2021/02/04/2.5%20%E5%A4%9A%E5%88%86%E7%B1%BB%E5%AD%A6%E4%B9%A0/2.5%E5%A4%9A%E5%88%86%E7%B1%BB%E5%AD%A6%E4%B9%A0/"/>
    <id>https://182.92.7.32/2021/02/04/2.5%20%E5%A4%9A%E5%88%86%E7%B1%BB%E5%AD%A6%E4%B9%A0/2.5%E5%A4%9A%E5%88%86%E7%B1%BB%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-02-04T14:40:14.000Z</published>
    <updated>2021-02-05T15:34:26.084Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2-5-多分类学习"><a href="#2-5-多分类学习" class="headerlink" title="2.5 多分类学习"></a>2.5 多分类学习</h1><h2 id="1、数据相关"><a href="#1、数据相关" class="headerlink" title="1、数据相关"></a>1、数据相关</h2><h3 id="1、目录设置"><a href="#1、目录设置" class="headerlink" title="1、目录设置"></a>1、目录设置</h3><p>每个子目录下都有三种类别: 石头、布、剪刀<br><img src="%E5%A4%9A%E5%88%86%E7%B1%BB1.png"></p><h3 id="2、数据集"><a href="#2、数据集" class="headerlink" title="2、数据集"></a>2、数据集</h3><p><a href="https://link.csdn.net/?target=http://www.laurencemoroney.com/rock-paper-scissors-dataset/">数据集</a><br>上面给出的数据集链接里包含了训练集，验证集，以及测试集.</p><h2 id="2、设置图像生成器"><a href="#2、设置图像生成器" class="headerlink" title="2、设置图像生成器"></a>2、设置图像生成器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">train_datagen &#x3D; ImageDataGenerator(rescale&#x3D;1.&#x2F;255)</span><br><span class="line"></span><br><span class="line">train_generator &#x3D; train_datagen.flow_from_directory(</span><br><span class="line">        train_dir,</span><br><span class="line">        target_size&#x3D;(150,150),</span><br><span class="line">        batch_size&#x3D;128,</span><br><span class="line">        class_mode&#x3D;&#39;categorical&#39;) #多个类别</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">model &#x3D; tf.keras.models.Sequential([</span><br><span class="line">   </span><br><span class="line">    tf.keras.layers.Conv2D(16, (3,3), activation&#x3D;&#39;relu&#39;, input_shape&#x3D;(150, 150, 3)),</span><br><span class="line">    tf.keras.layers.MaxPooling2D(2, 2),</span><br><span class="line">    # The second convolution</span><br><span class="line">    tf.keras.layers.Conv2D(32, (3,3), activation&#x3D;&#39;relu&#39;),</span><br><span class="line">    tf.keras.layers.MaxPooling2D(2,2),</span><br><span class="line">    # The third convolution</span><br><span class="line">    tf.keras.layers.Conv2D(64, (3,3), activation&#x3D;&#39;relu&#39;),</span><br><span class="line">    tf.keras.layers.MaxPooling2D(2,2),</span><br><span class="line">    tf.keras.layers.Flatten(),</span><br><span class="line">    tf.keras.layers.Dense(512, activation&#x3D;&#39;relu&#39;),</span><br><span class="line">    tf.keras.layers.Dense(3, activation&#x3D;&#39;softmax&#39;) #三分类，softmax将所有的值转换为概率</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p><img src="%E5%A4%9A%E5%88%86%E7%B1%BB2.png"><br>输出三分类，并且转化为概率，该图像为石头的概率为0.001，布的概率为0.647，剪刀的概率为0.352</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from tensorflow.keras.optimizers import RMSprop</span><br><span class="line">model.compile(loss &#x3D; &#39;categorical_crossentropy&#39;, #绝对交叉熵</span><br><span class="line">              optimizer&#x3D;RMSprop(lr&#x3D;0.001), </span><br><span class="line">              metrics&#x3D;[&#39;acc&#39;])</span><br></pre></td></tr></table></figure><p>损失函数改为绝对交叉熵，也可使用交叉熵</p><h2 id="3、训练结果"><a href="#3、训练结果" class="headerlink" title="3、训练结果"></a>3、训练结果</h2><p>epochs=100；<br><img src="%E5%A4%9A%E5%88%86%E7%B1%BB3.png"><br>现实训练在约25epochs时达到最高<br>epochs=20;<br><img src="%E5%A4%9A%E5%88%86%E7%B1%BB4.png">  </p><h2 id="4、完整代码"><a href="#4、完整代码" class="headerlink" title="4、完整代码"></a>4、完整代码</h2><h3 id="1、获取数据"><a href="#1、获取数据" class="headerlink" title="1、获取数据"></a>1、获取数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">!wget --no-check-certificate \</span><br><span class="line">    https:&#x2F;&#x2F;storage.googleapis.com&#x2F;laurencemoroney-blog.appspot.com&#x2F;rps.zip \</span><br><span class="line">    -O &#x2F;tmp&#x2F;rps.zip</span><br><span class="line">  </span><br><span class="line">!wget --no-check-certificate \</span><br><span class="line">    https:&#x2F;&#x2F;storage.googleapis.com&#x2F;laurencemoroney-blog.appspot.com&#x2F;rps-test-set.zip \</span><br><span class="line">    -O &#x2F;tmp&#x2F;rps-test-set.zip</span><br></pre></td></tr></table></figure><h3 id="2、压缩至temp目录"><a href="#2、压缩至temp目录" class="headerlink" title="2、压缩至temp目录"></a>2、压缩至temp目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import zipfile</span><br><span class="line"></span><br><span class="line">local_zip &#x3D; &#39;&#x2F;tmp&#x2F;rps.zip&#39;</span><br><span class="line">zip_ref &#x3D; zipfile.ZipFile(local_zip, &#39;r&#39;)</span><br><span class="line">zip_ref.extractall(&#39;&#x2F;tmp&#x2F;&#39;)</span><br><span class="line">zip_ref.close()</span><br><span class="line"></span><br><span class="line">local_zip &#x3D; &#39;&#x2F;tmp&#x2F;rps-test-set.zip&#39;</span><br><span class="line">zip_ref &#x3D; zipfile.ZipFile(local_zip, &#39;r&#39;)</span><br><span class="line">zip_ref.extractall(&#39;&#x2F;tmp&#x2F;&#39;)</span><br><span class="line">zip_ref.close()</span><br></pre></td></tr></table></figure><h3 id="3、查看其中文件"><a href="#3、查看其中文件" class="headerlink" title="3、查看其中文件"></a>3、查看其中文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">rock_dir &#x3D; os.path.join(&#39;&#x2F;tmp&#x2F;rps&#x2F;rock&#39;)</span><br><span class="line">paper_dir &#x3D; os.path.join(&#39;&#x2F;tmp&#x2F;rps&#x2F;paper&#39;)</span><br><span class="line">scissors_dir &#x3D; os.path.join(&#39;&#x2F;tmp&#x2F;rps&#x2F;scissors&#39;)</span><br><span class="line"></span><br><span class="line">print(&#39;total training rock images:&#39;, len(os.listdir(rock_dir)))</span><br><span class="line">print(&#39;total training paper images:&#39;, len(os.listdir(paper_dir)))</span><br><span class="line">print(&#39;total training scissors images:&#39;, len(os.listdir(scissors_dir)))</span><br><span class="line"></span><br><span class="line">rock_files &#x3D; os.listdir(rock_dir)</span><br><span class="line">print(rock_files[:10])</span><br><span class="line"></span><br><span class="line">paper_files &#x3D; os.listdir(paper_dir)</span><br><span class="line">print(paper_files[:10])</span><br><span class="line"></span><br><span class="line">scissors_files &#x3D; os.listdir(scissors_dir)</span><br><span class="line">print(scissors_files[:10])</span><br></pre></td></tr></table></figure><p>输出结果包含每个类别的数量，一些文件名<br><img src="%E5%A4%9A%E5%88%86%E7%B1%BB5.png"></p><h3 id="4、绘制一些文件"><a href="#4、绘制一些文件" class="headerlink" title="4、绘制一些文件"></a>4、绘制一些文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import matplotlib.image as mpimg</span><br><span class="line"></span><br><span class="line">pic_index &#x3D; 2</span><br><span class="line"></span><br><span class="line">next_rock &#x3D; [os.path.join(rock_dir, fname) </span><br><span class="line">                for fname in rock_files[pic_index-2:pic_index]]</span><br><span class="line">next_paper &#x3D; [os.path.join(paper_dir, fname) </span><br><span class="line">                for fname in paper_files[pic_index-2:pic_index]]</span><br><span class="line">next_scissors &#x3D; [os.path.join(scissors_dir, fname) </span><br><span class="line">                for fname in scissors_files[pic_index-2:pic_index]]</span><br><span class="line"></span><br><span class="line">for i, img_path in enumerate(next_rock+next_paper+next_scissors):</span><br><span class="line">  #print(img_path)</span><br><span class="line">  img &#x3D; mpimg.imread(img_path)</span><br><span class="line">  plt.imshow(img)</span><br><span class="line">  plt.axis(&#39;Off&#39;)</span><br><span class="line">  plt.show()</span><br></pre></td></tr></table></figure><p><img src="%E5%A4%9A%E5%88%86%E7%B1%BB6.png"></p><h3 id="5、训练数据准备"><a href="#5、训练数据准备" class="headerlink" title="5、训练数据准备"></a>5、训练数据准备</h3><p>虽然图像是300×300，设置图像生成器提供150×150方差. 它将即时调整图像的大小并增强训练目录中的图像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">train_datagen &#x3D; ImageDataGenerator(rescale&#x3D;1.&#x2F;255)</span><br><span class="line"></span><br><span class="line">train_generator &#x3D; train_datagen.flow_from_directory(</span><br><span class="line">        train_dir,</span><br><span class="line">        target_size&#x3D;(150,150),</span><br><span class="line">        batch_size&#x3D;128,</span><br><span class="line">        class_mode&#x3D;&#39;categorical&#39;) #多个类别</span><br></pre></td></tr></table></figure><h3 id="6、建立模型"><a href="#6、建立模型" class="headerlink" title="6、建立模型"></a>6、建立模型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">model &#x3D; tf.keras.models.Sequential([</span><br><span class="line">   </span><br><span class="line">    tf.keras.layers.Conv2D(16, (3,3), activation&#x3D;&#39;relu&#39;, input_shape&#x3D;(150, 150, 3)),</span><br><span class="line">    tf.keras.layers.MaxPooling2D(2, 2),</span><br><span class="line">    # The second convolution</span><br><span class="line">    tf.keras.layers.Conv2D(32, (3,3), activation&#x3D;&#39;relu&#39;),</span><br><span class="line">    tf.keras.layers.MaxPooling2D(2,2),</span><br><span class="line">    # The third convolution</span><br><span class="line">    tf.keras.layers.Conv2D(64, (3,3), activation&#x3D;&#39;relu&#39;),</span><br><span class="line">    tf.keras.layers.MaxPooling2D(2,2),</span><br><span class="line">    tf.keras.layers.Flatten(),</span><br><span class="line">    tf.keras.layers.Dense(512, activation&#x3D;&#39;relu&#39;),</span><br><span class="line">    tf.keras.layers.Dense(3, activation&#x3D;&#39;softmax&#39;) #三分类，softmax将所有的值转换为概率</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h3 id="7、模型编译"><a href="#7、模型编译" class="headerlink" title="7、模型编译"></a>7、模型编译</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">model.compile(loss &#x3D; &#39;categorical_crossentropy&#39;, #绝对交叉熵</span><br><span class="line">              optimizer&#x3D;RMSprop(lr&#x3D;0.001), </span><br><span class="line">              metrics&#x3D;[&#39;acc&#39;])</span><br></pre></td></tr></table></figure><h3 id="8、模型测试"><a href="#8、模型测试" class="headerlink" title="8、模型测试"></a>8、模型测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">from google.colab import files</span><br><span class="line">from keras.preprocessing import image</span><br><span class="line"></span><br><span class="line">uploaded &#x3D; files.upload()</span><br><span class="line"></span><br><span class="line">for fn in uploaded.keys():</span><br><span class="line"> </span><br><span class="line">  # predicting images</span><br><span class="line">  path &#x3D; fn</span><br><span class="line">  img &#x3D; image.load_img(path, target_size&#x3D;(150, 150))</span><br><span class="line">  x &#x3D; image.img_to_array(img)</span><br><span class="line">  x &#x3D; np.expand_dims(x, axis&#x3D;0)</span><br><span class="line"></span><br><span class="line">  images &#x3D; np.vstack([x])</span><br><span class="line">  classes &#x3D; model.predict(images, batch_size&#x3D;10)</span><br><span class="line">  print(fn)</span><br><span class="line">  print(classes)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2-5-多分类学习&quot;&gt;&lt;a href=&quot;#2-5-多分类学习&quot; class=&quot;headerlink&quot; title=&quot;2.5 多分类学习&quot;&gt;&lt;/a&gt;2.5 多分类学习&lt;/h1&gt;&lt;h2 id=&quot;1、数据相关&quot;&gt;&lt;a href=&quot;#1、数据相关&quot; class=&quot;head</summary>
      
    
    
    
    
    <category term="tensorflow" scheme="https://182.92.7.32/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>2.4 dropout</title>
    <link href="https://182.92.7.32/2021/02/04/2.4%20dropout/2.4%20dropout/"/>
    <id>https://182.92.7.32/2021/02/04/2.4%20dropout/2.4%20dropout/</id>
    <published>2021-02-04T13:20:14.000Z</published>
    <updated>2021-02-05T13:37:08.257Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2-4-dropout"><a href="#2-4-dropout" class="headerlink" title="2.4 dropout"></a>2.4 dropout</h1><p>keras 中还有另一种层dropout(神经网络中的层可能具有相似的权重，也有可能相互影响，从而导致过拟合 ,像这样的复杂模型，存在这样的风险 .)<br><img src="dropout1.png"><br>通过删除一些节点，使它看起来如下图，这样会使得节点相互之间影响不太大，可能消除过拟合<br><img src="dropout2.png"></p><h1 id="代码中实现"><a href="#代码中实现" class="headerlink" title="代码中实现"></a>代码中实现</h1><h2 id="1、之前的模型定义中添加dropout"><a href="#1、之前的模型定义中添加dropout" class="headerlink" title="1、之前的模型定义中添加dropout"></a>1、之前的模型定义中添加dropout</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">from tensorflow.keras.optimizers import RMSprop</span><br><span class="line"></span><br><span class="line"># Flatten the output layer to 1 dimension</span><br><span class="line">x &#x3D; layers.Flatten()(last_output)</span><br><span class="line"># Add a fully connected layer with 1,024 hidden units and ReLU activation</span><br><span class="line">x &#x3D; layers.Dense(1024, activation&#x3D;&#39;relu&#39;)(x)</span><br><span class="line"># Add a dropout rate of 0.2</span><br><span class="line">x &#x3D; layers.Dropout(0.2)(x)                  </span><br><span class="line"># Add a final sigmoid layer for classification</span><br><span class="line">x &#x3D; layers.Dense  (1, activation&#x3D;&#39;sigmoid&#39;)(x)           </span><br><span class="line"></span><br><span class="line">model &#x3D; Model( pre_trained_model.input, x) </span><br><span class="line"></span><br><span class="line">model.compile(optimizer &#x3D; RMSprop(lr&#x3D;0.0001), </span><br><span class="line">              loss &#x3D; &#39;binary_crossentropy&#39;, </span><br><span class="line">              metrics &#x3D; [&#39;acc&#39;])</span><br></pre></td></tr></table></figure><h2 id="2、dropout层"><a href="#2、dropout层" class="headerlink" title="2、dropout层"></a>2、dropout层</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x &#x3D; layers.Dropout(0.2)(x)</span><br></pre></td></tr></table></figure><p>参数在0-1之间，表示要丢弃的单位分数，这里我们要丢弃的是20%的神经元</p><h2 id="3、模型摘要部分展示"><a href="#3、模型摘要部分展示" class="headerlink" title="3、模型摘要部分展示"></a>3、模型摘要部分展示</h2><p><img src="dropout3.png"></p><h2 id="4、结果展示"><a href="#4、结果展示" class="headerlink" title="4、结果展示"></a>4、结果展示</h2><p>epochs=100；<br><img src="dropout4.png"><br>epochs=20;<br><img src="dropout5.png"><br>加入dropout层能很好的改善过拟合现象</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2-4-dropout&quot;&gt;&lt;a href=&quot;#2-4-dropout&quot; class=&quot;headerlink&quot; title=&quot;2.4 dropout&quot;&gt;&lt;/a&gt;2.4 dropout&lt;/h1&gt;&lt;p&gt;keras 中还有另一种层dropout(神经网络中的层可能具有相似</summary>
      
    
    
    
    
    <category term="tensorflow" scheme="https://182.92.7.32/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>2.3 迁移学习</title>
    <link href="https://182.92.7.32/2021/02/03/2.3%20%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0/2.3%20%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0/"/>
    <id>https://182.92.7.32/2021/02/03/2.3%20%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0/2.3%20%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-02-03T13:20:14.000Z</published>
    <updated>2021-02-05T13:36:44.749Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2-3-迁移学习"><a href="#2-3-迁移学习" class="headerlink" title="2.3 迁移学习"></a>2.3 迁移学习</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p>假设你的可视化模型如下图所示，在全连接层之前有一列的卷积层，把数据输入到最上层，神经网络学习到卷积能够识别的数据中的特征.<br><img src="%E5%8D%B7%E7%A7%AF%E5%B1%821.png"><br>考虑到别人的模型比你的要复杂得多，并且在更多的数据上训练过，它们有卷积层，同时还有原封不动的已经学习过的特征，所以可以把它们封装上.<br><img src="%E5%8D%B7%E7%A7%AF%E5%B1%822.png"><br><a href="https://blog.csdn.net/u010159842/article/details/79202107?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522159468849019725250137175%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=159468849019725250137175&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-1-79202107.first_rank_ecpm_v3_pc_rank_v2&utm_term=%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0">什么是迁移学习 (Transfer Learning)？这个领域历史发展前景如何？</a><br><a href="https://blog.csdn.net/wmsbeijing/article/details/78507055?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522159468849019725250137175%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=159468849019725250137175&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-78507055.first_rank_ecpm_v3_pc_rank_v2&utm_term=%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0">迁移学习全面概述</a></p><h2 id="2、猫狗识别"><a href="#2、猫狗识别" class="headerlink" title="2、猫狗识别"></a>2、猫狗识别</h2><h3 id="1、引入模型"><a href="#1、引入模型" class="headerlink" title="1、引入模型"></a>1、引入模型</h3><p>这里利用的是一个预训练模型—–Inception，这个模型在ImageNet上面经过了预训练 .<br><a href="https://arxiv.org/abs/1512.00567">预训练模型网站</a><br><a href="http://image-net.org/">ImageNet</a></p><h3 id="2、使用keras的API挑选层次"><a href="#2、使用keras的API挑选层次" class="headerlink" title="2、使用keras的API挑选层次"></a>2、使用keras的API挑选层次</h3><p>layers 去挑选层，并了解要使用的是哪些层，要重新训练的是哪些层 .</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line"></span><br><span class="line">from tensorflow.keras import layers</span><br><span class="line">from tensorflow.keras import Model</span><br></pre></td></tr></table></figure><h3 id="3、预先训练好的初始神经网络保存在该URL中"><a href="#3、预先训练好的初始神经网络保存在该URL中" class="headerlink" title="3、预先训练好的初始神经网络保存在该URL中"></a>3、预先训练好的初始神经网络保存在该URL中</h3><p>获取的参数可以加载到模型的框架里，把它变成一个训练过的模型.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;storage.googleapis.com&#x2F;mledu-datasets&#x2F;inception_v3_weights_tf_dim_ordering_tf_kernels</span><br></pre></td></tr></table></figure><h3 id="4、实例化模型"><a href="#4、实例化模型" class="headerlink" title="4、实例化模型"></a>4、实例化模型</h3><p>如果要使用Inception，刚好keras内置了模型定义，然后实例化模型—-数据所需的输入形状，并指定不利用内置权重，而是刚刚所下载的权重文件.</p><p>InceptionV3在顶部有全连接层，所以设置include_top = False<br>指定忽略全连接层，直接进入卷积.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from tensorflow.keras.applications.inception_v3 import InceptionV3</span><br><span class="line"></span><br><span class="line">local_weights_file &#x3D; &#39;&#x2F;tmp&#x2F;inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5&#39;</span><br><span class="line"></span><br><span class="line">pre_trained_model &#x3D; InceptionV3(input_shape &#x3D; (150, 150, 3), </span><br><span class="line">                                include_top &#x3D; False, </span><br><span class="line">                                weights &#x3D; None)</span><br><span class="line"></span><br><span class="line">pre_trained_model.load_weights(local_weights_file)</span><br></pre></td></tr></table></figure><h3 id="5、训练设置"><a href="#5、训练设置" class="headerlink" title="5、训练设置"></a>5、训练设置</h3><p>现在已经实例化了预训练模型，可以遍历它的层并封装它们，设置它们不使用此代码进行训练.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for layer in pre_trained_model.layers:</span><br><span class="line">  layer.trainable &#x3D; False</span><br></pre></td></tr></table></figure><h3 id="6、打印训练模型的摘要"><a href="#6、打印训练模型的摘要" class="headerlink" title="6、打印训练模型的摘要"></a>6、打印训练模型的摘要</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pre_trained_model.summary()</span><br></pre></td></tr></table></figure><p>模型太大，不太方便展示摘要.<br>所有图层都有名称，可以查找要使用的最后一层的名称.<br>查看摘要，会看到最底层已卷积为3×3<br><img src="%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A01.png"><br>想使用一些更多信息，向上移动模型描述找到mixed7，它是很多的7×7卷积的输出，也可以使用其他层.<br><img src="%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A02.png"></p><h3 id="7、提取预训练模型的某一层"><a href="#7、提取预训练模型的某一层" class="headerlink" title="7、提取预训练模型的某一层"></a>7、提取预训练模型的某一层</h3><p>这段代码中提取了mixed7层，并将其输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">last_layer &#x3D; pre_trained_model.get_layer(&#39;mixed7&#39;)</span><br><span class="line"></span><br><span class="line">last_output &#x3D; last_layer.output</span><br></pre></td></tr></table></figure><h3 id="8、定义新模型"><a href="#8、定义新模型" class="headerlink" title="8、定义新模型"></a>8、定义新模型</h3><p>从Inception模型的mixed7层获取输出，称为last_output .<br>(这里采用了layers API的另一种方式)<br>首先将输入(Inception的输出)展平;<br>然后添加一个密集的隐藏层;<br>输出层只有一个神经元，由s型激活以在两个项目之间进行分类;<br>使用Model抽象类创建一个模型，并传递刚才创建的输入和图层定义;<br>然后使用优化器和损失函数编译模型，并收集想要的指标.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from tensorflow.keras.optimizers import RMSprop</span><br><span class="line"></span><br><span class="line">x &#x3D; layers.Flatten()(last_output)</span><br><span class="line">x &#x3D; layers.Dense(1024, activation&#x3D;&#39;relu&#39;)(x)              </span><br><span class="line">x &#x3D; layers.Dense(1, activation&#x3D;&#39;sigmoid&#39;)(x)           </span><br><span class="line"></span><br><span class="line">model &#x3D; Model( pre_trained_model.input, x) </span><br><span class="line">model.compile(optimizer &#x3D; RMSprop(lr&#x3D;0.0001), </span><br><span class="line">              loss &#x3D; &#39;binary_crossentropy&#39;, </span><br><span class="line">              metrics &#x3D; [&#39;acc&#39;])</span><br></pre></td></tr></table></figure><h3 id="9、使用ImageDataGenerator增强图像"><a href="#9、使用ImageDataGenerator增强图像" class="headerlink" title="9、使用ImageDataGenerator增强图像"></a>9、使用ImageDataGenerator增强图像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">train_datagen &#x3D; ImageDataGenerator(rescale &#x3D; 1.&#x2F;255.,</span><br><span class="line">                                   rotation_range &#x3D; 40,</span><br><span class="line">                                   width_shift_range &#x3D; 0.2,</span><br><span class="line">                                   height_shift_range &#x3D; 0.2,</span><br><span class="line">                                   shear_range &#x3D; 0.2,</span><br><span class="line">                                   zoom_range &#x3D; 0.2,</span><br><span class="line">                                   horizontal_flip &#x3D; True)</span><br></pre></td></tr></table></figure><h3 id="10、训练数据"><a href="#10、训练数据" class="headerlink" title="10、训练数据"></a>10、训练数据</h3><p>利用生成器获取训练数据，从指定目录的图像到增强的图像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">train_generator &#x3D; train_datagen.flow_from_directory(train_dir,</span><br><span class="line">                                                    batch_size &#x3D; 20,</span><br><span class="line">                                                    class_mode &#x3D; &#39;binary&#39;, </span><br><span class="line">                                                    target_size &#x3D; (150, 150)) </span><br></pre></td></tr></table></figure><p>使用model.fit_gengrator进行训练</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">history &#x3D; model.fit_generator(</span><br><span class="line">train_generator,</span><br><span class="line">  validation_data &#x3D; validation_generator,</span><br><span class="line">steps_per_epoch&#x3D;100,</span><br><span class="line">epochs&#x3D;100,</span><br><span class="line">validation_steps &#x3D; 50,</span><br><span class="line">verbose&#x3D;2</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="11、训练结果"><a href="#11、训练结果" class="headerlink" title="11、训练结果"></a>11、训练结果</h3><p><img src="%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A03.png"><br>刚开始的时候两者精度差不多，后面验证集上的精度开始偏离了训练集的精度，最后还是产生了过拟合.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2-3-迁移学习&quot;&gt;&lt;a href=&quot;#2-3-迁移学习&quot; class=&quot;headerlink&quot; title=&quot;2.3 迁移学习&quot;&gt;&lt;/a&gt;2.3 迁移学习&lt;/h1&gt;&lt;h2 id=&quot;1、简介&quot;&gt;&lt;a href=&quot;#1、简介&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
    <category term="tensorflow" scheme="https://182.92.7.32/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>2.2 图像增强和数据增强</title>
    <link href="https://182.92.7.32/2021/02/03/2.2%20%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%E5%92%8C%E6%95%B0%E6%8D%AE%E5%A2%9E%E5%BC%BA/2.2%20%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%E5%92%8C%E6%95%B0%E6%8D%AE%E5%A2%9E%E5%BC%BA/"/>
    <id>https://182.92.7.32/2021/02/03/2.2%20%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%E5%92%8C%E6%95%B0%E6%8D%AE%E5%A2%9E%E5%BC%BA/2.2%20%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%E5%92%8C%E6%95%B0%E6%8D%AE%E5%A2%9E%E5%BC%BA/</id>
    <published>2021-02-03T13:15:14.000Z</published>
    <updated>2021-02-09T15:21:51.438Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2-2-图像增强和数据增强"><a href="#2-2-图像增强和数据增强" class="headerlink" title="2.2 图像增强和数据增强"></a>2.2 图像增强和数据增强</h1><p>图像生成器，图像数据生成器，处理数据集并进行扩充(旋转，倾斜，扭曲)<br>tensorflow中的数据增强，且不会改变原数据<br>当数据集很少时，通过数据增强扩充数据集</p><h2 id="1、增强"><a href="#1、增强" class="headerlink" title="1、增强"></a>1、增强</h2><p>当使用卷积神经网络时，我们一直在进行卷积图片以学习特定的功能，卷积非常擅长发现图像中清晰明显的特征，假如图片倾斜，如果模型之前没有训练过倾斜猫耳的数据的话，则可能无法识别猫</p><h2 id="2、图片生成器完成增强"><a href="#2、图片生成器完成增强" class="headerlink" title="2、图片生成器完成增强"></a>2、图片生成器完成增强</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_datagen &#x3D; ImageDataGenerator(rescale&#x3D;1.&#x2F;255)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">train_datagen &#x3D; ImageDataGenerator(</span><br><span class="line">      rescale&#x3D;1.&#x2F;255,</span><br><span class="line">      rotation_range&#x3D;40,</span><br><span class="line">      width_shift_range&#x3D;0.2,</span><br><span class="line">      height_shift_range&#x3D;0.2,</span><br><span class="line">      shear_range&#x3D;0.2,</span><br><span class="line">      zoom_range&#x3D;0.2,</span><br><span class="line">      horizontal_flip&#x3D;True,</span><br><span class="line">      fill_mode&#x3D;&#39;nearest&#39;)</span><br></pre></td></tr></table></figure><p>之前学的图像生成器就有图像增强的功能，上面代码中已经完成了一点图像增强的功能—-图像加载的时候就可以完成重新缩放  </p><p>上面提供了一些图像增强的选项:</p><ul><li>重新缩放；</li><li>旋转范围是从0-180，用于随机旋转图像，上述代码中图像将旋转介于0-40度之间的随机数；</li><li>移位: 将图像在其框架内移动，参数指定为图像尺寸的一部分，随机移动物体多少(水平和垂直方向)；</li><li>剪切shear图像的20%；</li><li>缩放(Zoom)，变焦为一个随机量，最多为图像尺寸的20%；</li><li>随机水平翻转；</li><li>填充.<br><a href="https://blog.csdn.net/qq_27825451/article/details/90056896">keras的图像预处理全攻略（二）—— ImageDataGenerator 类</a>  </li></ul><h2 id="3、猫狗训练集对比"><a href="#3、猫狗训练集对比" class="headerlink" title="3、猫狗训练集对比"></a>3、猫狗训练集对比</h2><h3 id="1、更长的时间使用较小的数量集"><a href="#1、更长的时间使用较小的数量集" class="headerlink" title="1、更长的时间使用较小的数量集"></a>1、更长的时间使用较小的数量集</h3><p>epochs=100；不采用图像增强<br><img src="%E8%BE%83%E5%B0%8F%E6%95%B0%E9%87%8F%E9%9B%86.png"><br>存在过拟合现象: 训练集的精度达到了100%，而验证集的才70%~80%.  </p><h3 id="2、训练中添加图像增强"><a href="#2、训练中添加图像增强" class="headerlink" title="2、训练中添加图像增强"></a>2、训练中添加图像增强</h3><p>训练初期的精度不如非增强版的原因: 代码正在执行图像增强.<br><img src="%E6%B7%BB%E5%8A%A0%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA.png"><br>解决了过拟合问题.  </p><h2 id="4、人马训练集对比-添加图像增强"><a href="#4、人马训练集对比-添加图像增强" class="headerlink" title="4、人马训练集对比(添加图像增强)"></a>4、人马训练集对比(添加图像增强)</h2><p>图像增强并不能解决所有的过拟合问题.<br><img src="%E4%BA%BA%E9%A9%AC%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA.png">  </p><ul><li>训练集上的精度在稳定地上升，而验证集上的在不断地波动；</li><li>图像增强给训练图像引入了随机元素，但是如果验证集没有相同的随机性，就会出现上图中这样的波动；</li><li>不仅需要大量的图像进行培训，同时也需要它们进行测试，否则图像增强没有太大的帮助.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2-2-图像增强和数据增强&quot;&gt;&lt;a href=&quot;#2-2-图像增强和数据增强&quot; class=&quot;headerlink&quot; title=&quot;2.2 图像增强和数据增强&quot;&gt;&lt;/a&gt;2.2 图像增强和数据增强&lt;/h1&gt;&lt;p&gt;图像生成器，图像数据生成器，处理数据集并进行扩充(旋</summary>
      
    
    
    
    
    <category term="tensorflow" scheme="https://182.92.7.32/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>2.1 猫狗识别</title>
    <link href="https://182.92.7.32/2021/02/02/2.1%20%E7%8C%AB%E7%8B%97%E8%AF%86%E5%88%AB/2.1%20%E7%8C%AB%E7%8B%97%E8%AF%86%E5%88%AB/"/>
    <id>https://182.92.7.32/2021/02/02/2.1%20%E7%8C%AB%E7%8B%97%E8%AF%86%E5%88%AB/2.1%20%E7%8C%AB%E7%8B%97%E8%AF%86%E5%88%AB/</id>
    <published>2021-02-02T14:20:14.000Z</published>
    <updated>2021-02-05T13:35:25.022Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2-1-猫狗识别"><a href="#2-1-猫狗识别" class="headerlink" title="2.1 猫狗识别"></a>2.1 猫狗识别</h1><h2 id="1、下载图片"><a href="#1、下载图片" class="headerlink" title="1、下载图片"></a>1、下载图片</h2><p>它们存储为zip文件，其中包含3000张图片，我们将其中的2000张用于训练，1000张用于测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">!wget --no-check-certificate \</span><br><span class="line">  https:&#x2F;&#x2F;storage.googleapis.com&#x2F;mledu-datasets&#x2F;cats_and_dogs_filtered.zip \</span><br><span class="line">  -O &#x2F;tmp&#x2F;cats_and_dogs_filtered.zip</span><br></pre></td></tr></table></figure><h2 id="2、文件解压"><a href="#2、文件解压" class="headerlink" title="2、文件解压"></a>2、文件解压</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import zipfile</span><br><span class="line"></span><br><span class="line">local_zip &#x3D; &#39;&#x2F;tmp&#x2F;cats_and_dogs_filtered.zip&#39;</span><br><span class="line"></span><br><span class="line">zip_ref &#x3D; zipfile.ZipFile(local_zip, &#39;r&#39;)</span><br><span class="line"></span><br><span class="line">zip_ref.extractall(&#39;&#x2F;tmp&#39;)</span><br><span class="line">zip_ref.close()</span><br></pre></td></tr></table></figure><h2 id="3、设置目录"><a href="#3、设置目录" class="headerlink" title="3、设置目录"></a>3、设置目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">base_dir &#x3D; &#39;&#x2F;tmp&#x2F;cats_and_dogs_filtered&#39;</span><br><span class="line"></span><br><span class="line">train_dir &#x3D; os.path.join(base_dir, &#39;train&#39;)</span><br><span class="line">validation_dir &#x3D; os.path.join(base_dir, &#39;validation&#39;)</span><br><span class="line"></span><br><span class="line"># Directory with our training cat&#x2F;dog pictures</span><br><span class="line">train_cats_dir &#x3D; os.path.join(train_dir, &#39;cats&#39;)</span><br><span class="line">train_dogs_dir &#x3D; os.path.join(train_dir, &#39;dogs&#39;)</span><br><span class="line"></span><br><span class="line"># Directory with our validation cat&#x2F;dog pictures</span><br><span class="line">validation_cats_dir &#x3D; os.path.join(validation_dir, &#39;cats&#39;)</span><br><span class="line">validation_dogs_dir &#x3D; os.path.join(validation_dir, &#39;dogs&#39;)</span><br></pre></td></tr></table></figure><h2 id="4、查看图片路径"><a href="#4、查看图片路径" class="headerlink" title="4、查看图片路径"></a>4、查看图片路径</h2><p>将这些变量传给os.listdir，从这些目录中提取文件，并将它们加载到python列表中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">train_cat_fnames &#x3D; os.listdir( train_cats_dir )</span><br><span class="line">train_dog_fnames &#x3D; os.listdir( train_dogs_dir )</span><br><span class="line"></span><br><span class="line">print(train_cat_fnames[:10])</span><br><span class="line">print(train_dog_fnames[:10])</span><br></pre></td></tr></table></figure><p><img src="%E6%A0%87%E7%AD%BE.png"></p><h2 id="5、查看图片数量"><a href="#5、查看图片数量" class="headerlink" title="5、查看图片数量"></a>5、查看图片数量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(&#39;total training cat images :&#39;, len(os.listdir(      train_cats_dir ) ))</span><br><span class="line">print(&#39;total training dog images :&#39;, len(os.listdir(      train_dogs_dir ) ))</span><br><span class="line"></span><br><span class="line">print(&#39;total validation cat images :&#39;, len(os.listdir( validation_cats_dir ) ))</span><br><span class="line">print(&#39;total validation dog images :&#39;, len(os.listdir( validation_dogs_dir ) ))</span><br></pre></td></tr></table></figure><p><img src="%E6%95%B0%E9%87%8F.png"></p><h2 id="6、图像可视化"><a href="#6、图像可视化" class="headerlink" title="6、图像可视化"></a>6、图像可视化</h2><p>随机挑选一些图片，并绘制在网格中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.image as mpimg</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line"># Parameters for our graph; we&#39;ll output images in a 4x4 configuration</span><br><span class="line">nrows &#x3D; 4</span><br><span class="line">ncols &#x3D; 4</span><br><span class="line"></span><br><span class="line">pic_index &#x3D; 0 # Index for iterating over images</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">fig &#x3D; plt.gcf()</span><br><span class="line">fig.set_size_inches(ncols*4, nrows*4)</span><br><span class="line"></span><br><span class="line">pic_index+&#x3D;8</span><br><span class="line"></span><br><span class="line">next_cat_pix &#x3D; [os.path.join(train_cats_dir, fname) </span><br><span class="line">                for fname in train_cat_fnames[ pic_index-8:pic_index] </span><br><span class="line">               ]</span><br><span class="line"></span><br><span class="line">next_dog_pix &#x3D; [os.path.join(train_dogs_dir, fname) </span><br><span class="line">                for fname in train_dog_fnames[ pic_index-8:pic_index]</span><br><span class="line">               ]</span><br><span class="line"></span><br><span class="line">for i, img_path in enumerate(next_cat_pix+next_dog_pix):</span><br><span class="line">  # Set up subplot; subplot indices start at 1</span><br><span class="line">  sp &#x3D; plt.subplot(nrows, ncols, i + 1)</span><br><span class="line">  sp.axis(&#39;Off&#39;) # Don&#39;t show axes (or gridlines)</span><br><span class="line"></span><br><span class="line">  img &#x3D; mpimg.imread(img_path)</span><br><span class="line">  plt.imshow(img)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="%E6%8C%91%E9%80%89.png"></p><h2 id="7、搭建神经网络模型"><a href="#7、搭建神经网络模型" class="headerlink" title="7、搭建神经网络模型"></a>7、搭建神经网络模型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">model &#x3D; tf.keras.models.Sequential([</span><br><span class="line">    # Note the input shape is the desired size of the image 150x150 with 3 bytes color</span><br><span class="line">    tf.keras.layers.Conv2D(16, (3,3), activation&#x3D;&#39;relu&#39;, input_shape&#x3D;(150, 150, 3)),</span><br><span class="line">    tf.keras.layers.MaxPooling2D(2,2),</span><br><span class="line">    tf.keras.layers.Conv2D(32, (3,3), activation&#x3D;&#39;relu&#39;),</span><br><span class="line">    tf.keras.layers.MaxPooling2D(2,2), </span><br><span class="line">    tf.keras.layers.Conv2D(64, (3,3), activation&#x3D;&#39;relu&#39;), </span><br><span class="line">    tf.keras.layers.MaxPooling2D(2,2),</span><br><span class="line">    # Flatten the results to feed into a DNN</span><br><span class="line">    tf.keras.layers.Flatten(), </span><br><span class="line">    # 512 neuron hidden layer</span><br><span class="line">    tf.keras.layers.Dense(512, activation&#x3D;&#39;relu&#39;), </span><br><span class="line">    # Only 1 output neuron. It will contain a value from 0-1 where 0 for 1 class (&#39;cats&#39;) and 1 for the other (&#39;dogs&#39;)</span><br><span class="line">    tf.keras.layers.Dense(1, activation&#x3D;&#39;sigmoid&#39;)  </span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">model.summary()</span><br></pre></td></tr></table></figure><p><img src="summary.png"></p><h2 id="8、编译模型"><a href="#8、编译模型" class="headerlink" title="8、编译模型"></a>8、编译模型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from tensorflow.keras.optimizers import RMSprop</span><br><span class="line"></span><br><span class="line">model.compile(optimizer&#x3D;RMSprop(lr&#x3D;0.001),</span><br><span class="line">              loss&#x3D;&#39;binary_crossentropy&#39;,</span><br><span class="line">              metrics &#x3D; [&#39;acc&#39;])</span><br></pre></td></tr></table></figure><h2 id="9、生成器"><a href="#9、生成器" class="headerlink" title="9、生成器"></a>9、生成器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">from tensorflow.keras.preprocessing.image import ImageDataGenerator</span><br><span class="line"></span><br><span class="line"># All images will be rescaled by 1.&#x2F;255.</span><br><span class="line">train_datagen &#x3D; ImageDataGenerator( rescale &#x3D; 1.0&#x2F;255. )</span><br><span class="line">test_datagen  &#x3D; ImageDataGenerator( rescale &#x3D; 1.0&#x2F;255. )</span><br><span class="line"></span><br><span class="line"># --------------------</span><br><span class="line"># Flow training images in batches of 20 using train_datagen generator</span><br><span class="line"># --------------------</span><br><span class="line">train_generator &#x3D; train_datagen.flow_from_directory(train_dir,</span><br><span class="line">                                                    batch_size&#x3D;20,</span><br><span class="line">                                                    class_mode&#x3D;&#39;binary&#39;,</span><br><span class="line">                                                    target_size&#x3D;(150, 150))     </span><br><span class="line"># --------------------</span><br><span class="line"># Flow validation images in batches of 20 using test_datagen generator</span><br><span class="line"># --------------------</span><br><span class="line">validation_generator &#x3D;  test_datagen.flow_from_directory(validation_dir,</span><br><span class="line">                                                         batch_size&#x3D;20,</span><br><span class="line">                                                         class_mode  &#x3D; &#39;binary&#39;,</span><br><span class="line">                                                         target_size &#x3D; (150, 150))</span><br></pre></td></tr></table></figure><p><img src="%E7%94%9F%E6%88%90%E5%99%A8.png"></p><h2 id="10、模型训练"><a href="#10、模型训练" class="headerlink" title="10、模型训练"></a>10、模型训练</h2><p>数据源是生成器，所以训练用的是model.fit_generator</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">validation_data&#x3D;validation_generator,</span><br><span class="line">steps_per_epoch&#x3D;100,</span><br><span class="line">epochs&#x3D;15,</span><br><span class="line">validation_steps&#x3D;50,</span><br><span class="line">verbose&#x3D;2)</span><br></pre></td></tr></table></figure><p><img src="%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83.png"></p><h2 id="11、模型测试"><a href="#11、模型测试" class="headerlink" title="11、模型测试"></a>11、模型测试</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">from google.colab import files</span><br><span class="line">from keras.preprocessing import image</span><br><span class="line"></span><br><span class="line">uploaded&#x3D;files.upload()</span><br><span class="line"></span><br><span class="line">for fn in uploaded.keys():</span><br><span class="line"> </span><br><span class="line">  # predicting images</span><br><span class="line">  path&#x3D;&#39;&#x2F;content&#x2F;&#39; + fn</span><br><span class="line">  img&#x3D;image.load_img(path, target_size&#x3D;(150, 150))</span><br><span class="line">  </span><br><span class="line">  x&#x3D;image.img_to_array(img)</span><br><span class="line">  x&#x3D;np.expand_dims(x, axis&#x3D;0)</span><br><span class="line">  images &#x3D; np.vstack([x])</span><br><span class="line">  </span><br><span class="line">  classes &#x3D; model.predict(images, batch_size&#x3D;10)</span><br><span class="line">  </span><br><span class="line">  print(classes[0])</span><br><span class="line">  </span><br><span class="line">  if classes[0]&gt;0:</span><br><span class="line">    print(fn + &quot; is a dog&quot;)</span><br><span class="line">    </span><br><span class="line">  else:</span><br><span class="line">    print(fn + &quot; is a cat&quot;)</span><br></pre></td></tr></table></figure><p><img src="%E6%A8%A1%E5%9E%8B%E6%B5%8B%E8%AF%95.png"></p><h2 id="12、可视化卷积中间结果图"><a href="#12、可视化卷积中间结果图" class="headerlink" title="12、可视化卷积中间结果图"></a>12、可视化卷积中间结果图</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import random</span><br><span class="line">from   tensorflow.keras.preprocessing.image import img_to_array, load_img</span><br><span class="line"></span><br><span class="line"># Let&#39;s define a new Model that will take an image as input, and will output</span><br><span class="line"># intermediate representations for all layers in the previous model after</span><br><span class="line"># the first.</span><br><span class="line">successive_outputs &#x3D; [layer.output for layer in model.layers[1:]]</span><br><span class="line"></span><br><span class="line">#visualization_model &#x3D; Model(img_input, successive_outputs)</span><br><span class="line">visualization_model &#x3D; tf.keras.models.Model(inputs &#x3D; model.input, outputs &#x3D; successive_outputs)</span><br><span class="line"></span><br><span class="line"># Let&#39;s prepare a random input image of a cat or dog from the training set.</span><br><span class="line">cat_img_files &#x3D; [os.path.join(train_cats_dir, f) for f in train_cat_fnames]</span><br><span class="line">dog_img_files &#x3D; [os.path.join(train_dogs_dir, f) for f in train_dog_fnames]</span><br><span class="line"></span><br><span class="line">img_path &#x3D; random.choice(cat_img_files + dog_img_files)</span><br><span class="line">img &#x3D; load_img(img_path, target_size&#x3D;(150, 150))  # this is a PIL image</span><br><span class="line"></span><br><span class="line">x   &#x3D; img_to_array(img)                           # Numpy array with shape (150, 150, 3)</span><br><span class="line">x   &#x3D; x.reshape((1,) + x.shape)                   # Numpy array with shape (1, 150, 150, 3)</span><br><span class="line"></span><br><span class="line"># Rescale by 1&#x2F;255</span><br><span class="line">x &#x2F;&#x3D; 255.0</span><br><span class="line"></span><br><span class="line"># Let&#39;s run our image through our network, thus obtaining all</span><br><span class="line"># intermediate representations for this image.</span><br><span class="line">successive_feature_maps &#x3D; visualization_model.predict(x)</span><br><span class="line"></span><br><span class="line"># These are the names of the layers, so can have them as part of our plot</span><br><span class="line">layer_names &#x3D; [layer.name for layer in model.layers]</span><br><span class="line"></span><br><span class="line"># -----------------------------------------------------------------------</span><br><span class="line"># Now let&#39;s display our representations</span><br><span class="line"># -----------------------------------------------------------------------</span><br><span class="line">for layer_name, feature_map in zip(layer_names, successive_feature_maps):</span><br><span class="line">  </span><br><span class="line">  if len(feature_map.shape) &#x3D;&#x3D; 4:</span><br><span class="line">    </span><br><span class="line">    #-------------------------------------------</span><br><span class="line">    # Just do this for the conv &#x2F; maxpool layers, not the fully-connected layers</span><br><span class="line">    #-------------------------------------------</span><br><span class="line">    n_features &#x3D; feature_map.shape[-1]  # number of features in the feature map</span><br><span class="line">    size       &#x3D; feature_map.shape[ 1]  # feature map shape (1, size, size, n_features)</span><br><span class="line">    </span><br><span class="line">    # We will tile our images in this matrix</span><br><span class="line">    display_grid &#x3D; np.zeros((size, size * n_features))</span><br><span class="line">    </span><br><span class="line">    #-------------------------------------------------</span><br><span class="line">    # Postprocess the feature to be visually palatable</span><br><span class="line">    #-------------------------------------------------</span><br><span class="line">    for i in range(n_features):</span><br><span class="line">      x  &#x3D; feature_map[0, :, :, i]</span><br><span class="line">      x -&#x3D; x.mean()</span><br><span class="line">      x &#x2F;&#x3D; x.std ()</span><br><span class="line">      x *&#x3D;  64</span><br><span class="line">      x +&#x3D; 128</span><br><span class="line">      x  &#x3D; np.clip(x, 0, 255).astype(&#39;uint8&#39;)</span><br><span class="line">      display_grid[:, i * size : (i + 1) * size] &#x3D; x # Tile each filter into a horizontal grid</span><br><span class="line"></span><br><span class="line">    #-----------------</span><br><span class="line">    # Display the grid</span><br><span class="line">    #-----------------</span><br><span class="line"></span><br><span class="line">    scale &#x3D; 20. &#x2F; n_features</span><br><span class="line">    plt.figure( figsize&#x3D;(scale * n_features, scale) )</span><br><span class="line">    plt.title ( layer_name )</span><br><span class="line">    plt.grid  ( False )</span><br><span class="line">    plt.imshow( display_grid, aspect&#x3D;&#39;auto&#39;, cmap&#x3D;&#39;viridis&#39; ) </span><br></pre></td></tr></table></figure><p><img src="%E5%8F%AF%E8%A7%86%E5%8C%96%E5%8D%B7%E7%A7%AF%E4%B8%AD%E9%97%B4%E7%BB%93%E6%9E%9C%E5%9B%BE.png"></p><h2 id="13、评估模型的精度和损失"><a href="#13、评估模型的精度和损失" class="headerlink" title="13、评估模型的精度和损失"></a>13、评估模型的精度和损失</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">acc      &#x3D; history.history[     &#39;acc&#39; ]</span><br><span class="line">val_acc  &#x3D; history.history[ &#39;val_acc&#39; ]</span><br><span class="line">loss     &#x3D; history.history[    &#39;loss&#39; ]</span><br><span class="line">val_loss &#x3D; history.history[&#39;val_loss&#39; ]</span><br><span class="line"></span><br><span class="line">epochs   &#x3D; range(len(acc)) # Get number of epochs</span><br><span class="line"></span><br><span class="line">#------------------------------------------------</span><br><span class="line"># Plot training and validation accuracy per epoch</span><br><span class="line">#------------------------------------------------</span><br><span class="line">plt.plot  ( epochs,     acc )</span><br><span class="line">plt.plot  ( epochs, val_acc )</span><br><span class="line">plt.title (&#39;Training and validation accuracy&#39;)</span><br><span class="line">plt.figure()</span><br><span class="line"></span><br><span class="line">#------------------------------------------------</span><br><span class="line"># Plot training and validation loss per epoch</span><br><span class="line">#------------------------------------------------</span><br><span class="line">plt.plot  ( epochs,     loss )</span><br><span class="line">plt.plot  ( epochs, val_loss )</span><br><span class="line">plt.title (&#39;Training and validation loss&#39;   )</span><br></pre></td></tr></table></figure><p><img src="%E8%AF%84%E4%BC%B0.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2-1-猫狗识别&quot;&gt;&lt;a href=&quot;#2-1-猫狗识别&quot; class=&quot;headerlink&quot; title=&quot;2.1 猫狗识别&quot;&gt;&lt;/a&gt;2.1 猫狗识别&lt;/h1&gt;&lt;h2 id=&quot;1、下载图片&quot;&gt;&lt;a href=&quot;#1、下载图片&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="tensorflow" scheme="https://182.92.7.32/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>部署阿里云</title>
    <link href="https://182.92.7.32/2021/01/30/%E9%83%A8%E7%BD%B2%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    <id>https://182.92.7.32/2021/01/30/%E9%83%A8%E7%BD%B2%E9%98%BF%E9%87%8C%E4%BA%91/</id>
    <published>2021-01-30T15:09:14.000Z</published>
    <updated>2021-02-05T13:35:00.385Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、购买域名和服务器"><a href="#1、购买域名和服务器" class="headerlink" title="1、购买域名和服务器"></a>1、购买域名和服务器</h1><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>域名申请需要1-2天，域名备案需要在域名申请后的2-3天之后提交<br>网站解析是通过将域名指向网站的服务器IP地址，实现网站可访问的服务。</p><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p>centos8.2</p><h1 id="2、配置服务器环境"><a href="#2、配置服务器环境" class="headerlink" title="2、配置服务器环境"></a>2、配置服务器环境</h1><p>1、远程连接–客户端–设置root密码Bb928382191<br>2、选择远程连接，启动centos<br>3、su切换至root用户进行安装<br>4、因为hexo需要 nginx 作为服务器，我们可以直使用 yum 命令进行安装<br>yum install -y nginx<br>5、启动服务器<br>systemctl start nginx<br>systemctl enable nginx<br>6、安装成功后centos下边框会显示公网ip，打开公网ip显示nginx则说明安装成功</p><p>CentOS：ECDSA host key “ip地址” for has changed and you have requested strict checking</p><p>北上广不相信眼泪 2019-03-01 11:11:23  2507  收藏 1<br>分类专栏： centos<br>Linux SSH命令错误：ECDSA host key “ip地址” for  has changed and you have requested strict checking.记录下方便记忆。</p><p>解决方案：在终端上输入以下命令：</p><p>ssh-keygen -R “你的远程服务器ip地址”  </p><p>目的是清除你当前机器里关于你的远程服务器的缓存和公钥信息，注意是大写的字母“R”。</p><p>原因分析：根据个人的情况，原因是我的云服务器重装了系统（清除了与我本地SSH连接协议相关信息），本地的SSH信息便失效了，使用SSH连接相同的ip地址时使用的是失效的协议信息，所以会报错，使用上述命令便可以清除known_hosts里旧缓存文件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1、购买域名和服务器&quot;&gt;&lt;a href=&quot;#1、购买域名和服务器&quot; class=&quot;headerlink&quot; title=&quot;1、购买域名和服务器&quot;&gt;&lt;/a&gt;1、购买域名和服务器&lt;/h1&gt;&lt;h2 id=&quot;域名&quot;&gt;&lt;a href=&quot;#域名&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="website" scheme="https://182.92.7.32/tags/website/"/>
    
  </entry>
  
  <entry>
    <title>tensorflow搭建人工神经网络</title>
    <link href="https://182.92.7.32/2021/01/29/tensorflow/tensorflow%E6%90%AD%E5%BB%BA%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <id>https://182.92.7.32/2021/01/29/tensorflow/tensorflow%E6%90%AD%E5%BB%BA%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</id>
    <published>2021-01-29T13:10:14.000Z</published>
    <updated>2021-02-05T13:34:26.885Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2021-1-29"><a href="#2021-1-29" class="headerlink" title="2021/1/29"></a>2021/1/29</h1><p>人工神经网络通过正向和反向传播来更新神经元，从而形成更好的神经系统<br>输入端–黑盒–输出端<br>输入端为特征，经过神经第一层加工后为代表特征，再经过神经层后，将一种代表特征转化为另一种代表特征</p><h1 id="2021-1-31第一课-基于tensorflow2-0的人工只能、机器学习和深度学习简介"><a href="#2021-1-31第一课-基于tensorflow2-0的人工只能、机器学习和深度学习简介" class="headerlink" title="2021/1/31第一课(基于tensorflow2.0的人工只能、机器学习和深度学习简介)"></a>2021/1/31第一课(基于tensorflow2.0的人工只能、机器学习和深度学习简介)</h1><h2 id="1、用x，y的值并找出他们直接的关系"><a href="#1、用x，y的值并找出他们直接的关系" class="headerlink" title="1、用x，y的值并找出他们直接的关系"></a>1、用x，y的值并找出他们直接的关系</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Sequential 模型结构： 层（layers）的线性堆栈</span><br><span class="line">第一层，带一个神经元和一个输入层</span><br><span class="line">model &#x3D; keras.Sequential([keras.layers.Dense(units&#x3D;1,input_shape&#x3D;[1])])</span><br><span class="line"></span><br><span class="line">#进行第一次猜测，然后将损失率loss给优化器sgd（梯度下降），以便进行下次猜测</span><br><span class="line">model.compile(optimizer&#x3D;&#39;sgd&#39;,loss&#x3D;&#39;mean_squarer_error&#39;)</span><br><span class="line"></span><br><span class="line">#已知数据</span><br><span class="line">xs &#x3D; np.array([-1.0, 0.0, 1.0, 2.0, 3.0, 4.0], dtype&#x3D;float)</span><br><span class="line">ys &#x3D; np.array([-3.0, -1.0, 1.0, 3.0, 5.0, 7.0], dtype&#x3D;float)</span><br><span class="line"></span><br><span class="line">#训练在fit命令中进行,进行500次训练循环</span><br><span class="line">model.fit(xs, ys, epochs&#x3D;500)</span><br><span class="line"></span><br><span class="line">#输出训练模型</span><br><span class="line">print(model.predict([10.0]))</span><br></pre></td></tr></table></figure><h1 id="2021-2-1"><a href="#2021-2-1" class="headerlink" title="2021/2/1"></a>2021/2/1</h1><h2 id="2、创建一个神经网络，其具备基础的计算机视觉能力来识别不同的服装目标"><a href="#2、创建一个神经网络，其具备基础的计算机视觉能力来识别不同的服装目标" class="headerlink" title="2、创建一个神经网络，其具备基础的计算机视觉能力来识别不同的服装目标"></a>2、创建一个神经网络，其具备基础的计算机视觉能力来识别不同的服装目标</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">from tensorflow import keras</span><br><span class="line"></span><br><span class="line">fashion_mnist &#x3D; keras.datasets.fashion_mnist</span><br><span class="line"></span><br><span class="line">#在keras的数据库中申明一个类型为mnist的对象</span><br><span class="line">#在这个对象中，我们调用load_data的方法会返回4个列表：训练数据，训练标签，测试数据，测试标签,用数字代表输出结果(数字9代表靴子)</span><br><span class="line">(train_images, train_labels), (test_images, test_labels) &#x3D; fashion_mnist.load_data() </span><br><span class="line"></span><br><span class="line">#三层</span><br><span class="line">#第一层为扁平层，输入形状是28x28，扁平层将28x28的正方形变为一个简单的线性阵列</span><br><span class="line">#中间层的神经元会负载参数W，通过W的调整就可以得到所有数据都满足给定的，比如给定的数据是一个鞋子，那么要通过调整所有W参数，直到得到其值是9.</span><br><span class="line">#最后一层为10个神经元，因为我们的数据集有10类服装</span><br><span class="line">model &#x3D; keras.Sequential([</span><br><span class="line">    keras.layers.Flatten(imput_shape&#x3D;(28,28)),</span><br><span class="line">    keras.layers.Dense(128, activation&#x3D;tf.nn.relu)</span><br><span class="line">    keras.layers.Dense(10,activation&#x3D;tf.nn.softmax)</span><br><span class="line">])</span><br></pre></td></tr></table></figure><ul><li>Sequential: 定义一个序列化的神经网络模型；  </li><li>Flatten：把矩阵数据转换为向量数据； </li><li>Dense：添加一个神经元层；</li></ul><h2 id="3、达到想要的训练结果，如何停止训练，Callback策略"><a href="#3、达到想要的训练结果，如何停止训练，Callback策略" class="headerlink" title="3、达到想要的训练结果，如何停止训练，Callback策略"></a>3、达到想要的训练结果，如何停止训练，Callback策略</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#参数回调，单独的类</span><br><span class="line">class myCallback1(tf.keras.callbacks.Callback):</span><br><span class="line">  def on_epoch_end(self, epoch, logs&#x3D;&#123;&#125;):#在迭代结束时调用回调</span><br><span class="line">    if(logs.get(&#39;loss&#39;)&lt;0.4):#损失率低于0.4停止训练</span><br><span class="line">      print(&quot;\nReached 60% accuracy so cancelling training!&quot;)</span><br><span class="line">      self.model.stop_training &#x3D; True</span><br><span class="line"></span><br><span class="line">#完整代码如下</span><br><span class="line">import tensorflow as tf</span><br><span class="line"></span><br><span class="line">class myCallback(tf.keras.callbacks.Callback):</span><br><span class="line">  def on_epoch_end(self, epoch, logs&#x3D;&#123;&#125;):</span><br><span class="line">    if(logs.get(&#39;acc&#39;)&gt;0.6):</span><br><span class="line">      print(&quot;\nReached 60% accuracy so cancelling training!&quot;)</span><br><span class="line">      self.model.stop_training &#x3D; True</span><br><span class="line"></span><br><span class="line">mnist &#x3D; tf.keras.datasets.fashion_mnist</span><br><span class="line"></span><br><span class="line">(x_train, y_train),(x_test, y_test) &#x3D; mnist.load_data()</span><br><span class="line">x_train, x_test &#x3D; x_train &#x2F; 255.0, x_test &#x2F; 255.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">callbacks &#x3D; myCallback()#实例化刚刚创建的类</span><br><span class="line"></span><br><span class="line">model &#x3D; tf.keras.models.Sequential([</span><br><span class="line">  tf.keras.layers.Flatten(input_shape&#x3D;(28, 28)),</span><br><span class="line">  tf.keras.layers.Dense(512, activation&#x3D;tf.nn.relu),</span><br><span class="line">  tf.keras.layers.Dense(10, activation&#x3D;tf.nn.softmax)</span><br><span class="line">])</span><br><span class="line">model.compile(optimizer&#x3D;&#39;adam&#39;,</span><br><span class="line">              loss&#x3D;&#39;sparse_categorical_crossentropy&#39;,</span><br><span class="line">              metrics&#x3D;[&#39;accuracy&#39;])</span><br><span class="line"></span><br><span class="line">model.fit(x_train, y_train, epochs&#x3D;10, callbacks&#x3D;[callbacks])</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4、卷积和池化增加特征"><a href="#4、卷积和池化增加特征" class="headerlink" title="4、卷积和池化增加特征"></a>4、卷积和池化增加特征</h2><h3 id="1、在进行图像处理的过程中，经常会使用滤波器矩阵（Filter）来对原始图片进行处理，而这个过程就是卷积（convolutions）"><a href="#1、在进行图像处理的过程中，经常会使用滤波器矩阵（Filter）来对原始图片进行处理，而这个过程就是卷积（convolutions）" class="headerlink" title="1、在进行图像处理的过程中，经常会使用滤波器矩阵（Filter）来对原始图片进行处理，而这个过程就是卷积（convolutions）"></a>1、在进行图像处理的过程中，经常会使用滤波器矩阵（Filter）来对原始图片进行处理，而这个过程就是卷积（convolutions）</h3><p><img src="%E5%8D%B7%E7%A7%AF%E5%92%8C%E6%B1%A0%E5%8C%96.png"><br>在上图中，针对其中的一个像素点，应用滤波器矩阵（图中给出的矩阵是随机定义的一个矩阵），那么卷积就是针对每个像素点，考虑其上下左右、左上下、右上下的邻居像素点，和滤波器矩阵对应点相乘得到新的像素点，这个转换过程就叫做卷积。<br><img src="%E6%B0%B4%E5%B9%B31.png"><br>应用滤波器，可以把横向特征明显化（即水平特征明显）；<br><img src="%E7%AB%96%E7%9B%B4.png"><br>应用滤波器，可以把纵向特征明显化（即垂直特征明显）；</p><h3 id="2、池化：简单理解，就是图片的压缩，即把原始比如128128像素的图片压缩成2828的图片"><a href="#2、池化：简单理解，就是图片的压缩，即把原始比如128128像素的图片压缩成2828的图片" class="headerlink" title="2、池化：简单理解，就是图片的压缩，即把原始比如128128像素的图片压缩成2828的图片"></a>2、池化：简单理解，就是图片的压缩，即把原始比如128<em>128像素的图片压缩成28</em>28的图片</h3><p><img src="%E6%B1%A0%E5%8C%96.png"><br>有最大值池化和平局池化，这里取得是最大值池化<br>在图中，一个4<em>4像素的图片，被压缩为2</em>2的图片。其做法是：每次处理4个像素，找到其最大的像素进行返回。当然这只是其中的一种池化方法，你也可以针对4个像素进行求均值然后返回也可以。</p><h3 id="3、在代码中进行卷积和池化"><a href="#3、在代码中进行卷积和池化" class="headerlink" title="3、在代码中进行卷积和池化"></a>3、在代码中进行卷积和池化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">model &#x3D; tf.keras.models.Sequential([ </span><br><span class="line">    tf.keras.layers.Flatten(), </span><br><span class="line">    tf.keras.layers.Dense(128, activation&#x3D;tf.nn.relu),</span><br><span class="line">    tf.keras.layers.Dense(10, activation&#x3D;tf.nn.softmax)])</span><br></pre></td></tr></table></figure><p>在之前代码中进行修改，实现卷积和池化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">model &#x3D; tf.keras.models.Sequential([</span><br><span class="line">  tf.keras.layers.Conv2D(64,(3,3), activation&#x3D;&#39;relu&#39;,input_shape&#x3D;(28,28,1)),</span><br><span class="line">tf.keras.layers.MaxPooling2D(2,2),</span><br><span class="line">tf.keras.layers.Conv2D(64,(3,3),activation&#x3D;&#39;relu&#39;),</span><br><span class="line">tf.keras.layers.MaxPooling2D(2,2),</span><br><span class="line">tf.keras.layers.Flatten(), </span><br><span class="line">    tf.keras.layers.Dense(128, activation&#x3D;tf.nn.relu), </span><br><span class="line">    tf.keras.layers.Dense(10, activation&#x3D;tf.nn.softmax)</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>  第一行代码：<br>  指定第一个卷积，要求keras生成64个过滤器，过滤器是3x3的，激活函数是relu(会丢弃负值)，而input_shape中的值是（28,28,1）,前面的28,28是图片的大小，而1代表用一个字节来计算颜色深度，即图片是灰度图；  二维向量展平为784(28x28=784)的一维向量输入<br>  64个滤波器矩阵里面的值，最开始是随机的，随着训练的推进，这些值会被改变，而改变的方向则是使得最终预测效果较好的方向。<br>  第二行代码：<br>  一个池化层，MaxPooling意味着最大值保留，同时池化的大小是(2,2),那么一次会处理4个像素点；<br>  第三四行代码：<br>  添加另一个卷积层和另一个最大池层，这样网络就能在现有的基础上学习另一组解决方案<br>  当一个图片经过2个卷积、池化层后，即Flatten时，图片会被缩小；目标是是卷积对决定输出的特征进行过滤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.summary()#可以查看构造的模型</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">_________________________________________________________________</span><br><span class="line">Layer (type)                 Output Shape              Param #   </span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">conv2d (Conv2D)              (None, 26, 26, 64)        640       </span><br><span class="line">_________________________________________________________________</span><br><span class="line">max_pooling2d (MaxPooling2D) (None, 13, 13, 64)        0         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv2d_1 (Conv2D)            (None, 11, 11, 64)        36928     </span><br><span class="line">_________________________________________________________________</span><br><span class="line">max_pooling2d_1 (MaxPooling2 (None, 5, 5, 64)          0         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">flatten (Flatten)            (None, 1600)              0         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense (Dense)                (None, 128)               204928    </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense_1 (Dense)              (None, 10)                1290      </span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Total params: 243,786</span><br><span class="line">Trainable params: 243,786</span><br><span class="line">Non-trainable params: 0</span><br></pre></td></tr></table></figure><p>1、第一层卷积输出的大小是26<em>26</em>64 ,这是什么意思呢？<br>首先，一个28<em>28的图片数据经过卷积层的滤波器矩阵后，其图片变为26</em>26的大小。由于滤波器大小是3<em>3，所以原始28</em>28的图像的最外面的一圈像素点是不能被计算的。这样上下左右就会各少一个像素点，所以得到的是26<em>26的图片。<br>2、第一个池化层，由于其大小是2</em>2，所以会把4个像素点变成一个，所以26<em>26的像素点，会变成13</em>13。<br>3、第二个卷积层是类似的，像素会减小2，所以是11<em>11<br>4、第二个池化层，会把输入像素减半，即变成5</em>5<br>5、Flatten层的输入为什么是1600？ 1600 = 5<em>5</em>64，即把64个子图的所有像素点展平，作为Flatten的输入。</p><h3 id="4、使用卷积优化Fashion-Mnist数据识别模型"><a href="#4、使用卷积优化Fashion-Mnist数据识别模型" class="headerlink" title="4、使用卷积优化Fashion Mnist数据识别模型"></a>4、使用卷积优化Fashion Mnist数据识别模型</h3><p>做两个卷积层，每个卷积层都有64个卷积，每个层后面都有一个最大池化层<br>我们将卷积定义为3x3，池化大小为2x2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">print(tf.__version__)</span><br><span class="line">mnist &#x3D; tf.keras.datasets.fashion_mnist</span><br><span class="line">(training_images, training_labels), (test_images, test_labels) &#x3D; mnist.load_data()</span><br><span class="line">training_images&#x3D;training_images.reshape(60000, 28, 28, 1)</span><br><span class="line">training_images&#x3D;training_images &#x2F; 255.0</span><br><span class="line">test_images &#x3D; test_images.reshape(10000, 28, 28, 1)</span><br><span class="line">test_images&#x3D;test_images&#x2F;255.0</span><br><span class="line">model &#x3D; tf.keras.models.Sequential([</span><br><span class="line">  tf.keras.layers.Conv2D(64, (3,3), activation&#x3D;&#39;relu&#39;, input_shape&#x3D;(28, 28, 1)),</span><br><span class="line">  tf.keras.layers.MaxPooling2D(2, 2),</span><br><span class="line">  tf.keras.layers.Conv2D(64, (3,3), activation&#x3D;&#39;relu&#39;),</span><br><span class="line">  tf.keras.layers.MaxPooling2D(2,2),</span><br><span class="line">  tf.keras.layers.Flatten(),</span><br><span class="line">  tf.keras.layers.Dense(128, activation&#x3D;&#39;relu&#39;),</span><br><span class="line">  tf.keras.layers.Dense(10, activation&#x3D;&#39;softmax&#39;)</span><br><span class="line">])</span><br><span class="line">model.compile(optimizer&#x3D;&#39;adam&#39;, loss&#x3D;&#39;sparse_categorical_crossentropy&#39;, metrics&#x3D;[&#39;accuracy&#39;])</span><br><span class="line">model.summary()</span><br><span class="line">model.fit(training_images, training_labels, epochs&#x3D;5)</span><br><span class="line">test_loss &#x3D; model.evaluate(test_images, test_labels)</span><br></pre></td></tr></table></figure><p>训练要慢很多，对每张图片都尝试了64次卷积，然后将图像压缩，之后又有64个卷积，然后再次进行压缩，然后通过DNN(神经网络)</p><h3 id="5、可视化卷积结果"><a href="#5、可视化卷积结果" class="headerlink" title="5、可视化卷积结果"></a>5、可视化卷积结果</h3><p>本节主要是卷积结果的可视化，具体指的是：获取上面的模型，然后同时选择多个图片，以及一个卷积（滤波器矩阵），看模型的四层（第一次卷积、第一次池化、第二次卷积、第二次池化）的输出效果。<br>首先打印出前100个测试标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(test_labels[:100])</span><br></pre></td></tr></table></figure><p>输出结果为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[9 2 1 1 6 1 4 6 5 7 4 5 7 3 4 1 2 4 8 0 2 5 7 9 1 4 6 0 9 3 8 8 3 3 8 0 7</span><br><span class="line"> 5 7 9 6 1 3 7 6 7 2 1 2 2 4 4 5 8 2 2 8 4 8 0 7 7 8 5 1 1 2 3 9 8 7 0 2 6</span><br><span class="line"> 2 3 1 2 8 4 1 8 5 9 5 0 3 2 0 6 5 3 6 7 1 8 0 1 4 2]</span><br></pre></td></tr></table></figure><p>从上面的结果来看下标为0,23，28的图片都是9，也就是shoes，那么一般情况下，卷积可以针对同一类的图片，能发现其共同的特征</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">f, axarr &#x3D; plt.subplots(3,4)</span><br><span class="line">FIRST_IMAGE&#x3D;0 # 第一个图片下标</span><br><span class="line">SECOND_IMAGE&#x3D;23# 第二个图片下标</span><br><span class="line">THIRD_IMAGE&#x3D;28# 第三个图片下标</span><br><span class="line">CONVOLUTION_NUMBER &#x3D; 1 # 第1个卷积 ,调整卷积为1,2,6 ，可以看到不同图片</span><br><span class="line">from tensorflow.keras import models</span><br><span class="line">layer_outputs &#x3D; [layer.output for layer in model.layers]</span><br><span class="line">activation_model &#x3D; tf.keras.models.Model(inputs &#x3D; model.input, outputs &#x3D; layer_outputs)</span><br><span class="line">for x in range(0,4):</span><br><span class="line">    f1 &#x3D; activation_model.predict(test_images[FIRST_IMAGE].reshape(1, 28, 28, 1))[x]</span><br><span class="line">    axarr[0,x].imshow(f1[0, : , :, CONVOLUTION_NUMBER], cmap&#x3D;&#39;inferno&#39;)</span><br><span class="line">    axarr[0,x].grid(False)</span><br><span class="line">    f2 &#x3D; activation_model.predict(test_images[SECOND_IMAGE].reshape(1, 28, 28, 1))[x]</span><br><span class="line">    axarr[1,x].imshow(f2[0, : , :, CONVOLUTION_NUMBER], cmap&#x3D;&#39;inferno&#39;)</span><br><span class="line">    axarr[1,x].grid(False)</span><br><span class="line">    f3 &#x3D; activation_model.predict(test_images[THIRD_IMAGE].reshape(1, 28, 28, 1))[x]</span><br><span class="line">    axarr[2,x].imshow(f3[0, : , :, CONVOLUTION_NUMBER], cmap&#x3D;&#39;inferno&#39;)</span><br><span class="line">    axarr[2,x].grid(False)</span><br></pre></td></tr></table></figure><p><img src="%E6%AF%8F%E5%B1%82%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C.png"><br>图片像素从最开始的28x28，变为26x26，13x13 , 11x11 , 5x5;<br>一行表示一个图片，4列表示卷积的过程</p><h1 id="2021-2-2"><a href="#2021-2-2" class="headerlink" title="2021/2/2"></a>2021/2/2</h1><h2 id="6、纯python理解卷积和池化"><a href="#6、纯python理解卷积和池化" class="headerlink" title="6、纯python理解卷积和池化"></a>6、纯python理解卷积和池化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line">from scipy import misc</span><br><span class="line">i &#x3D; misc.ascent()</span><br><span class="line"></span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">plt.grid(False)</span><br><span class="line">plt.gray()</span><br><span class="line">plt.axis(&#39;off&#39;)</span><br><span class="line">plt.imshow(i)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>获取图片大小，512x512</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i_transformed &#x3D; np.copy(i)</span><br><span class="line">size_x &#x3D; i_transformed.shape[0]</span><br><span class="line">size_y &#x3D; i_transformed.shape[1]</span><br></pre></td></tr></table></figure><p>创建3x3的卷积</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># This filter detects edges nicely</span><br><span class="line"># It creates a convolution that only passes through sharp edges and straight</span><br><span class="line"># lines.</span><br><span class="line"></span><br><span class="line">#Experiment with different values for fun effects.</span><br><span class="line">#filter &#x3D; [ [0, 1, 0], [1, -4, 1], [0, 1, 0]]</span><br><span class="line"></span><br><span class="line"># A couple more filters to try for fun!</span><br><span class="line">filter &#x3D; [ [-1, -2, -1], [0, 0, 0], [1, 2, 1]]</span><br><span class="line">#filter &#x3D; [ [-1, 0, 1], [-2, 0, 2], [-1, 0, 1]]</span><br><span class="line"></span><br><span class="line"># If all the digits in the filter don&#39;t add up to 0 or 1, you </span><br><span class="line"># should probably do a weight to get it to do so</span><br><span class="line"># so, for example, if your weights are 1,1,1 1,2,1 1,1,1</span><br><span class="line"># They add up to 10, so you would set a weight of .1 if you want to normalize them</span><br><span class="line">weight  &#x3D; 1</span><br></pre></td></tr></table></figure><p>应用卷积层，通过更改滤波器可以得到竖直或水平的特征</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">for x in range(1,size_x-1):</span><br><span class="line">  for y in range(1,size_y-1):</span><br><span class="line">      convolution &#x3D; 0.0</span><br><span class="line">      convolution &#x3D; convolution + (i[x - 1, y-1] * filter[0][0])</span><br><span class="line">      convolution &#x3D; convolution + (i[x, y-1] * filter[0][1])</span><br><span class="line">      convolution &#x3D; convolution + (i[x + 1, y-1] * filter[0][2])</span><br><span class="line">      convolution &#x3D; convolution + (i[x-1, y] * filter[1][0])</span><br><span class="line">      convolution &#x3D; convolution + (i[x, y] * filter[1][1])</span><br><span class="line">      convolution &#x3D; convolution + (i[x+1, y] * filter[1][2])</span><br><span class="line">      convolution &#x3D; convolution + (i[x-1, y+1] * filter[2][0])</span><br><span class="line">      convolution &#x3D; convolution + (i[x, y+1] * filter[2][1])</span><br><span class="line">      convolution &#x3D; convolution + (i[x+1, y+1] * filter[2][2])</span><br><span class="line">      convolution &#x3D; convolution * weight</span><br><span class="line">      if(convolution&lt;0):</span><br><span class="line">        convolution&#x3D;0</span><br><span class="line">      if(convolution&gt;255):</span><br><span class="line">        convolution&#x3D;255</span><br><span class="line">      i_transformed[x, y] &#x3D; convolution</span><br></pre></td></tr></table></figure><p>查看卷积后的结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Plot the image. Note the size of the axes -- they are 512 by 512</span><br><span class="line">plt.gray()</span><br><span class="line">plt.grid(False)</span><br><span class="line">plt.imshow(i_transformed)</span><br><span class="line">#plt.axis(&#39;off&#39;)</span><br><span class="line">plt.show()   </span><br></pre></td></tr></table></figure><p>应用池化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">new_x &#x3D; int(size_x&#x2F;2)</span><br><span class="line">new_y &#x3D; int(size_y&#x2F;2)</span><br><span class="line">newImage &#x3D; np.zeros((new_x, new_y))</span><br><span class="line">for x in range(0, size_x, 2):</span><br><span class="line">    for y in range(0, size_y, 2):</span><br><span class="line">        pixels &#x3D; []</span><br><span class="line">        pixels.append(i_transformed[x, y])</span><br><span class="line">        pixels.append(i_transformed[x+1, y])</span><br><span class="line">        pixels.append(i_transformed[x, y+1])</span><br><span class="line">        pixels.append(i_transformed[x+1, y+1])</span><br><span class="line">        pixels.sort(reverse&#x3D;True)</span><br><span class="line">        newImage[int(x&#x2F;2),int(y&#x2F;2)] &#x3D; pixels[0]</span><br><span class="line"></span><br><span class="line"># Plot the image. Note the size of the axes -- now 256 pixels instead of 512</span><br><span class="line">plt.gray()</span><br><span class="line">plt.grid(False)</span><br><span class="line">plt.imshow(newImage)</span><br><span class="line">#plt.axis(&#39;off&#39;)</span><br><span class="line">plt.show() </span><br></pre></td></tr></table></figure><p>尝试不同的滤波器，看哪个更管用<br>特征不仅被保留，而且更加突出了，通过分离和识别特征， 从而得到更高的精度  </p><h2 id="5、如何利用现实中的图片"><a href="#5、如何利用现实中的图片" class="headerlink" title="5、如何利用现实中的图片"></a>5、如何利用现实中的图片</h2><h3 id="1、ImageGenerator"><a href="#1、ImageGenerator" class="headerlink" title="1、ImageGenerator"></a>1、ImageGenerator</h3><ul><li>现实生活中，图片肯定不可能全部是28x28像素的（之前处理的图片都是28x28的）;</li><li>图片的label也不会整理好给到我们；</li><li>数据也不会直接分为训练集和测试集提供给我们；</li><li>所以，就需要了解一些数据的预处理工作，这样才能真正的把TensorFlow用起来！  </li></ul><p>先进行导入  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">from tensorflow.keras.preprocessing.image import ImageDataGenerator</span><br><span class="line">&#96;&#96;&#96;  </span><br><span class="line"></span><br><span class="line">加载数据代码</span><br><span class="line">&#96;&#96;&#96;  </span><br><span class="line">train_datagen &#x3D; ImageDataGenerator(rescale&#x3D; 1.&#x2F;255)</span><br><span class="line"></span><br><span class="line">train_generator &#x3D; train_datagen.flow_from_directory(</span><br><span class="line">train_dir,</span><br><span class="line">target_size &#x3D;(300,300),</span><br><span class="line">batch_size &#x3D; 128,</span><br><span class="line">class_model&#x3D;&#39;binary&#39;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">test_datagen &#x3D; ImageDataGenerator(rescale&#x3D; 1.&#x2F;255)</span><br><span class="line"></span><br><span class="line">test_generator &#x3D; test_datagen.flow_from_directory(</span><br><span class="line">test_dir,</span><br><span class="line">target_size &#x3D;(300,300),</span><br><span class="line">batch_size &#x3D; 32,</span><br><span class="line">class_model&#x3D;&#39;binary&#39;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>1、将rescale传递给实例化的图片生成器，从而使数据标准化，也就是将图像各像素值从0-255转化为0-1，对他们的值进行归一化<br>2、train_dir ：指的是训练目录，调用目录加载图片，不应该该将子目录指向生成器，应该为包含子目录的目录<br>3、target_size指的是把图像处理后的大小，比如原始图像是1200x1200，那么指定这个参数后，其输出就是300x300 (即图片的缩放，因为输入图片可能不是一样的大小，但是TensorFlow的模型却需要输入都是一样的大小，所以这个参数很有用);<br>4、batch_size，则是指一次操作的图片个数，调整这个值可以获得不同的执行性能（效率）；<br>5、class_mode，是分类模型，’binary’是二分类(这里区别的是马和人)</p><h3 id="2、构建模型"><a href="#2、构建模型" class="headerlink" title="2、构建模型"></a>2、构建模型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">model &#x3D; tf.keras.models.Sequential([</span><br><span class="line">    tf.keras.layers.Conv2D(16,(3,3),activation&#x3D;&#39;relu&#39;,input_shape&#x3D;(300,300,3)),</span><br><span class="line">    tf.keras.layers.MaxPooling2D(2,2),</span><br><span class="line">    tf.keras.layers.Conv2D(32,(3,3),activation&#x3D;&#39;relu&#39;),</span><br><span class="line">    tf.keras.layers.MaxPooling2D(2,2),</span><br><span class="line">    tf.keras.layers.Conv2D(64,(3,3),activation&#x3D;&#39;relu&#39;),</span><br><span class="line">    tf.keras.layers.MaxPooling2D(2,2),</span><br><span class="line">    tf.keras.layers.Flatten(),</span><br><span class="line">    tf.keras.layers.Dense(512,activation&#x3D;&#39;relu&#39;),</span><br><span class="line">    tf.keras.layers.Dense(1,activation&#x3D;&#39;sigmoid&#39;)</span><br><span class="line">])</span><br></pre></td></tr></table></figure><ul><li><p>最开始定义了3层卷积、池化层；  </p></li><li><p>接着定义了一次Flatten、一层Dense，以及最后的Dense；  </p></li><li><p>第一层input_shape为（300,300,3），之前的代码都是类似(300,300)，而没有后面的3。后面的3指的是颜色3个比特，分别代表，蓝色、红色、黄色。  </p></li><li><p>最后的一层Dense只有一个神经元，但是我们是一个二分类，是因为sigmoid函数，就是使用于二分类的，其效率会比之前的设计效率高（之前使用10个神经元来代表10个类别，当然这里你也可以使用2个神经元来设计）。<br>得到如下输出，查看图片如何被压缩</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">_________________________________________________________________</span><br><span class="line">Layer (type)                 Output Shape              Param #   </span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">conv2d (Conv2D)              (None, 298, 298, 16)      448       </span><br><span class="line">_________________________________________________________________</span><br><span class="line">max_pooling2d (MaxPooling2D) (None, 149, 149, 16)      0         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv2d_1 (Conv2D)            (None, 147, 147, 32)      4640      </span><br><span class="line">_________________________________________________________________</span><br><span class="line">max_pooling2d_1 (MaxPooling2 (None, 73, 73, 32)        0         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv2d_2 (Conv2D)            (None, 71, 71, 64)        18496     </span><br><span class="line">_________________________________________________________________</span><br><span class="line">max_pooling2d_2 (MaxPooling2 (None, 35, 35, 64)        0         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">flatten (Flatten)            (None, 78400)             0         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense (Dense)                (None, 512)               40141312  </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense_1 (Dense)              (None, 1)                 513       </span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Total params: 40,165,409</span><br><span class="line">Trainable params: 40,165,409</span><br><span class="line">Non-trainable params: 0</span><br><span class="line">_________________________________________________________________</span><br></pre></td></tr></table></figure></li><li><p>第一层卷积层filter是3*3，所以输出像素会少2个（原来是300，现在变为298）；</p></li><li><p>第一层池化层，矩阵是2*2，所以输出像素少一半（即从298变为149）；</p></li><li><p>其他以此类推；</p></li><li><p>如果我们直接用300x300的原始图片进行模型拟合，每张图片的大小就会超过900，000<br>所以压缩过程减小了学习器的复杂程度</p></li></ul><h3 id="3、编译模型"><a href="#3、编译模型" class="headerlink" title="3、编译模型"></a>3、编译模型</h3><p>在这个代码中，损失函数使用二分类的交叉熵函数，优化器使用RMS（此优化器可以调整学习速率-learning rate），打印正确率。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from tensorflow.keras.optimizers import RMSprop</span><br><span class="line"></span><br><span class="line">model.compile(loss&#x3D;&#39;binary_crossentropy&#39;,</span><br><span class="line">optimizer &#x3D; RMSprop(lr&#x3D;0.001),</span><br><span class="line">metrics&#x3D;[&#39;acc&#39;]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="4、训练"><a href="#4、训练" class="headerlink" title="4、训练"></a>4、训练</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">history &#x3D; model.fit_generator(</span><br><span class="line">train_generator,</span><br><span class="line">steps_per_epoch&#x3D;8,</span><br><span class="line">epochs&#x3D;15,</span><br><span class="line">validation_data &#x3D; validation_generator,</span><br><span class="line">validation_steps &#x3D; 8,</span><br><span class="line">verbose&#x3D;2</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>之前代码用fit来进行建模，现在使用fit_generator，是因为现在的输入数据是使用ImageDataGenerator来进行生成的；</li><li>train_generator，就是之前设置的从输入目录读取的变量；</li><li>一共有1024个图片，之前设置每次加载128个图片（batch_size），所以需要加载8次才能加载完全部图片，所以使用steps_per_epoch=8;</li><li>epochs 设置为15，那么训练15次，当然可以调整；</li><li>validation_data设置为之前生成的validation_generator;</li><li>测试数据有256个，之前设置batch_size=32，所以这里使用validation_steps为8就可以加载所有图片了。</li><li>verbose参数设置输出的信息，设置为2，则不会输出建模的过程信息。</li></ul><h3 id="5、预测模型"><a href="#5、预测模型" class="headerlink" title="5、预测模型"></a>5、预测模型</h3><p>上传图片到模型中，进行预测，预测的时候要先将图片归一化再进行预测，否则正确率很低</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">from tensorflow.keras.preprocessing import image</span><br><span class="line">new_files &#x3D; os.listdir(&#39;&#x2F;opt&#x2F;data&#x2F;new_human_horse&#39;)</span><br><span class="line">#print(new_files)</span><br><span class="line">for fn in new_files:</span><br><span class="line">  # predicting images</span><br><span class="line">  path &#x3D; &#39;&#x2F;opt&#x2F;data&#x2F;new_human_horse&#x2F;&#39; + fn</span><br><span class="line">  img &#x3D; image.load_img(path, target_size&#x3D;(150, 150))</span><br><span class="line">  x &#x3D; image.img_to_array(img)</span><br><span class="line">  x &#x3D; np.expand_dims(x, axis&#x3D;0)</span><br><span class="line"></span><br><span class="line">  images &#x3D; np.vstack([x])</span><br><span class="line">  classes &#x3D; model.predict(images, batch_size&#x3D;10)</span><br><span class="line">  print(classes[0])</span><br><span class="line">  if classes[0]&gt;0.5:</span><br><span class="line">    print(fn + &quot; is a human&quot;)</span><br><span class="line">  else:</span><br><span class="line">    print(fn + &quot; is a horse&quot;)</span><br></pre></td></tr></table></figure><h3 id="6、调整"><a href="#6、调整" class="headerlink" title="6、调整"></a>6、调整</h3><p>把target_size改为150后，训练过程明显加快；但模型精度有所下降，对新数据的验证也有所下降</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2021-1-29&quot;&gt;&lt;a href=&quot;#2021-1-29&quot; class=&quot;headerlink&quot; title=&quot;2021/1/29&quot;&gt;&lt;/a&gt;2021/1/29&lt;/h1&gt;&lt;p&gt;人工神经网络通过正向和反向传播来更新神经元，从而形成更好的神经系统&lt;br&gt;输入端–黑</summary>
      
    
    
    
    
    <category term="tensorflow" scheme="https://182.92.7.32/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>echarts数据可视化学习</title>
    <link href="https://182.92.7.32/2021/01/24/ECharts%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <id>https://182.92.7.32/2021/01/24/ECharts%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/</id>
    <published>2021-01-24T13:12:14.000Z</published>
    <updated>2021-02-05T13:33:43.076Z</updated>
    
    <content type="html"><![CDATA[<h2 id="可视化面板介绍"><a href="#可视化面板介绍" class="headerlink" title="可视化面板介绍"></a>可视化面板介绍</h2><p>​    应对现在数据可视化的趋势，越来越多企业需要在很多场景(营销数据，生产数据，用户数据)下使用，可视化图表来展示体现数据，让数据更加直观，数据特点更加突出。</p><h3 id="01-使用技术"><a href="#01-使用技术" class="headerlink" title="01-使用技术"></a>01-使用技术</h3><p>完成该项目需要具备以下知识：</p><ul><li>div + css 布局</li><li>flex 布局</li><li>Less</li><li>原生js + jquery 使用</li><li>rem适配</li><li><strong>echarts基础</strong></li></ul><h3 id="02-案例适配方案"><a href="#02-案例适配方案" class="headerlink" title="02- 案例适配方案"></a>02- 案例适配方案</h3><ul><li><p>设计稿是1920px  </p><ol><li><p>flexible.js (添加flexible.js文件实现rem自适应，默认为10等份)现把屏幕分为 24 等份<br>或者  </p></li><li><p>cssrem 插件的基准值是  80px(px:绝对单位，页面按精确像素展示。rem:rem是CSS3新增的一个相对单位（root em，根em），这个单位引起了广泛关注。区别在于使用rem为元素设定字体大小时，仍然是相对大小，但相对的只是HTML根元素,80px=1rem,  像素单位转化为rem单位是为了实现自适应) </p><p>插件-配置按钮—配置扩展设置–Root Font Size 里面 设置。 </p><p>但是别忘记重启vscode软件保证生效</p></li></ol></li></ul><h3 id="03-基础设置"><a href="#03-基础设置" class="headerlink" title="03-基础设置"></a>03-基础设置</h3><ul><li>body 设置背景图 ，缩放为 100%  ， 行高1.15<br>设置完没反应：原因（less文件没有与css文件关联，安装Easy LESS,保存less文件自动生成css文件）</li><li>css初始化<br>在不写repeat与no-repeat的情况下，默认的是平铺</li></ul><h3 id="04-header-布局"><a href="#04-header-布局" class="headerlink" title="04-header 布局"></a>04-header 布局</h3><ul><li>高度为100px</li><li>背景图，在容器内显示</li><li>缩放比例为 100%</li><li>h1 标题部分   白色  38像素 居中显示  行高为 80像素</li><li>时间模块 showTime   定位右侧  right 为 30px   行高为 75px  文字颜色为：rgba(255, 255, 255, 0.7)     而文字大小为 20像素 </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式： 当前时间：2020年3月17-0时54分14秒</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">            <span class="keyword">var</span> t = <span class="literal">null</span>;</span><br><span class="line">            t = <span class="built_in">setTimeout</span>(time, <span class="number">1000</span>);<span class="comment">//開始运行</span></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">time</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">clearTimeout</span>(t);<span class="comment">//清除定时器</span></span><br><span class="line">                dt = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">                <span class="keyword">var</span> y = dt.getFullYear();</span><br><span class="line">                <span class="keyword">var</span> mt = dt.getMonth() + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">var</span> day = dt.getDate();</span><br><span class="line">                <span class="keyword">var</span> h = dt.getHours();<span class="comment">//获取时</span></span><br><span class="line">                <span class="keyword">var</span> m = dt.getMinutes();<span class="comment">//获取分</span></span><br><span class="line">                <span class="keyword">var</span> s = dt.getSeconds();<span class="comment">//获取秒</span></span><br><span class="line">                <span class="built_in">document</span>.querySelector(<span class="string">&quot;.showTime&quot;</span>).innerHTML = <span class="string">&#x27;当前时间：&#x27;</span> + y + <span class="string">&quot;年&quot;</span> + mt + <span class="string">&quot;月&quot;</span> + day + <span class="string">&quot;-&quot;</span> + h + <span class="string">&quot;时&quot;</span> + m + <span class="string">&quot;分&quot;</span> + s + <span class="string">&quot;秒&quot;</span>;</span><br><span class="line">                t = <span class="built_in">setTimeout</span>(time, <span class="number">1000</span>); <span class="comment">//设定定时器，循环运行     </span></span><br><span class="line">            &#125;</span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>header部分css样式</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1.25rem</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(../images/head_bg.png) no-repeat top center;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">  h1 &#123;</span><br><span class="line">    <span class="selector-tag">font-size</span>: 0.475<span class="selector-tag">rem</span>;</span><br><span class="line">    <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span><br><span class="line">    <span class="selector-tag">text-align</span>: <span class="selector-tag">center</span>;</span><br><span class="line">    <span class="selector-tag">line-height</span>: 1<span class="selector-tag">rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.showTime</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0.375rem</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">0.9375rem</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.25rem</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.7</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="05-mainbox-主体模块"><a href="#05-mainbox-主体模块" class="headerlink" title="05-mainbox  主体模块"></a>05-mainbox  主体模块</h3><ul><li>需要一个上左右的10px 的内边距</li></ul><ul><li>column 列容器，分三列，占比 3：5：3</li></ul><p>css样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.mainbox</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.125rem</span> <span class="number">0.125rem</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  .column &#123;</span><br><span class="line">    <span class="selector-tag">flex</span>: 3;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;<span class="selector-pseudo">:nth-child(2)</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">5</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="06-公共面板模块-panel"><a href="#06-公共面板模块-panel" class="headerlink" title="06-公共面板模块 panel"></a>06-公共面板模块 panel</h3><ul><li>高度为 310px</li><li>1像素的 1px solid rgba(25, 186, 139, 0.17)  边框</li><li>有line.jpg 背景图片</li><li>padding为  上为 0  左右 15px  下为 40px</li><li>下外边距是 15px</li><li>利用panel  盒子 before 和after 制作上面两个角   大小为 10px  线条为  2px solid #02a6b5</li><li>新加一个盒子before 和after   制作下侧两个角  宽度高度为 10px</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.panel</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">3.875rem</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(<span class="number">25</span>, <span class="number">186</span>, <span class="number">139</span>, <span class="number">0.17</span>);</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(../images/line\(<span class="number">1</span>\).png);</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">0.1875rem</span> <span class="number">0.5rem</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">0.1875rem</span>;</span><br><span class="line">  &amp;::before &#123;</span><br><span class="line">    <span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</span><br><span class="line">    <span class="selector-tag">top</span>: 0;</span><br><span class="line">    <span class="selector-tag">left</span>: 0;</span><br><span class="line">    <span class="selector-tag">content</span>: &quot;&quot;;</span><br><span class="line">    <span class="selector-tag">width</span>: 10<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">height</span>: 10<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">border-top</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#02a6b5</span>;</span><br><span class="line">    <span class="selector-tag">border-left</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#02a6b5</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">2px</span> solid <span class="number">#02a6b5</span>;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">2px</span> solid <span class="number">#02a6b5</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.panel-footer</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    &amp;::before &#123;</span><br><span class="line">      <span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</span><br><span class="line">      <span class="selector-tag">bottom</span>: 0;</span><br><span class="line">      <span class="selector-tag">left</span>: 0;</span><br><span class="line">      <span class="selector-tag">content</span>: &quot;&quot;;</span><br><span class="line">      <span class="selector-tag">width</span>: 10<span class="selector-tag">px</span>;</span><br><span class="line">      <span class="selector-tag">height</span>: 10<span class="selector-tag">px</span>;</span><br><span class="line">      <span class="selector-tag">border-bottom</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#02a6b5</span>;</span><br><span class="line">      <span class="selector-tag">border-left</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#02a6b5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">      <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid <span class="number">#02a6b5</span>;</span><br><span class="line">      <span class="attribute">border-right</span>: <span class="number">2px</span> solid <span class="number">#02a6b5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="07-柱形图-bar-模块-布局"><a href="#07-柱形图-bar-模块-布局" class="headerlink" title="07-柱形图 bar 模块(布局)"></a>07-柱形图 bar 模块(布局)</h3><ul><li><p>标题模块  h2    高度为 48px   文字颜色为白色  文字大小为  20px  </p></li><li><p>图标内容模块  chart   高度 240px </p></li><li><p>以上可以作为panel公共样式部分 </p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0.6rem</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">0.6rem</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.chart</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">3rem</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="08-中间布局"><a href="#08-中间布局" class="headerlink" title="08-中间布局"></a>08-中间布局</h3><ul><li>上面是no 数字模块</li><li>下面是map 地图模块</li></ul><ol><li>数字模块 no  有个背景颜色  rgba(101, 132, 226, 0.1);  有个15像素的内边距</li><li>注意中间列 column 有个 左右 10px 下 15px 的外边距</li><li>no 模块里面上下划分  上面是数字（no-hd)   下面 是 相关文字说明(no-bd)</li><li>no-hd 数字模块   有一个边框 1px solid rgba(25, 186, 139, 0.17)    </li><li>no-hd 数字模块 里面分为两个小li  每个小li高度为 80px   文字大小为   70px   颜色为 #ffeb7b   字体是图标字体  electronicFont</li><li>no-hd 利用 after 和 before制作2个小角，  边框  2px solid #02a6b5  宽度为 30px  高度为 10px</li><li>小竖线 给 第一个小li after 就可以  1px宽 背景颜色为 rgba(255, 255, 255, 0.2);     高度 50%  top 25% 即可</li><li>no-bd 里面也有两个小li  高度为 40px   文字颜色为  rgba(255, 255, 255, 0.7)   文字大小为 18px   上内边距为  10px</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 声明字体*/</span></span><br><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: electronicFont;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(../font/DS-DIGIT.TTF);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>地图模块制作：</p><ol><li>地图模块高度为 810px  里面包含4个盒子  chart 放图表模块      球体盒子  旋转1  旋转2  </li><li>球体图片模块 map1    大小为 518px  要加背景图片 因为要缩放100%     定位到最中央    透明度 .3   </li><li>旋转1  map 2    大小为 643px 要加背景图片 因为要缩放100%    定位到中央  透明度  .6   做旋转动画   利用z-index压住球体</li><li>旋转2  map3  大小为 566px  要加背景图片 因为要缩放100%    定位到中央 旋转动画 注意是逆时针 </li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;no&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;no-hd&quot;</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">li</span>&gt;</span>125811<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">li</span>&gt;</span>104563<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;no-bd&quot;</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">li</span>&gt;</span>前端需求人数<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">li</span>&gt;</span>市场供应人数<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;chart&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;map1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;map2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;map3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>中间样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 声明字体*/</span></span><br><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: electronicFont;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(../font/DS-DIGIT.TTF);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.no</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">101</span>, <span class="number">132</span>, <span class="number">226</span>, <span class="number">0.1</span>);</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.1875rem</span>;</span><br><span class="line">  .no-hd &#123;</span><br><span class="line">    <span class="selector-tag">position</span>: <span class="selector-tag">relative</span>;</span><br><span class="line">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">rgba</span>(25, 186, 139, 0.17);</span><br><span class="line">    &amp;<span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">      <span class="attribute">border-top</span>: <span class="number">2px</span> solid <span class="number">#02a6b5</span>;</span><br><span class="line">      <span class="attribute">border-left</span>: <span class="number">2px</span> solid <span class="number">#02a6b5</span>;</span><br><span class="line">      <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">      <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid <span class="number">#02a6b5</span>;</span><br><span class="line">      <span class="attribute">border-right</span>: <span class="number">2px</span> solid <span class="number">#02a6b5</span>;</span><br><span class="line">      <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">ul</span> &#123;</span><br><span class="line">      <span class="attribute">display</span>: flex;</span><br><span class="line">      li &#123;</span><br><span class="line">        <span class="selector-tag">position</span>: <span class="selector-tag">relative</span>;</span><br><span class="line">        <span class="selector-tag">flex</span>: 1;</span><br><span class="line">        <span class="selector-tag">text-align</span>: <span class="selector-tag">center</span>;</span><br><span class="line">        <span class="selector-tag">height</span>: 1<span class="selector-tag">rem</span>;</span><br><span class="line">        <span class="selector-tag">line-height</span>: 1<span class="selector-tag">rem</span>;</span><br><span class="line">        <span class="selector-tag">font-size</span>: 0.875<span class="selector-tag">rem</span>;</span><br><span class="line">        <span class="selector-tag">color</span>: <span class="selector-id">#ffeb7b</span>;</span><br><span class="line">        <span class="selector-tag">padding</span>: 0.05<span class="selector-tag">rem</span> 0;</span><br><span class="line">        <span class="selector-tag">font-family</span>: <span class="selector-tag">electronicFont</span>;</span><br><span class="line">        <span class="selector-tag">font-weight</span>: <span class="selector-tag">bold</span>;</span><br><span class="line">        &amp;<span class="selector-pseudo">:first-child</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">          <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">          <span class="attribute">position</span>: absolute;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">50%</span>;</span><br><span class="line">          <span class="attribute">width</span>: <span class="number">1px</span>;</span><br><span class="line">          <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.2</span>);</span><br><span class="line">          <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">          <span class="attribute">top</span>: <span class="number">25%</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.no-bd</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    li &#123;</span><br><span class="line">      <span class="selector-tag">flex</span>: 1;</span><br><span class="line">      <span class="selector-tag">height</span>: 0.5<span class="selector-tag">rem</span>;</span><br><span class="line">      <span class="selector-tag">line-height</span>: 0.5<span class="selector-tag">rem</span>;</span><br><span class="line">      <span class="selector-tag">text-align</span>: <span class="selector-tag">center</span>;</span><br><span class="line">      <span class="selector-tag">font-size</span>: 0.225<span class="selector-tag">rem</span>;</span><br><span class="line">      <span class="selector-tag">color</span>: <span class="selector-tag">rgba</span>(255, 255, 255, 0.7);</span><br><span class="line">      <span class="selector-tag">padding-top</span>: 0.125<span class="selector-tag">rem</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.map</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">10.125rem</span>;</span><br><span class="line">  .chart &#123;</span><br><span class="line">    <span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</span><br><span class="line">    <span class="selector-tag">top</span>: 0;</span><br><span class="line">    <span class="selector-tag">left</span>: 0;</span><br><span class="line">    <span class="selector-tag">z-index</span>: 5;</span><br><span class="line">    <span class="selector-tag">height</span>: 10.125<span class="selector-tag">rem</span>;</span><br><span class="line">    <span class="selector-tag">width</span>: 100%;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.map1</span>,</span><br><span class="line">  <span class="selector-class">.map2</span>,</span><br><span class="line">  <span class="selector-class">.map3</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">6.475rem</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">6.475rem</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(../images/map.png) no-repeat;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.map2</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">8.0375rem</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">8.0375rem</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(../images/lbx.png);</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.6</span>;</span><br><span class="line">    <span class="attribute">animation</span>: rotate <span class="number">15s</span> linear infinite;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.map3</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">7.075rem</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">7.075rem</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(../images/jt.png);</span><br><span class="line">    <span class="attribute">animation</span>: rotate1 <span class="number">10s</span> linear infinite;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">@keyframes</span> rotate &#123;</span><br><span class="line">    <span class="selector-tag">from</span> &#123;</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>) <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>) <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@keyframes</span> rotate1 &#123;</span><br><span class="line">    <span class="selector-tag">from</span> &#123;</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>) <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>) <span class="built_in">rotate</span>(-<span class="number">360deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="09-Echarts-介绍"><a href="#09-Echarts-介绍" class="headerlink" title="09-Echarts-介绍"></a>09-Echarts-介绍</h3><p>常见的数据可视化库：</p><ul><li>D3.js   目前 Web 端评价最高的 Javascript 可视化工具库(入手难)  </li><li>ECharts.js   百度出品的一个开源 Javascript 数据可视化库   </li><li>Highcharts.js  国外的前端数据可视化库，非商用免费，被许多国外大公司所使用  </li><li>AntV  蚂蚁金服全新一代数据可视化解决方案  等等</li><li>Highcharts 和 Echarts 就像是 Office 和 WPS 的关系</li></ul><blockquote><p>ECharts，一个使用 JavaScript 实现的开源可视化库，可以流畅的运行在 PC 和移动设备上，兼容当前绝大部分浏览器（IE8/9/10/11，Chrome，Firefox，Safari等），底层依赖矢量图形库 <a href="https://github.com/ecomfe/zrender">ZRender</a>，提供直观，交互丰富，可高度个性化定制的数据可视化图表。</p></blockquote><p>大白话：</p><ul><li>是一个JS插件</li><li>性能好可流畅运行PC与移动设备</li><li>兼容主流浏览器</li><li>提供很多常用图表，且可<strong>定制</strong>。<ul><li><a href="https://www.echartsjs.com/zh/option.html#series-line">折线图</a>、<a href="https://www.echartsjs.com/zh/option.html#series-bar">柱状图</a>、<a href="https://www.echartsjs.com/zh/option.html#series-scatter">散点图</a>、<a href="https://www.echartsjs.com/zh/option.html#series-pie">饼图</a>、<a href="https://www.echartsjs.com/zh/option.html#series-candlestick">K线图</a></li></ul></li></ul><p>官网地址：<a href="https://www.echartsjs.com/zh/index.html">https://www.echartsjs.com/zh/index.html</a></p><h3 id="10-Echarts-体验"><a href="#10-Echarts-体验" class="headerlink" title="10-Echarts-体验"></a>10-Echarts-体验</h3><p>官方教程：[五分钟上手ECharts](<a href="https://www.echartsjs.com/zh/tutorial.html#5">https://www.echartsjs.com/zh/tutorial.html#5</a> 分钟上手 ECharts)</p><ul><li>下载echarts  <a href="https://github.com/apache/incubator-echarts/tree/4.5.0">https://github.com/apache/incubator-echarts/tree/4.5.0</a>  </li></ul><p>使用步骤：</p><ol><li>引入echarts 插件文件到html页面中(图表依赖于这个js库)</li><li>准备一个具备大小的DOM容器(这个盒子必须有宽度和高度)</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 600px;height:400px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li> 初始化echarts实例对象–实例化echarts对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myChart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;main&#x27;</span>));</span><br></pre></td></tr></table></figure><ol start="4"><li>指定配置项和数据(option)–让echarts对象根据修改好的配置生效</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> option = &#123;</span><br><span class="line">    xAxis: &#123;</span><br><span class="line">        type: <span class="string">&#x27;category&#x27;</span>,</span><br><span class="line">        data: [<span class="string">&#x27;Mon&#x27;</span>, <span class="string">&#x27;Tue&#x27;</span>, <span class="string">&#x27;Wed&#x27;</span>, <span class="string">&#x27;Thu&#x27;</span>, <span class="string">&#x27;Fri&#x27;</span>, <span class="string">&#x27;Sat&#x27;</span>, <span class="string">&#x27;Sun&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    yAxis: &#123;</span><br><span class="line">        type: <span class="string">&#x27;value&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    series: [&#123;</span><br><span class="line">        data: [<span class="number">820</span>, <span class="number">932</span>, <span class="number">901</span>, <span class="number">934</span>, <span class="number">1290</span>, <span class="number">1330</span>, <span class="number">1320</span>],</span><br><span class="line">        type: <span class="string">&#x27;line&#x27;</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="5"><li>将配置项设置给echarts实例对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myChart.setOption(option);</span><br></pre></td></tr></table></figure><h3 id="11-Echarts-基础配置"><a href="#11-Echarts-基础配置" class="headerlink" title="11-Echarts-基础配置"></a>11-Echarts-基础配置</h3><p>立即执行函数妙用：为了防止变量污染，减少命名冲突，我们可以采取立即执行函数的写法，因为里面的变量都是局部变量<br>//柱状图1<br>(function(){<br>    var myChart = echarts.init(document.querySelector(‘.bar .chart’));<br>})();</p><p>这是要求同学们知道以下配置每个模块的主要作用干什么的就可以了</p><blockquote><p>需要了解的主要配置：<code>series</code> <code>xAxis</code> <code>yAxis</code> <code>grid</code> <code>tooltip</code> <code>title</code> <code>legend</code> <code>color</code> </p></blockquote><ul><li><p>series</p><ul><li>系列列表。每个系列通过 <code>type</code> 决定自己的图表类型</li><li>大白话：图标数据，指定什么类型的图标，可以多个图表重叠。</li></ul></li><li><p>xAxis：直角坐标系 grid 中的 x 轴</p><ul><li>boundaryGap: 坐标轴两边留白策略 true，这时候刻度只是作为分隔线，标签和数据点都会在两个刻度之间的带(band)中间。</li></ul></li><li><p>yAxis：直角坐标系 grid 中的 y 轴</p></li><li><p>grid：直角坐标系内绘图网格。 </p></li><li><p>title：标题组件</p></li><li><p>tooltip：图表提示框组件</p></li><li><p>legend：图例组件</p></li><li><p>color：调色盘颜色列表</p><p>数据堆叠，同个类目轴上系列配置相同的<code>stack</code>值后 后一个系列的值会在前一个系列的值上相加。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">option = &#123;</span><br><span class="line">    <span class="comment">// color设置我们线条的颜色 注意后面是个数组</span></span><br><span class="line">    color: [<span class="string">&#x27;pink&#x27;</span>, <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;skyblue&#x27;</span>],</span><br><span class="line">    <span class="comment">// 设置图表的标题</span></span><br><span class="line">    title: &#123;</span><br><span class="line">        text: <span class="string">&#x27;折线图堆叠123&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 图表的提示框组件 </span></span><br><span class="line">    tooltip: &#123;</span><br><span class="line">        <span class="comment">// 触发方式</span></span><br><span class="line">        trigger: <span class="string">&#x27;axis&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 图例组件</span></span><br><span class="line">    legend: &#123;</span><br><span class="line">       <span class="comment">// series里面有了 name值则 legend里面的data可以删掉</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 网格配置  grid可以控制线形图 柱状图 图表大小</span></span><br><span class="line">    grid: &#123;</span><br><span class="line">        left: <span class="string">&#x27;3%&#x27;</span>,</span><br><span class="line">        right: <span class="string">&#x27;4%&#x27;</span>,</span><br><span class="line">        bottom: <span class="string">&#x27;3%&#x27;</span>,</span><br><span class="line">        <span class="comment">// 是否显示刻度标签 如果是true 就显示 否则反之</span></span><br><span class="line">        containLabel: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 工具箱组件  可以另存为图片等功能</span></span><br><span class="line">    toolbox: &#123;</span><br><span class="line">        feature: &#123;</span><br><span class="line">            saveAsImage: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 设置x轴的相关配置</span></span><br><span class="line">    xAxis: &#123;</span><br><span class="line">        type: <span class="string">&#x27;category&#x27;</span>,</span><br><span class="line">        <span class="comment">// 是否让我们的线条和坐标轴有缝隙</span></span><br><span class="line">        boundaryGap: <span class="literal">false</span>,</span><br><span class="line">        data: [<span class="string">&#x27;星期一&#x27;</span>, <span class="string">&#x27;周二&#x27;</span>, <span class="string">&#x27;周三&#x27;</span>, <span class="string">&#x27;周四&#x27;</span>, <span class="string">&#x27;周五&#x27;</span>, <span class="string">&#x27;周六&#x27;</span>, <span class="string">&#x27;周日&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">     <span class="comment">// 设置y轴的相关配置</span></span><br><span class="line">    yAxis: &#123;</span><br><span class="line">        type: <span class="string">&#x27;value&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 系列图表配置 它决定着显示那种类型的图表</span></span><br><span class="line">    series: [</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">&#x27;邮件营销&#x27;</span>,</span><br><span class="line">            type: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">           </span><br><span class="line">            data: [<span class="number">120</span>, <span class="number">132</span>, <span class="number">101</span>, <span class="number">134</span>, <span class="number">90</span>, <span class="number">230</span>, <span class="number">210</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">&#x27;联盟广告&#x27;</span>,</span><br><span class="line">            type: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line"></span><br><span class="line">            data: [<span class="number">220</span>, <span class="number">182</span>, <span class="number">191</span>, <span class="number">234</span>, <span class="number">290</span>, <span class="number">330</span>, <span class="number">310</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">&#x27;视频广告&#x27;</span>,</span><br><span class="line">            type: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">          </span><br><span class="line">            data: [<span class="number">150</span>, <span class="number">232</span>, <span class="number">201</span>, <span class="number">154</span>, <span class="number">190</span>, <span class="number">330</span>, <span class="number">410</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">&#x27;直接访问&#x27;</span>,</span><br><span class="line">            type: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">          </span><br><span class="line">            data: [<span class="number">320</span>, <span class="number">332</span>, <span class="number">301</span>, <span class="number">334</span>, <span class="number">390</span>, <span class="number">330</span>, <span class="number">320</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="12-柱状图图表（两大步骤）"><a href="#12-柱状图图表（两大步骤）" class="headerlink" title="12- 柱状图图表（两大步骤）"></a>12- 柱状图图表（两大步骤）</h3><ul><li>官网找到类似实例， 适当分析，并且引入到HTML页面中</li><li>根据需求定制图表</li></ul><ol><li>引入到html页面中</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 柱状图1模块</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 实例化对象</span></span><br><span class="line">  <span class="keyword">let</span> myChart = echarts.init(<span class="built_in">document</span>.querySelector(<span class="string">&quot;.bar .chart&quot;</span>));</span><br><span class="line">  <span class="comment">// 指定配置和数据</span></span><br><span class="line">  <span class="keyword">let</span> option = &#123;</span><br><span class="line">    color: [<span class="string">&quot;#3398DB&quot;</span>],</span><br><span class="line">    tooltip: &#123;</span><br><span class="line">      trigger: <span class="string">&quot;axis&quot;</span>,</span><br><span class="line">      axisPointer: &#123;</span><br><span class="line">        <span class="comment">// 坐标轴指示器，坐标轴触发有效</span></span><br><span class="line">        type: <span class="string">&quot;shadow&quot;</span> <span class="comment">// 默认为直线，可选为：&#x27;line&#x27; | &#x27;shadow&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    grid: &#123;</span><br><span class="line">      left: <span class="string">&quot;3%&quot;</span>,</span><br><span class="line">      right: <span class="string">&quot;4%&quot;</span>,</span><br><span class="line">      bottom: <span class="string">&quot;3%&quot;</span>,</span><br><span class="line">      containLabel: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    xAxis: [</span><br><span class="line">      &#123;</span><br><span class="line">        type: <span class="string">&quot;category&quot;</span>,</span><br><span class="line">        data: [<span class="string">&quot;Mon&quot;</span>, <span class="string">&quot;Tue&quot;</span>, <span class="string">&quot;Wed&quot;</span>, <span class="string">&quot;Thu&quot;</span>, <span class="string">&quot;Fri&quot;</span>, <span class="string">&quot;Sat&quot;</span>, <span class="string">&quot;Sun&quot;</span>],</span><br><span class="line">        axisTick: &#123;</span><br><span class="line">          alignWithLabel: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    yAxis: [</span><br><span class="line">      &#123;</span><br><span class="line">        type: <span class="string">&quot;value&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    series: [</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">&quot;直接访问&quot;</span>,</span><br><span class="line">        type: <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">        barWidth: <span class="string">&quot;60%&quot;</span>,</span><br><span class="line">        data: [<span class="number">10</span>, <span class="number">52</span>, <span class="number">200</span>, <span class="number">334</span>, <span class="number">390</span>, <span class="number">330</span>, <span class="number">220</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 把配置给实例对象</span></span><br><span class="line">  myChart.setOption(option);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><ol start="2"><li><p>根据需求定制</p><ul><li>修改图表柱形颜色  #2f89cf</li></ul></li></ol><ul><li><p>修改图表大小  top 为 10px   bottom 为  4%    grid决定我们的柱状图的大小</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">color: [<span class="string">&quot;#2f89cf&quot;</span>],</span><br><span class="line">grid: &#123;</span><br><span class="line">  left: <span class="string">&quot;0%&quot;</span>,</span><br><span class="line">  top: <span class="string">&quot;10px&quot;</span>,</span><br><span class="line">  right: <span class="string">&quot;0%&quot;</span>,</span><br><span class="line">  bottom: <span class="string">&quot;4%&quot;</span>,</span><br><span class="line">  containLabel: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>X轴相关设置  xAxis</p><ul><li>文本颜色设置为   rgba(255,255,255,.6)   字体大小为 12px</li><li>X轴线的样式 不显示</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 设置x轴标签文字样式</span></span><br><span class="line"><span class="comment">// x轴的文字颜色和大小</span></span><br><span class="line">      axisLabel: &#123;</span><br><span class="line">        color: <span class="string">&quot;rgba(255,255,255,.6)&quot;</span>,</span><br><span class="line">        fontSize: <span class="string">&quot;12&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line"> <span class="comment">//  x轴样式不显示</span></span><br><span class="line"> axisLine: &#123;</span><br><span class="line">     show: <span class="literal">false</span></span><br><span class="line">     <span class="comment">// 如果想要设置单独的线条样式 </span></span><br><span class="line">     <span class="comment">// lineStyle: &#123;</span></span><br><span class="line">     <span class="comment">//    color: &quot;rgba(255,255,255,.1)&quot;,</span></span><br><span class="line">     <span class="comment">//    width: 1,</span></span><br><span class="line">     <span class="comment">//    type: &quot;solid&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>Y 轴相关定制</p><ul><li>文本颜色设置为   rgba(255,255,255,.6)   字体大小为 12px</li><li>Y 轴线条样式 更改为  1像素的  rgba(255,255,255,.1) 边框</li><li>分隔线的颜色修饰为  1像素的  rgba(255,255,255,.1)   </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// y 轴文字标签样式</span></span><br><span class="line">axisLabel: &#123;</span><br><span class="line">      color: <span class="string">&quot;rgba(255,255,255,.6)&quot;</span>,</span><br><span class="line">       fontSize: <span class="string">&quot;12&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"> <span class="comment">// y轴线条样式</span></span><br><span class="line"> axisLine: &#123;</span><br><span class="line">      lineStyle: &#123;</span><br><span class="line">         color: <span class="string">&quot;rgba(255,255,255,.1)&quot;</span>,</span><br><span class="line">         <span class="comment">// width: 1,</span></span><br><span class="line">         <span class="comment">// type: &quot;solid&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="number">5232</span>&#125;,</span><br><span class="line"> <span class="comment">// y 轴分隔线样式</span></span><br><span class="line">splitLine: &#123;</span><br><span class="line">    lineStyle: &#123;</span><br><span class="line">       color: <span class="string">&quot;rgba(255,255,255,.1)&quot;</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改柱形为圆角以及柱子宽度  series 里面设置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">series: [</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">&quot;直接访问&quot;</span>,</span><br><span class="line">        type: <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">        <span class="comment">// 修改柱子宽度</span></span><br><span class="line">        barWidth: <span class="string">&quot;35%&quot;</span>,</span><br><span class="line">        data: [<span class="number">10</span>, <span class="number">52</span>, <span class="number">200</span>, <span class="number">334</span>, <span class="number">390</span>, <span class="number">330</span>, <span class="number">220</span>],</span><br><span class="line">        itemStyle: &#123;</span><br><span class="line">          <span class="comment">// 修改柱子圆角</span></span><br><span class="line">          barBorderRadius: <span class="number">5</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure></li><li><p>更换对应数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// x轴中更换data数据</span></span><br><span class="line"> data: [ <span class="string">&quot;旅游行业&quot;</span>,<span class="string">&quot;教育培训&quot;</span>, <span class="string">&quot;游戏行业&quot;</span>, <span class="string">&quot;医疗行业&quot;</span>, <span class="string">&quot;电商行业&quot;</span>, <span class="string">&quot;社交行业&quot;</span>, <span class="string">&quot;金融行业&quot;</span> ],</span><br><span class="line"><span class="comment">// series 更换数据</span></span><br><span class="line"> data: [<span class="number">200</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">900</span>, <span class="number">1500</span>, <span class="number">1200</span>, <span class="number">600</span>]</span><br></pre></td></tr></table></figure></li><li><p>让图表跟随屏幕自适应</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;resize&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  myChart.resize();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="13-柱状图2定制"><a href="#13-柱状图2定制" class="headerlink" title="13-柱状图2定制"></a>13-柱状图2定制</h3><ul><li>官网找到类似实例， 适当分析，并且引入到HTML页面中</li><li>根据需求定制图表</li></ul><p>需求1： 修改图形大小 grid</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 图标位置</span></span><br><span class="line">  grid: &#123;</span><br><span class="line">    top: <span class="string">&quot;10%&quot;</span>,</span><br><span class="line">    left: <span class="string">&quot;22%&quot;</span>,</span><br><span class="line">    bottom: <span class="string">&quot;10%&quot;</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>需求2： 不显示x轴 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xAxis: &#123;</span><br><span class="line">   show: <span class="literal">false</span></span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><p>需求3： y轴相关定制</p><ul><li>不显示y轴线和相关刻度</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不显示y轴线条</span></span><br><span class="line">axisLine: &#123;</span><br><span class="line">    show: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="comment">// 不显示刻度</span></span><br><span class="line">axisTick: &#123;</span><br><span class="line">   show: <span class="literal">false</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>y轴文字的颜色设置为白色</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axisLabel: &#123;</span><br><span class="line">       color: <span class="string">&quot;#fff&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>需求4： 修改第一组柱子相关样式（条状）<br>红色保持不变，黑色变为红色的框，采用定位定到第一个柱子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">name: <span class="string">&quot;条&quot;</span>,</span><br><span class="line"><span class="comment">// 柱子之间的距离</span></span><br><span class="line">barCategoryGap: <span class="number">50</span>,</span><br><span class="line"><span class="comment">//柱子的宽度</span></span><br><span class="line">barWidth: <span class="number">10</span>,</span><br><span class="line"><span class="comment">// 柱子设为圆角</span></span><br><span class="line">itemStyle: &#123;</span><br><span class="line">    normal: &#123;</span><br><span class="line">      barBorderRadius: <span class="number">20</span>,       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>设置第一组柱子内百分比显示数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 图形上的文本标签</span></span><br><span class="line">label: &#123;</span><br><span class="line">    normal: &#123;</span><br><span class="line">         show: <span class="literal">true</span>,</span><br><span class="line">         <span class="comment">// 图形内显示</span></span><br><span class="line">         position: <span class="string">&quot;inside&quot;</span>,</span><br><span class="line">         <span class="comment">// 文字的显示格式</span></span><br><span class="line">         formatter: <span class="string">&quot;&#123;c&#125;%&quot;</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>设置第一组柱子不同颜色</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明颜色数组</span></span><br><span class="line"><span class="keyword">var</span> myColor = [<span class="string">&quot;#1089E7&quot;</span>, <span class="string">&quot;#F57474&quot;</span>, <span class="string">&quot;#56D0E3&quot;</span>, <span class="string">&quot;#F8B448&quot;</span>, <span class="string">&quot;#8B78F6&quot;</span>];</span><br><span class="line"><span class="comment">// 2. 给 itemStyle  里面的color 属性设置一个 返回值函数</span></span><br><span class="line">  itemStyle: &#123;</span><br><span class="line">          normal: &#123;</span><br><span class="line">            barBorderRadius: <span class="number">20</span>,  </span><br><span class="line">            <span class="comment">// params 传进来的是柱子对象</span></span><br><span class="line">            <span class="comment">//console.log(params);</span></span><br><span class="line">            <span class="comment">// dataIndex 是当前柱子的索引号</span></span><br><span class="line">            <span class="keyword">return</span> myColor[params.dataIndex];</span><br><span class="line">          &#125;</span><br><span class="line">         </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>需求5： 修改第二组柱子的相关配置（框状）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> name: <span class="string">&quot;框&quot;</span>,</span><br><span class="line">  type: <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">  barCategoryGap: <span class="number">50</span>,</span><br><span class="line">  barWidth: <span class="number">15</span>,</span><br><span class="line">  itemStyle: &#123;</span><br><span class="line">      color: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">      borderColor: <span class="string">&quot;#00c1de&quot;</span>,</span><br><span class="line">      borderWidth: <span class="number">3</span>,</span><br><span class="line">      barBorderRadius: <span class="number">15</span></span><br><span class="line">  &#125;,</span><br><span class="line">  data: [<span class="number">19325</span>, <span class="number">23438</span>, <span class="number">31000</span>, <span class="number">121594</span>, <span class="number">134141</span>, <span class="number">681807</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需求6： 给y轴添加第二组数据<br>y轴中两组对象，series中也是两种对象，他们一一对应</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">yAxis: [</span><br><span class="line">      &#123;</span><br><span class="line">      type: <span class="string">&quot;category&quot;</span>,</span><br><span class="line">      data: [<span class="string">&quot;印尼&quot;</span>, <span class="string">&quot;美国&quot;</span>, <span class="string">&quot;印度&quot;</span>, <span class="string">&quot;中国&quot;</span>, <span class="string">&quot;世界人口(万)&quot;</span>],</span><br><span class="line">      <span class="comment">// 不显示y轴的线</span></span><br><span class="line">      axisLine: &#123;</span><br><span class="line">        show: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 不显示刻度</span></span><br><span class="line">      axisTick: &#123;</span><br><span class="line">        show: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 把刻度标签里面的文字颜色设置为白色</span></span><br><span class="line">      axisLabel: &#123;</span><br><span class="line">        color: <span class="string">&quot;#fff&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        show: <span class="literal">true</span>,</span><br><span class="line">        data: [<span class="number">702</span>, <span class="number">350</span>, <span class="number">610</span>, <span class="number">793</span>, <span class="number">664</span>],</span><br><span class="line">           <span class="comment">// 不显示y轴的线</span></span><br><span class="line">      axisLine: &#123;</span><br><span class="line">        show: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 不显示刻度</span></span><br><span class="line">      axisTick: &#123;</span><br><span class="line">        show: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">        axisLabel: &#123;</span><br><span class="line">          textStyle: &#123;</span><br><span class="line">            fontSize: <span class="number">12</span>,</span><br><span class="line">            color: <span class="string">&quot;#fff&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br></pre></td></tr></table></figure><p>需求7： 设置两组柱子层叠以及更换数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给series  第一个对象里面的 添加 </span></span><br><span class="line">yAxisIndex: <span class="number">0</span>,</span><br><span class="line"><span class="comment">// 给series  第二个对象里面的 添加 </span></span><br><span class="line">yAxisIndex: <span class="number">1</span>,</span><br><span class="line"><span class="comment">// series 第一个对象里面的data</span></span><br><span class="line">data: [<span class="number">70</span>, <span class="number">34</span>, <span class="number">60</span>, <span class="number">78</span>, <span class="number">69</span>],</span><br><span class="line"><span class="comment">// series 第二个对象里面的data</span></span><br><span class="line">data: [<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>],</span><br><span class="line"><span class="comment">// y轴更换第一个对象更换data数据</span></span><br><span class="line">data: [<span class="string">&quot;HTML5&quot;</span>, <span class="string">&quot;CSS3&quot;</span>, <span class="string">&quot;javascript&quot;</span>, <span class="string">&quot;VUE&quot;</span>, <span class="string">&quot;NODE&quot;</span>],</span><br><span class="line"><span class="comment">// y轴更换第二个对象更换data数据</span></span><br><span class="line">data:[<span class="number">702</span>, <span class="number">350</span>, <span class="number">610</span>, <span class="number">793</span>, <span class="number">664</span>],</span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 柱状图2</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> myColor = [<span class="string">&quot;#1089E7&quot;</span>, <span class="string">&quot;#F57474&quot;</span>, <span class="string">&quot;#56D0E3&quot;</span>, <span class="string">&quot;#F8B448&quot;</span>, <span class="string">&quot;#8B78F6&quot;</span>];</span><br><span class="line">  <span class="comment">// 1. 实例化对象</span></span><br><span class="line">  <span class="keyword">var</span> myChart = echarts.init(<span class="built_in">document</span>.querySelector(<span class="string">&quot;.bar2 .chart&quot;</span>));</span><br><span class="line">  <span class="comment">// 2. 指定配置和数据</span></span><br><span class="line">  <span class="keyword">var</span> option = &#123;</span><br><span class="line">    grid: &#123;</span><br><span class="line">      top: <span class="string">&quot;10%&quot;</span>,</span><br><span class="line">      left: <span class="string">&quot;22%&quot;</span>,</span><br><span class="line">      bottom: <span class="string">&quot;10%&quot;</span></span><br><span class="line">      <span class="comment">// containLabel: true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 不显示x轴的相关信息</span></span><br><span class="line">    xAxis: &#123;</span><br><span class="line">      show: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    yAxis: [</span><br><span class="line">      &#123;</span><br><span class="line">        type: <span class="string">&quot;category&quot;</span>,</span><br><span class="line">        inverse: <span class="literal">true</span>,</span><br><span class="line">        data: [<span class="string">&quot;HTML5&quot;</span>, <span class="string">&quot;CSS3&quot;</span>, <span class="string">&quot;javascript&quot;</span>, <span class="string">&quot;VUE&quot;</span>, <span class="string">&quot;NODE&quot;</span>],</span><br><span class="line">        <span class="comment">// 不显示y轴的线</span></span><br><span class="line">        axisLine: &#123;</span><br><span class="line">          show: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 不显示刻度</span></span><br><span class="line">        axisTick: &#123;</span><br><span class="line">          show: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 把刻度标签里面的文字颜色设置为白色</span></span><br><span class="line">        axisLabel: &#123;</span><br><span class="line">          color: <span class="string">&quot;#fff&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        data: [<span class="number">702</span>, <span class="number">350</span>, <span class="number">610</span>, <span class="number">793</span>, <span class="number">664</span>],</span><br><span class="line">        inverse: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 不显示y轴的线</span></span><br><span class="line">        axisLine: &#123;</span><br><span class="line">          show: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 不显示刻度</span></span><br><span class="line">        axisTick: &#123;</span><br><span class="line">          show: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 把刻度标签里面的文字颜色设置为白色</span></span><br><span class="line">        axisLabel: &#123;</span><br><span class="line">          color: <span class="string">&quot;#fff&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    series: [</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">&quot;条&quot;</span>,</span><br><span class="line">        type: <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">        data: [<span class="number">70</span>, <span class="number">34</span>, <span class="number">60</span>, <span class="number">78</span>, <span class="number">69</span>],</span><br><span class="line">        yAxisIndex: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 修改第一组柱子的圆角</span></span><br><span class="line">        itemStyle: &#123;</span><br><span class="line">          barBorderRadius: <span class="number">20</span>,</span><br><span class="line">          <span class="comment">// 此时的color 可以修改柱子的颜色</span></span><br><span class="line">          color: <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// params 传进来的是柱子对象</span></span><br><span class="line">            <span class="built_in">console</span>.log(params);</span><br><span class="line">            <span class="comment">// dataIndex 是当前柱子的索引号</span></span><br><span class="line">            <span class="keyword">return</span> myColor[params.dataIndex];</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 柱子之间的距离</span></span><br><span class="line">        barCategoryGap: <span class="number">50</span>,</span><br><span class="line">        <span class="comment">//柱子的宽度</span></span><br><span class="line">        barWidth: <span class="number">10</span>,</span><br><span class="line">        <span class="comment">// 显示柱子内的文字</span></span><br><span class="line">        label: &#123;</span><br><span class="line">          show: <span class="literal">true</span>,</span><br><span class="line">          position: <span class="string">&quot;inside&quot;</span>,</span><br><span class="line">          <span class="comment">// &#123;c&#125; 会自动的解析为 数据  data里面的数据</span></span><br><span class="line">          formatter: <span class="string">&quot;&#123;c&#125;%&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">&quot;框&quot;</span>,</span><br><span class="line">        type: <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">        barCategoryGap: <span class="number">50</span>,</span><br><span class="line">        barWidth: <span class="number">15</span>,</span><br><span class="line">        yAxisIndex: <span class="number">1</span>,</span><br><span class="line">        data: [<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>],</span><br><span class="line">        itemStyle: &#123;</span><br><span class="line">          color: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">          borderColor: <span class="string">&quot;#00c1de&quot;</span>,</span><br><span class="line">          borderWidth: <span class="number">3</span>,</span><br><span class="line">          barBorderRadius: <span class="number">15</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 把配置给实例对象</span></span><br><span class="line">  myChart.setOption(option);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="14-折线图1-人员变化模块制作"><a href="#14-折线图1-人员变化模块制作" class="headerlink" title="14-折线图1 人员变化模块制作"></a>14-折线图1 人员变化模块制作</h3><ul><li>官网找到类似实例， 适当分析，并且引入到HTML页面中</li><li>根据需求定制图表</li></ul><p>需求1： 修改折线图大小，显示边框设置颜色：#012f4a，并且显示刻度标签。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置网格样式</span></span><br><span class="line">grid: &#123; </span><br><span class="line">  top: <span class="string">&#x27;20%&#x27;</span>,</span><br><span class="line">  left: <span class="string">&#x27;3%&#x27;</span>,</span><br><span class="line">  right: <span class="string">&#x27;4%&#x27;</span>,</span><br><span class="line">  bottom: <span class="string">&#x27;3%&#x27;</span>,</span><br><span class="line">  show: <span class="literal">true</span>,<span class="comment">// 显示边框</span></span><br><span class="line">  borderColor: <span class="string">&#x27;#012f4a&#x27;</span>,<span class="comment">// 边框颜色</span></span><br><span class="line">  containLabel: <span class="literal">true</span> <span class="comment">// 包含刻度文字在内</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>需求2： 修改图例组件中的文字颜色 #4c9bfd， 距离右侧 right 为 10%</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 图例组件</span></span><br><span class="line">   legend: &#123;</span><br><span class="line">     textStyle: &#123;</span><br><span class="line">       color: <span class="string">&#x27;#4c9bfd&#x27;</span> <span class="comment">// 图例文字颜色</span></span><br><span class="line">     &#125;,</span><br><span class="line">     right: <span class="string">&#x27;10%&#x27;</span> <span class="comment">// 距离右边10%</span></span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure><p>需求3： x轴相关配置</p><ul><li>刻度去除</li><li>x轴刻度标签字体颜色：#4c9bfd</li><li>剔除x坐标轴线颜色（将来使用Y轴分割线)</li><li>轴两端是不需要内间距 boundaryGap</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> xAxis: &#123;</span><br><span class="line">   type: <span class="string">&#x27;category&#x27;</span>,</span><br><span class="line">   data: [<span class="string">&quot;周一&quot;</span>, <span class="string">&quot;周二&quot;</span>],</span><br><span class="line">axisTick: &#123;</span><br><span class="line">      show: <span class="literal">false</span> <span class="comment">// 去除刻度线</span></span><br><span class="line">    &#125;,</span><br><span class="line">    axisLabel: &#123;</span><br><span class="line">      color: <span class="string">&#x27;#4c9bfd&#x27;</span> <span class="comment">// 文本颜色</span></span><br><span class="line">    &#125;,</span><br><span class="line">    axisLine: &#123;</span><br><span class="line">      show: <span class="literal">false</span> <span class="comment">// 去除轴线</span></span><br><span class="line">    &#125;,</span><br><span class="line">    boundaryGap: <span class="literal">false</span>  <span class="comment">// 去除轴内间距</span></span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><p>需求4： y轴的定制</p><ul><li>刻度去除</li><li>字体颜色：#4c9bfd</li><li>分割线颜色：#012f4a</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">yAxis: &#123;</span><br><span class="line">  type: <span class="string">&#x27;value&#x27;</span>,</span><br><span class="line">  axisTick: &#123;</span><br><span class="line">    show: <span class="literal">false</span>  <span class="comment">// 去除刻度</span></span><br><span class="line">  &#125;,</span><br><span class="line">  axisLabel: &#123;</span><br><span class="line">    color: <span class="string">&#x27;#4c9bfd&#x27;</span> <span class="comment">// 文字颜色</span></span><br><span class="line">  &#125;,</span><br><span class="line">  splitLine: &#123;</span><br><span class="line">    lineStyle: &#123;</span><br><span class="line">      color: <span class="string">&#x27;#012f4a&#x27;</span> <span class="comment">// 分割线颜色</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>需求5： 两条线形图定制</p><ul><li>颜色分别：#00f2f1  #ed3f35</li><li>把折线修饰为圆滑 series 数据中添加 smooth 为 true</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">   color: [<span class="string">&#x27;#00f2f1&#x27;</span>, <span class="string">&#x27;#ed3f35&#x27;</span>],</span><br><span class="line">series: [&#123;</span><br><span class="line">     name:<span class="string">&#x27;新增粉丝&#x27;</span>,</span><br><span class="line">     data: [<span class="number">820</span>, <span class="number">932</span>, <span class="number">901</span>, <span class="number">934</span>, <span class="number">1290</span>, <span class="number">1330</span>, <span class="number">1320</span>],</span><br><span class="line">     type: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">     <span class="comment">// 折线修饰为圆滑</span></span><br><span class="line">     smooth: <span class="literal">true</span>,</span><br><span class="line">     &#125;,&#123;</span><br><span class="line">     name:<span class="string">&#x27;新增游客&#x27;</span>,</span><br><span class="line">     data: [<span class="number">100</span>, <span class="number">331</span>, <span class="number">200</span>, <span class="number">123</span>, <span class="number">233</span>, <span class="number">543</span>, <span class="number">400</span>],</span><br><span class="line">     type: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">     smooth: <span class="literal">true</span>,</span><br><span class="line">   &#125;]</span><br></pre></td></tr></table></figure><p>需求6： 配置数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// x轴的文字</span></span><br><span class="line">xAxis: &#123;</span><br><span class="line">  type: <span class="string">&#x27;category&#x27;</span>,</span><br><span class="line">  data: [<span class="string">&#x27;1月&#x27;</span>, <span class="string">&#x27;2月&#x27;</span>, <span class="string">&#x27;3月&#x27;</span>, <span class="string">&#x27;4月&#x27;</span>, <span class="string">&#x27;5月&#x27;</span>, <span class="string">&#x27;6月&#x27;</span>, <span class="string">&#x27;7月&#x27;</span>, <span class="string">&#x27;8月&#x27;</span>, <span class="string">&#x27;9月&#x27;</span>, <span class="string">&#x27;10月&#x27;</span>, <span class="string">&#x27;11月&#x27;</span>, <span class="string">&#x27;12月&#x27;</span>],</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 图标数据</span></span><br><span class="line">    series: [&#123;</span><br><span class="line">      name:<span class="string">&#x27;新增粉丝&#x27;</span>,</span><br><span class="line">      data:  [<span class="number">24</span>, <span class="number">40</span>, <span class="number">101</span>, <span class="number">134</span>, <span class="number">90</span>, <span class="number">230</span>, <span class="number">210</span>, <span class="number">230</span>, <span class="number">120</span>, <span class="number">230</span>, <span class="number">210</span>, <span class="number">120</span>],</span><br><span class="line">      type: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">      smooth: <span class="literal">true</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      name:<span class="string">&#x27;新增游客&#x27;</span>,</span><br><span class="line">      data: [<span class="number">40</span>, <span class="number">64</span>, <span class="number">191</span>, <span class="number">324</span>, <span class="number">290</span>, <span class="number">330</span>, <span class="number">310</span>, <span class="number">213</span>, <span class="number">180</span>, <span class="number">200</span>, <span class="number">180</span>, <span class="number">79</span>],     </span><br><span class="line">      type: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">      smooth: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;]</span><br></pre></td></tr></table></figure><p>需求7： 新增需求  点击 2020年   2021年 数据发生变化</p><p>以下是后台送过来数据（ajax请求过来的）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> yearData = [</span><br><span class="line">     &#123;</span><br><span class="line">       year: <span class="string">&#x27;2020&#x27;</span>,  <span class="comment">// 年份</span></span><br><span class="line">       data: [  <span class="comment">// 两个数组是因为有两条线</span></span><br><span class="line">            [<span class="number">24</span>, <span class="number">40</span>, <span class="number">101</span>, <span class="number">134</span>, <span class="number">90</span>, <span class="number">230</span>, <span class="number">210</span>, <span class="number">230</span>, <span class="number">120</span>, <span class="number">230</span>, <span class="number">210</span>, <span class="number">120</span>],</span><br><span class="line">            [<span class="number">40</span>, <span class="number">64</span>, <span class="number">191</span>, <span class="number">324</span>, <span class="number">290</span>, <span class="number">330</span>, <span class="number">310</span>, <span class="number">213</span>, <span class="number">180</span>, <span class="number">200</span>, <span class="number">180</span>, <span class="number">79</span>]</span><br><span class="line">         ]</span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">       year: <span class="string">&#x27;2021&#x27;</span>,  <span class="comment">// 年份</span></span><br><span class="line">       data: [  <span class="comment">// 两个数组是因为有两条线</span></span><br><span class="line">            [<span class="number">123</span>, <span class="number">175</span>, <span class="number">112</span>, <span class="number">197</span>, <span class="number">121</span>, <span class="number">67</span>, <span class="number">98</span>, <span class="number">21</span>, <span class="number">43</span>, <span class="number">64</span>, <span class="number">76</span>, <span class="number">38</span>],</span><br><span class="line">    [<span class="number">143</span>, <span class="number">131</span>, <span class="number">165</span>, <span class="number">123</span>, <span class="number">178</span>, <span class="number">21</span>, <span class="number">82</span>, <span class="number">64</span>, <span class="number">43</span>, <span class="number">60</span>, <span class="number">19</span>, <span class="number">34</span>]</span><br><span class="line">         ]</span><br><span class="line">     &#125;</span><br><span class="line">    ];</span><br></pre></td></tr></table></figure><ul><li>tab栏切换事件</li><li>点击2020按钮   需要把 series 第一个对象里面的data  换成  2020年对象里面data[0] </li><li>点击2020按钮   需要把 series 第二个对象里面的data  换成  2020年对象里面data[1] </li><li>2021 按钮同样道理</li></ul><p>完整代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 折线图1模块制作</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> yearData = [</span><br><span class="line">    &#123;</span><br><span class="line">      year: <span class="string">&quot;2020&quot;</span>, <span class="comment">// 年份</span></span><br><span class="line">      data: [</span><br><span class="line">        <span class="comment">// 两个数组是因为有两条线</span></span><br><span class="line">        [<span class="number">24</span>, <span class="number">40</span>, <span class="number">101</span>, <span class="number">134</span>, <span class="number">90</span>, <span class="number">230</span>, <span class="number">210</span>, <span class="number">230</span>, <span class="number">120</span>, <span class="number">230</span>, <span class="number">210</span>, <span class="number">120</span>],</span><br><span class="line">        [<span class="number">40</span>, <span class="number">64</span>, <span class="number">191</span>, <span class="number">324</span>, <span class="number">290</span>, <span class="number">330</span>, <span class="number">310</span>, <span class="number">213</span>, <span class="number">180</span>, <span class="number">200</span>, <span class="number">180</span>, <span class="number">79</span>]</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      year: <span class="string">&quot;2021&quot;</span>, <span class="comment">// 年份</span></span><br><span class="line">      data: [</span><br><span class="line">        <span class="comment">// 两个数组是因为有两条线</span></span><br><span class="line">        [<span class="number">123</span>, <span class="number">175</span>, <span class="number">112</span>, <span class="number">197</span>, <span class="number">121</span>, <span class="number">67</span>, <span class="number">98</span>, <span class="number">21</span>, <span class="number">43</span>, <span class="number">64</span>, <span class="number">76</span>, <span class="number">38</span>],</span><br><span class="line">        [<span class="number">143</span>, <span class="number">131</span>, <span class="number">165</span>, <span class="number">123</span>, <span class="number">178</span>, <span class="number">21</span>, <span class="number">82</span>, <span class="number">64</span>, <span class="number">43</span>, <span class="number">60</span>, <span class="number">19</span>, <span class="number">34</span>]</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ];</span><br><span class="line">  <span class="comment">// 1. 实例化对象</span></span><br><span class="line">  <span class="keyword">var</span> myChart = echarts.init(<span class="built_in">document</span>.querySelector(<span class="string">&quot;.line .chart&quot;</span>));</span><br><span class="line">  <span class="comment">// 2.指定配置</span></span><br><span class="line">  <span class="keyword">var</span> option = &#123;</span><br><span class="line">    <span class="comment">// 通过这个color修改两条线的颜色</span></span><br><span class="line">    color: [<span class="string">&quot;#00f2f1&quot;</span>, <span class="string">&quot;#ed3f35&quot;</span>],</span><br><span class="line">    tooltip: &#123;</span><br><span class="line">      trigger: <span class="string">&quot;axis&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    legend: &#123;</span><br><span class="line">      <span class="comment">// 如果series 对象有name 值，则 legend可以不用写data</span></span><br><span class="line">      <span class="comment">// 修改图例组件 文字颜色</span></span><br><span class="line">      textStyle: &#123;</span><br><span class="line">        color: <span class="string">&quot;#4c9bfd&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 这个10% 必须加引号</span></span><br><span class="line">      right: <span class="string">&quot;10%&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    grid: &#123;</span><br><span class="line">      top: <span class="string">&quot;20%&quot;</span>,</span><br><span class="line">      left: <span class="string">&quot;3%&quot;</span>,</span><br><span class="line">      right: <span class="string">&quot;4%&quot;</span>,</span><br><span class="line">      bottom: <span class="string">&quot;3%&quot;</span>,</span><br><span class="line">      show: <span class="literal">true</span>, <span class="comment">// 显示边框</span></span><br><span class="line">      borderColor: <span class="string">&quot;#012f4a&quot;</span>, <span class="comment">// 边框颜色</span></span><br><span class="line">      containLabel: <span class="literal">true</span> <span class="comment">// 包含刻度文字在内</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    xAxis: &#123;</span><br><span class="line">      type: <span class="string">&quot;category&quot;</span>,</span><br><span class="line">      boundaryGap: <span class="literal">false</span>,</span><br><span class="line">      data: [</span><br><span class="line">        <span class="string">&quot;1月&quot;</span>,</span><br><span class="line">        <span class="string">&quot;2月&quot;</span>,</span><br><span class="line">        <span class="string">&quot;3月&quot;</span>,</span><br><span class="line">        <span class="string">&quot;4月&quot;</span>,</span><br><span class="line">        <span class="string">&quot;5月&quot;</span>,</span><br><span class="line">        <span class="string">&quot;6月&quot;</span>,</span><br><span class="line">        <span class="string">&quot;7月&quot;</span>,</span><br><span class="line">        <span class="string">&quot;8月&quot;</span>,</span><br><span class="line">        <span class="string">&quot;9月&quot;</span>,</span><br><span class="line">        <span class="string">&quot;10月&quot;</span>,</span><br><span class="line">        <span class="string">&quot;11月&quot;</span>,</span><br><span class="line">        <span class="string">&quot;12月&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      axisTick: &#123;</span><br><span class="line">        show: <span class="literal">false</span> <span class="comment">// 去除刻度线</span></span><br><span class="line">      &#125;,</span><br><span class="line">      axisLabel: &#123;</span><br><span class="line">        color: <span class="string">&quot;#4c9bfd&quot;</span> <span class="comment">// 文本颜色</span></span><br><span class="line">      &#125;,</span><br><span class="line">      axisLine: &#123;</span><br><span class="line">        show: <span class="literal">false</span> <span class="comment">// 去除轴线</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    yAxis: &#123;</span><br><span class="line">      type: <span class="string">&quot;value&quot;</span>,</span><br><span class="line">      axisTick: &#123;</span><br><span class="line">        show: <span class="literal">false</span> <span class="comment">// 去除刻度线</span></span><br><span class="line">      &#125;,</span><br><span class="line">      axisLabel: &#123;</span><br><span class="line">        color: <span class="string">&quot;#4c9bfd&quot;</span> <span class="comment">// 文本颜色</span></span><br><span class="line">      &#125;,</span><br><span class="line">      axisLine: &#123;</span><br><span class="line">        show: <span class="literal">false</span> <span class="comment">// 去除轴线</span></span><br><span class="line">      &#125;,</span><br><span class="line">      splitLine: &#123;</span><br><span class="line">        lineStyle: &#123;</span><br><span class="line">          color: <span class="string">&quot;#012f4a&quot;</span> <span class="comment">// 分割线颜色</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    series: [</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">&quot;新增粉丝&quot;</span>,</span><br><span class="line">        type: <span class="string">&quot;line&quot;</span>,</span><br><span class="line">        <span class="comment">// true 可以让我们的折线显示带有弧度</span></span><br><span class="line">        smooth: <span class="literal">true</span>,</span><br><span class="line">        data: yearData[<span class="number">0</span>].data[<span class="number">0</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">&quot;新增游客&quot;</span>,</span><br><span class="line">        type: <span class="string">&quot;line&quot;</span>,</span><br><span class="line">        smooth: <span class="literal">true</span>,</span><br><span class="line">        data: yearData[<span class="number">0</span>].data[<span class="number">1</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 把配置给实例对象</span></span><br><span class="line">  myChart.setOption(option);</span><br><span class="line">  <span class="comment">// 4. 让图表跟随屏幕自动的去适应</span></span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">&quot;resize&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    myChart.resize();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 5.点击切换效果</span></span><br><span class="line">  $(<span class="string">&quot;.line h2&quot;</span>).on(<span class="string">&quot;click&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// alert(1);</span></span><br><span class="line">    <span class="comment">// console.log($(this).index());</span></span><br><span class="line">    <span class="comment">// 点击 a 之后 根据当前a的索引号 找到对应的 yearData的相关对象</span></span><br><span class="line">    <span class="comment">// console.log(yearData[$(this).index()]);</span></span><br><span class="line">    <span class="keyword">var</span> obj = yearData[$(<span class="built_in">this</span>).index()];</span><br><span class="line">    option.series[<span class="number">0</span>].data = obj.data[<span class="number">0</span>];</span><br><span class="line">    option.series[<span class="number">1</span>].data = obj.data[<span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 需要重新渲染</span></span><br><span class="line">    myChart.setOption(option);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="15-折线图2-播放量模块制作"><a href="#15-折线图2-播放量模块制作" class="headerlink" title="15-折线图2 播放量模块制作"></a>15-折线图2 播放量模块制作</h3><p>报错：Uncaught TypeError: (intermediate value)(intermediate value)(intermediate value)(intermediate value)(intermediate value)<br>记得每个闭合的function包后面加;</p><ul><li>官网找到类似实例， 适当分析，并且引入到HTML页面中</li><li>根据需求定制图表</li></ul><p>需求1： 更换图例组件文字颜色 rgba(255,255,255,.5)  文字大小为12</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> legend: &#123;</span><br><span class="line">      top: <span class="string">&quot;0%&quot;</span>,</span><br><span class="line">      textStyle: &#123;</span><br><span class="line">        color: <span class="string">&quot;rgba(255,255,255,.5)&quot;</span>,</span><br><span class="line">        fontSize: <span class="string">&quot;12&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>需求2： 修改图表大小</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">grid: &#123;</span><br><span class="line">      left: <span class="string">&quot;10&quot;</span>,</span><br><span class="line">      top: <span class="string">&quot;30&quot;</span>,</span><br><span class="line">      right: <span class="string">&quot;10&quot;</span>,</span><br><span class="line">      bottom: <span class="string">&quot;10&quot;</span>,</span><br><span class="line">      containLabel: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>需求3： 修改x轴相关配置</p><ul><li>修改文本颜色为rgba(255,255,255,.6)  文字大小为 12</li><li>x轴线的颜色为   rgba(255,255,255,.2)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文本颜色为rgba(255,255,255,.6)  文字大小为 12</span></span><br><span class="line">axisLabel: &#123;</span><br><span class="line">     textStyle: &#123;</span><br><span class="line">       color: <span class="string">&quot;rgba(255,255,255,.6)&quot;</span>,</span><br><span class="line">       fontSize: <span class="number">12</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">    <span class="comment">// x轴线的颜色为   rgba(255,255,255,.2)</span></span><br><span class="line">   axisLine: &#123;</span><br><span class="line">     lineStyle: &#123;</span><br><span class="line">       color: <span class="string">&quot;rgba(255,255,255,.2)&quot;</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure><p>需求4： 修改y轴的相关配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    axisTick: &#123; <span class="attr">show</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">    axisLine: &#123;</span><br><span class="line">      lineStyle: &#123;</span><br><span class="line">        color: <span class="string">&quot;rgba(255,255,255,.1)&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    axisLabel: &#123;</span><br><span class="line">      textStyle: &#123;</span><br><span class="line">        color: <span class="string">&quot;rgba(255,255,255,.6)&quot;</span>,</span><br><span class="line">        fontSize: <span class="number">12</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="comment">// 修改分割线的颜色</span></span><br><span class="line">    splitLine: &#123;</span><br><span class="line">      lineStyle: &#123;</span><br><span class="line">        color: <span class="string">&quot;rgba(255,255,255,.1)&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><p>需求5： 修改两个线模块配置(注意在series 里面定制)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一条 线是圆滑</span></span><br><span class="line">smooth: <span class="literal">true</span>,</span><br><span class="line"> <span class="comment">// 单独修改线的样式</span></span><br><span class="line"> lineStyle: &#123;</span><br><span class="line">     color: <span class="string">&quot;#0184d5&quot;</span>,</span><br><span class="line">     width: <span class="number">2</span> </span><br><span class="line"> &#125;,</span><br><span class="line">  <span class="comment">// 填充区域</span></span><br><span class="line"> areaStyle: &#123;</span><br><span class="line">       <span class="comment">// 渐变色，只需要复制即可</span></span><br><span class="line">     color: <span class="keyword">new</span> echarts.graphic.LinearGradient(</span><br><span class="line">       <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>,</span><br><span class="line">       <span class="number">1</span>,</span><br><span class="line">       [</span><br><span class="line">         &#123;</span><br><span class="line">           offset: <span class="number">0</span>,</span><br><span class="line">           color: <span class="string">&quot;rgba(1, 132, 213, 0.4)&quot;</span>   <span class="comment">// 渐变色的起始颜色</span></span><br><span class="line">         &#125;,</span><br><span class="line">         &#123;</span><br><span class="line">           offset: <span class="number">0.8</span>,</span><br><span class="line">           color: <span class="string">&quot;rgba(1, 132, 213, 0.1)&quot;</span>   <span class="comment">// 渐变线的结束颜色</span></span><br><span class="line">         &#125;</span><br><span class="line">       ],</span><br><span class="line">       <span class="literal">false</span></span><br><span class="line">     ),</span><br><span class="line">     shadowColor: <span class="string">&quot;rgba(0, 0, 0, 0.1)&quot;</span></span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="comment">// 设置拐点 小圆点</span></span><br><span class="line"> symbol: <span class="string">&quot;circle&quot;</span>,</span><br><span class="line"> <span class="comment">// 拐点大小</span></span><br><span class="line"> symbolSize: <span class="number">8</span>,</span><br><span class="line"> <span class="comment">// 设置拐点颜色以及边框</span></span><br><span class="line">itemStyle: &#123;</span><br><span class="line">     color: <span class="string">&quot;#0184d5&quot;</span>,</span><br><span class="line">     borderColor: <span class="string">&quot;rgba(221, 220, 107, .1)&quot;</span>,</span><br><span class="line">     borderWidth: <span class="number">12</span></span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="comment">// 开始不显示拐点， 鼠标经过显示</span></span><br><span class="line"> showSymbol: <span class="literal">false</span>,</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">name: <span class="string">&quot;转发量&quot;</span>,</span><br><span class="line"> type: <span class="string">&quot;line&quot;</span>,</span><br><span class="line"> smooth: <span class="literal">true</span>,</span><br><span class="line"> lineStyle: &#123;</span><br><span class="line">   normal: &#123;</span><br><span class="line">     color: <span class="string">&quot;#00d887&quot;</span>,</span><br><span class="line">     width: <span class="number">2</span></span><br><span class="line">   &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  areaStyle: &#123;</span><br><span class="line">   normal: &#123;</span><br><span class="line">     color: <span class="keyword">new</span> echarts.graphic.LinearGradient(</span><br><span class="line">       <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>,</span><br><span class="line">       <span class="number">1</span>,</span><br><span class="line">       [</span><br><span class="line">         &#123;</span><br><span class="line">           offset: <span class="number">0</span>,</span><br><span class="line">           color: <span class="string">&quot;rgba(0, 216, 135, 0.4)&quot;</span></span><br><span class="line">         &#125;,</span><br><span class="line">         &#123;</span><br><span class="line">           offset: <span class="number">0.8</span>,</span><br><span class="line">           color: <span class="string">&quot;rgba(0, 216, 135, 0.1)&quot;</span></span><br><span class="line">         &#125;</span><br><span class="line">       ],</span><br><span class="line">       <span class="literal">false</span></span><br><span class="line">     ),</span><br><span class="line">     shadowColor: <span class="string">&quot;rgba(0, 0, 0, 0.1)&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="comment">// 设置拐点 小圆点</span></span><br><span class="line"> symbol: <span class="string">&quot;circle&quot;</span>,</span><br><span class="line"> <span class="comment">// 拐点大小</span></span><br><span class="line"> symbolSize: <span class="number">5</span>,</span><br><span class="line"> <span class="comment">// 设置拐点颜色以及边框</span></span><br><span class="line">  itemStyle: &#123;</span><br><span class="line">     color: <span class="string">&quot;#00d887&quot;</span>,</span><br><span class="line">     borderColor: <span class="string">&quot;rgba(221, 220, 107, .1)&quot;</span>,</span><br><span class="line">     borderWidth: <span class="number">12</span></span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="comment">// 开始不显示拐点， 鼠标经过显示</span></span><br><span class="line"> showSymbol: <span class="literal">false</span>,</span><br></pre></td></tr></table></figure><p>需求6： 更换数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// x轴更换数据</span></span><br><span class="line">data: [ <span class="string">&quot;01&quot;</span>,<span class="string">&quot;02&quot;</span>,<span class="string">&quot;03&quot;</span>,<span class="string">&quot;04&quot;</span>,<span class="string">&quot;05&quot;</span>,<span class="string">&quot;06&quot;</span>,<span class="string">&quot;07&quot;</span>,<span class="string">&quot;08&quot;</span>,<span class="string">&quot;09&quot;</span>,<span class="string">&quot;10&quot;</span>,<span class="string">&quot;11&quot;</span>,<span class="string">&quot;12&quot;</span>,<span class="string">&quot;13&quot;</span>,<span class="string">&quot;14&quot;</span>,<span class="string">&quot;15&quot;</span>,<span class="string">&quot;16&quot;</span>,<span class="string">&quot;17&quot;</span>,<span class="string">&quot;18&quot;</span>,<span class="string">&quot;19&quot;</span>,<span class="string">&quot;20&quot;</span>,<span class="string">&quot;21&quot;</span>,<span class="string">&quot;22&quot;</span>,<span class="string">&quot;23&quot;</span>,<span class="string">&quot;24&quot;</span>,<span class="string">&quot;25&quot;</span>,<span class="string">&quot;26&quot;</span>,<span class="string">&quot;26&quot;</span>,<span class="string">&quot;28&quot;</span>,<span class="string">&quot;29&quot;</span>,<span class="string">&quot;30&quot;</span>],</span><br><span class="line"><span class="comment">// series  第一个对象data数据</span></span><br><span class="line"> data: [ <span class="number">30</span>, <span class="number">40</span>, <span class="number">30</span>, <span class="number">40</span>,<span class="number">30</span>, <span class="number">40</span>, <span class="number">30</span>,<span class="number">60</span>,<span class="number">20</span>, <span class="number">40</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">30</span>, <span class="number">40</span>,<span class="number">30</span>, <span class="number">40</span>, <span class="number">30</span>,<span class="number">60</span>,<span class="number">20</span>, <span class="number">40</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">30</span>, <span class="number">40</span>,<span class="number">30</span>, <span class="number">40</span>, <span class="number">20</span>,<span class="number">60</span>,<span class="number">50</span>, <span class="number">40</span>],</span><br><span class="line"><span class="comment">// series  第二个对象data数据</span></span><br><span class="line"> data: [ <span class="number">130</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">40</span>,<span class="number">30</span>, <span class="number">40</span>, <span class="number">80</span>,<span class="number">60</span>,<span class="number">20</span>, <span class="number">40</span>, <span class="number">90</span>, <span class="number">40</span>,<span class="number">20</span>, <span class="number">140</span>,<span class="number">30</span>, <span class="number">40</span>, <span class="number">130</span>,<span class="number">20</span>,<span class="number">20</span>, <span class="number">40</span>, <span class="number">80</span>, <span class="number">70</span>, <span class="number">30</span>, <span class="number">40</span>,<span class="number">30</span>, <span class="number">120</span>, <span class="number">20</span>,<span class="number">99</span>,<span class="number">50</span>, <span class="number">20</span>],</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="16-饼形图-1年龄分布模块制作"><a href="#16-饼形图-1年龄分布模块制作" class="headerlink" title="16-饼形图 1年龄分布模块制作"></a>16-饼形图 1年龄分布模块制作</h3><ul><li>官网找到类似实例， 适当分析，并且引入到HTML页面中</li><li>根据需求定制图表</li></ul><p>定制图表需求1： </p><ul><li>修改图例组件在底部并且居中显示。 </li><li>每个小图标的宽度和高度修改为 10px   </li><li>文字大小为12 颜色  rgba(255,255,255,.5)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">legend: &#123;</span><br><span class="line">     <span class="comment">// 距离底部为0%</span></span><br><span class="line">     bottom: <span class="string">&quot;0%&quot;</span>,</span><br><span class="line">     <span class="comment">// 小图标的宽度和高度</span></span><br><span class="line">     itemWidth: <span class="number">10</span>,</span><br><span class="line">     itemHeight: <span class="number">10</span>,</span><br><span class="line">     data: [<span class="string">&#x27;直接访问&#x27;</span>, <span class="string">&#x27;邮件营销&#x27;</span>, <span class="string">&#x27;联盟广告&#x27;</span>, <span class="string">&#x27;视频广告&#x27;</span>, <span class="string">&#x27;搜索引擎&#x27;</span>],</span><br><span class="line">     <span class="comment">// 修改图例组件的文字为 12px</span></span><br><span class="line">     textStyle: &#123;</span><br><span class="line">       color: <span class="string">&quot;rgba(255,255,255,.5)&quot;</span>,</span><br><span class="line">       fontSize: <span class="string">&quot;12&quot;</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>定制需求2：</p><ul><li>修改水平居中 垂直居中</li><li>修改内圆半径和外圆半径为    [“40%”, “60%”]   pink老师友情提示，带有直角坐标系的比如折线图柱状图是 grid修改图形大小，而我们饼形图是通过 radius 修改大小</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">series: [</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">&quot;年龄分布&quot;</span>,</span><br><span class="line">        type: <span class="string">&quot;pie&quot;</span>,</span><br><span class="line">        <span class="comment">// 设置饼形图在容器中的位置</span></span><br><span class="line">        center: [<span class="string">&quot;50%&quot;</span>, <span class="string">&quot;50%&quot;</span>],</span><br><span class="line">        <span class="comment">//  修改内圆半径和外圆半径为  百分比是相对于容器宽度来说的</span></span><br><span class="line">        radius: [<span class="string">&quot;40%&quot;</span>, <span class="string">&quot;60%&quot;</span>],</span><br><span class="line">        <span class="comment">// 不显示标签文字</span></span><br><span class="line">        label: &#123; <span class="attr">show</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">        <span class="comment">// 不显示链接图形和文字的连接线</span></span><br><span class="line">        labelLine: &#123; <span class="attr">show</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><p>定制需求3：更换数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// legend 中的data  可省略</span></span><br><span class="line">data: [<span class="string">&quot;0岁以下&quot;</span>, <span class="string">&quot;20-29岁&quot;</span>, <span class="string">&quot;30-39岁&quot;</span>, <span class="string">&quot;40-49岁&quot;</span>, <span class="string">&quot;50岁以上&quot;</span>],</span><br><span class="line"><span class="comment">//  series 中的数据</span></span><br><span class="line"> data: [</span><br><span class="line">          &#123; <span class="attr">value</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;0岁以下&quot;</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">value</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&quot;20-29岁&quot;</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">value</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;30-39岁&quot;</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">value</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;40-49岁&quot;</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">value</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;50岁以上&quot;</span> &#125;</span><br><span class="line"> ] ,</span><br></pre></td></tr></table></figure><p>定制需求4： 更换颜色</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">color: [</span><br><span class="line">          <span class="string">&quot;#065aab&quot;</span>,</span><br><span class="line">          <span class="string">&quot;#066eab&quot;</span>,</span><br><span class="line">          <span class="string">&quot;#0682ab&quot;</span>,</span><br><span class="line">          <span class="string">&quot;#0696ab&quot;</span>,</span><br><span class="line">          <span class="string">&quot;#06a0ab&quot;</span>,</span><br><span class="line">        ],</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 4. 让图表跟随屏幕自动的去适应</span></span><br><span class="line"> <span class="built_in">window</span>.addEventListener(<span class="string">&quot;resize&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   myChart.resize();</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><h3 id="17-饼形图2-地区分布模块制作（南丁格尔玫瑰图）"><a href="#17-饼形图2-地区分布模块制作（南丁格尔玫瑰图）" class="headerlink" title="17-饼形图2 地区分布模块制作（南丁格尔玫瑰图）"></a>17-饼形图2 地区分布模块制作（南丁格尔玫瑰图）</h3><ul><li>官网找到类似实例， 适当分析，并且引入到HTML页面中</li><li>根据需求定制图表</li></ul><p>第二步：按照需求定制</p><ul><li>需求1：颜色设置</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">color: [<span class="string">&#x27;#006cff&#x27;</span>, <span class="string">&#x27;#60cda0&#x27;</span>, <span class="string">&#x27;#ed8884&#x27;</span>, <span class="string">&#x27;#ff9f7f&#x27;</span>, <span class="string">&#x27;#0096ff&#x27;</span>, <span class="string">&#x27;#9fe6b8&#x27;</span>, <span class="string">&#x27;#32c5e9&#x27;</span>, <span class="string">&#x27;#1d9dff&#x27;</span>],</span><br></pre></td></tr></table></figure><ul><li>需求2：修改饼形图大小 ( series对象)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">radius: [<span class="string">&#x27;10%&#x27;</span>, <span class="string">&#x27;70%&#x27;</span>],</span><br></pre></td></tr></table></figure><ul><li>需求3： 把饼形图的显示模式改为 半径模式</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roseType: <span class="string">&quot;radius&quot;</span>,</span><br></pre></td></tr></table></figure><ul><li>需求4：数据使用更换（series对象 里面 data对象）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">value</span>: <span class="number">20</span>, <span class="attr">name</span>: <span class="string">&#x27;云南&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">value</span>: <span class="number">26</span>, <span class="attr">name</span>: <span class="string">&#x27;北京&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">value</span>: <span class="number">24</span>, <span class="attr">name</span>: <span class="string">&#x27;山东&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">value</span>: <span class="number">25</span>, <span class="attr">name</span>: <span class="string">&#x27;河北&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">value</span>: <span class="number">20</span>, <span class="attr">name</span>: <span class="string">&#x27;江苏&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">value</span>: <span class="number">25</span>, <span class="attr">name</span>: <span class="string">&#x27;浙江&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">value</span>: <span class="number">30</span>, <span class="attr">name</span>: <span class="string">&#x27;四川&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">value</span>: <span class="number">42</span>, <span class="attr">name</span>: <span class="string">&#x27;湖北&#x27;</span> &#125;</span><br></pre></td></tr></table></figure><ul><li><p>需求5：字体略小些  10 px ( series对象里面设置 )</p><p>饼图图形上的文本标签可以控制饼形图的文字的一些样式。   label 对象设置</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">series: [</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">&quot;面积模式&quot;</span>,</span><br><span class="line">        type: <span class="string">&quot;pie&quot;</span>,</span><br><span class="line">        radius: [<span class="number">30</span>, <span class="number">110</span>],</span><br><span class="line">        center: [<span class="string">&quot;50%&quot;</span>, <span class="string">&quot;50%&quot;</span>],</span><br><span class="line">        roseType: <span class="string">&quot;radius&quot;</span>,</span><br><span class="line">        <span class="comment">// 文本标签控制饼形图文字的相关样式， 注意它是一个对象</span></span><br><span class="line">        label: &#123;</span><br><span class="line">          fontSize: <span class="number">10</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><ul><li>需求6：防止缩放的时候，引导线过长。引导线略短些   (series对象里面的  labelLine  对象设置  ) <ul><li>连接图表 6 px</li><li>连接文字 8 px</li></ul></li></ul><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+        // 文字调整</span></span><br><span class="line"><span class="addition">+        label:&#123;</span></span><br><span class="line"><span class="addition">+          fontSize: 10</span></span><br><span class="line"><span class="addition">+        &#125;,</span></span><br><span class="line"><span class="addition">+        // 引导线调整</span></span><br><span class="line"><span class="addition">+        labelLine: &#123;</span></span><br><span class="line"><span class="addition">+          // 连接扇形图线长</span></span><br><span class="line"><span class="addition">+          length: 6,</span></span><br><span class="line"><span class="addition">+          // 连接文字线长</span></span><br><span class="line"><span class="addition">+          length2: 8</span></span><br><span class="line"><span class="addition">+        &#125; </span></span><br><span class="line"><span class="addition">+      &#125;</span></span><br><span class="line"><span class="addition">+    ],</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>需求6：浏览器缩放的时候，图表跟着自动适配。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听浏览器缩放，图表对象调用缩放resize函数</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;resize&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    myChart.resize();</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="18-Echarts-社区介绍"><a href="#18-Echarts-社区介绍" class="headerlink" title="18-Echarts-社区介绍"></a>18-Echarts-社区介绍</h3><blockquote><p><a href="https://gallery.echartsjs.com/explore.html#sort=rank~timeframe=all~author=all">社区</a>就是一些，活跃的echart使用者，交流和贡献定制好的图表的地方。</p></blockquote><p><img src="docs/media/1576664444951.png" alt="1576664444951"></p><ul><li>在这里可以找到一些基于echart的高度定制好的图表，相当于基于jquery开发的插件，这里是基于echarts开发的第三方的图表。</li></ul><h3 id="19-Echarts-map使用（扩展）"><a href="#19-Echarts-map使用（扩展）" class="headerlink" title="19-Echarts-map使用（扩展）"></a>19-Echarts-map使用（扩展）</h3><p>参考社区的例子：<a href="https://gallery.echartsjs.com/editor.html?c=x0-ExSkZDM">https://gallery.echartsjs.com/editor.html?c=x0-ExSkZDM</a>  (模拟飞机航线)</p><p>实现步骤：</p><ul><li>第一需要下载china.js提供中国地图的js文件</li><li>第二个因为里面代码比较多，我们新建一个新的js文件 myMap.js 引入</li><li>使用社区提供的配置即可。</li></ul><p>需要修改：</p><ul><li>去掉标题组件</li><li>去掉背景颜色</li><li>修改地图省份背景  #142957  areaColor 里面做修改</li><li>地图放大通过  zoom   设置为1.2即可</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">geo: &#123;</span><br><span class="line">  map: <span class="string">&#x27;china&#x27;</span>,</span><br><span class="line">  zoom: <span class="number">1.2</span>,</span><br><span class="line">  label: &#123;</span><br><span class="line">    emphasis: &#123;</span><br><span class="line">      show: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  roam: <span class="literal">false</span>,</span><br><span class="line">  itemStyle: &#123;</span><br><span class="line">    normal: &#123;</span><br><span class="line">      areaColor: <span class="string">&#x27;#142957&#x27;</span>,</span><br><span class="line">      borderColor: <span class="string">&#x27;#0692a4&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    emphasis: &#123;</span><br><span class="line">      areaColor: <span class="string">&#x27;#0b1c2d&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>总结：这例子是扩展案例，大家以后可以多看看社区里面的案例。</p><h3 id="20-最后约束缩放"><a href="#20-最后约束缩放" class="headerlink" title="20- 最后约束缩放"></a>20- 最后约束缩放</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 约束屏幕尺寸 */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">1024px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">42px</span> <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">1920px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">80px</span> <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;可视化面板介绍&quot;&gt;&lt;a href=&quot;#可视化面板介绍&quot; class=&quot;headerlink&quot; title=&quot;可视化面板介绍&quot;&gt;&lt;/a&gt;可视化面板介绍&lt;/h2&gt;&lt;p&gt;​    应对现在数据可视化的趋势，越来越多企业需要在很多场景(营销数据，生产数据，用户数据)下使用</summary>
      
    
    
    
    
    <category term="website" scheme="https://182.92.7.32/tags/website/"/>
    
  </entry>
  
  <entry>
    <title>数据库</title>
    <link href="https://182.92.7.32/2021/01/24/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://182.92.7.32/2021/01/24/%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2021-01-24T03:20:14.000Z</published>
    <updated>2021-02-11T15:08:30.952Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2021-1-22"><a href="#2021-1-22" class="headerlink" title="2021/1/22"></a>2021/1/22</h1><p>MySQL属于关系型数据库</p><ul><li>数据行（记录）</li><li>数据列（字段）</li><li>数据表（数据行的集合）</li><li>数据库（数据表的集合）   </li></ul><p>MySQL用来做网站，redis用于持久化缓存，mongodb用来处理非关系型数据库的结果（做爬虫）<br>C/S架构：客户端/服务器模型<br>B/S架构：浏览器/服务器模型<br><img src="%E5%85%B3%E7%B3%BB%E5%9B%BE.png"></p><p>SQL语言（结构化查询语言）专门用来和数据库之间的通讯<img src="sql%E8%AF%AD%E8%A8%80.png"><br>学习要求<br><img src="%E5%AD%A6%E4%B9%A0%E8%A6%81%E6%B1%82.png"></p><h1 id="2021-1-23"><a href="#2021-1-23" class="headerlink" title="2021/1/23"></a>2021/1/23</h1><p><a href="https://blog.csdn.net/qq_36582604/article/details/80526287">CentOS7安装MySQL</a><br><a href="https://songyu.blog.csdn.net/article/details/109108573/">SQL语言</a></p><h2 id="启动mysql"><a href="#启动mysql" class="headerlink" title="启动mysql"></a>启动mysql</h2><p>F:\mysql\mysql-8.0.22-winx64\bin&gt;net start MySQL</p><h2 id="登录mysql"><a href="#登录mysql" class="headerlink" title="登录mysql"></a>登录mysql</h2><p>F:\mysql\mysql-8.0.22-winx64\bin&gt;mysql -u root –p    </p><h2 id="更改用户；密码"><a href="#更改用户；密码" class="headerlink" title="更改用户；密码"></a>更改用户；密码</h2><p>mysql&gt; ALTER USER ‘root’@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘123456’;</p><h2 id="保存更改"><a href="#保存更改" class="headerlink" title="保存更改"></a>保存更改</h2><p>mysql&gt; flush privileges;  </p><h2 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h2><p>mysql&gt; quit</p><h2 id="展示数据库"><a href="#展示数据库" class="headerlink" title="展示数据库"></a>展示数据库</h2><p>mysql&gt; show databases;</p><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><p>mysql&gt; create database blogdb;<br>注:每次直接登陆mysql即可，密码123456</p><h1 id="2021-1-24"><a href="#2021-1-24" class="headerlink" title="2021/1/24"></a>2021/1/24</h1><h2 id="切换到数据库操作"><a href="#切换到数据库操作" class="headerlink" title="切换到数据库操作"></a>切换到数据库操作</h2><p>mysql&gt; use blogdb<br>Database changed</p><h2 id="查看数据库的数据表"><a href="#查看数据库的数据表" class="headerlink" title="查看数据库的数据表"></a>查看数据库的数据表</h2><p>mysql&gt; show tables;<br>+—————————-+<br>| Tables_in_blogdb           |<br>+—————————-+<br>| auth_group                 |<br>| auth_group_permissions     |<br>| auth_permission            |<br>| auth_user                  |<br>| auth_user_groups           |<br>| auth_user_user_permissions |<br>| blog_article               |<br>| blog_article_tags          |<br>| blog_tag                   |<br>| blog_user                  |<br>| django_admin_log           |<br>| django_content_type        |<br>| django_migrations          |<br>| django_session             |<br>| t_category                 |<br>+—————————-+<br>15 rows in set (0.32 sec)  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2021-1-22&quot;&gt;&lt;a href=&quot;#2021-1-22&quot; class=&quot;headerlink&quot; title=&quot;2021/1/22&quot;&gt;&lt;/a&gt;2021/1/22&lt;/h1&gt;&lt;p&gt;MySQL属于关系型数据库&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据行（记录）&lt;/li&gt;
&lt;l</summary>
      
    
    
    
    
    <category term="MySQL" scheme="https://182.92.7.32/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL学习笔记</title>
    <link href="https://182.92.7.32/2021/01/24/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://182.92.7.32/2021/01/24/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-01-24T03:20:14.000Z</published>
    <updated>2021-02-05T13:33:01.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL学习笔记"><a href="#MySQL学习笔记" class="headerlink" title="MySQL学习笔记"></a>MySQL学习笔记</h1><h2 id="登录和退出MySQL服务器"><a href="#登录和退出MySQL服务器" class="headerlink" title="登录和退出MySQL服务器"></a>登录和退出MySQL服务器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 登录MySQL</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mysql -u root -p12345612</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出MySQL数据库服务器</span></span><br><span class="line">exit;</span><br></pre></td></tr></table></figure><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">-- 显示所有数据库</span><br><span class="line">show databases;</span><br><span class="line"></span><br><span class="line">-- 创建数据库</span><br><span class="line">CREATE DATABASE test;</span><br><span class="line"></span><br><span class="line">-- 切换数据库</span><br><span class="line">use test;</span><br><span class="line"></span><br><span class="line">-- 显示数据库中的所有表</span><br><span class="line">show tables;</span><br><span class="line"></span><br><span class="line">-- 创建数据表</span><br><span class="line">CREATE TABLE pet (</span><br><span class="line">    name VARCHAR(20),</span><br><span class="line">    owner VARCHAR(20),</span><br><span class="line">    species VARCHAR(20),</span><br><span class="line">    sex CHAR(1),</span><br><span class="line">    birth DATE,</span><br><span class="line">    death DATE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 查看数据表结构</span><br><span class="line">-- describe pet;</span><br><span class="line">desc pet;</span><br><span class="line"></span><br><span class="line">-- 查询表</span><br><span class="line">SELECT * from pet;</span><br><span class="line"></span><br><span class="line">-- 插入数据</span><br><span class="line">INSERT INTO pet VALUES (&#39;puffball&#39;, &#39;Diane&#39;, &#39;hamster&#39;, &#39;f&#39;, &#39;1990-03-30&#39;, NULL);</span><br><span class="line"></span><br><span class="line">-- 修改数据</span><br><span class="line">UPDATE pet SET name &#x3D; &#39;squirrel&#39; where owner &#x3D; &#39;Diane&#39;;</span><br><span class="line"></span><br><span class="line">-- 删除数据</span><br><span class="line">DELETE FROM pet where name &#x3D; &#39;squirrel&#39;;</span><br><span class="line"></span><br><span class="line">-- 删除表</span><br><span class="line">DROP TABLE myorder;</span><br></pre></td></tr></table></figure><h2 id="建表约束"><a href="#建表约束" class="headerlink" title="建表约束"></a>建表约束</h2><h3 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">-- 主键约束</span><br><span class="line">-- 使某个字段不重复且不得为空，确保表内所有数据的唯一性。</span><br><span class="line">CREATE TABLE user (</span><br><span class="line">    id INT PRIMARY KEY,</span><br><span class="line">    name VARCHAR(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 联合主键</span><br><span class="line">-- 联合主键中的每个字段都不能为空，并且加起来不能和已设置的联合主键重复。</span><br><span class="line">CREATE TABLE user (</span><br><span class="line">    id INT,</span><br><span class="line">    name VARCHAR(20),</span><br><span class="line">    password VARCHAR(20),</span><br><span class="line">    PRIMARY KEY(id, name)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 自增约束</span><br><span class="line">-- 自增约束的主键由系统自动递增分配。</span><br><span class="line">CREATE TABLE user (</span><br><span class="line">    id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">    name VARCHAR(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 添加主键约束</span><br><span class="line">-- 如果忘记设置主键，还可以通过SQL语句设置（两种方式）：</span><br><span class="line">ALTER TABLE user ADD PRIMARY KEY(id);</span><br><span class="line">ALTER TABLE user MODIFY id INT PRIMARY KEY;</span><br><span class="line"></span><br><span class="line">-- 删除主键</span><br><span class="line">ALTER TABLE user drop PRIMARY KEY;</span><br></pre></td></tr></table></figure><h3 id="唯一主键"><a href="#唯一主键" class="headerlink" title="唯一主键"></a>唯一主键</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-- 建表时创建唯一主键</span><br><span class="line">CREATE TABLE user (</span><br><span class="line">    id INT,</span><br><span class="line">    name VARCHAR(20),</span><br><span class="line">    UNIQUE(name)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 添加唯一主键</span><br><span class="line">-- 如果建表时没有设置唯一建，还可以通过SQL语句设置（两种方式）：</span><br><span class="line">ALTER TABLE user ADD UNIQUE(name);</span><br><span class="line">ALTER TABLE user MODIFY name VARCHAR(20) UNIQUE;</span><br><span class="line"></span><br><span class="line">-- 删除唯一主键</span><br><span class="line">ALTER TABLE user DROP INDEX name;</span><br></pre></td></tr></table></figure><h3 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- 建表时添加非空约束</span><br><span class="line">-- 约束某个字段不能为空</span><br><span class="line">CREATE TABLE user (</span><br><span class="line">    id INT,</span><br><span class="line">    name VARCHAR(20) NOT NULL</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 移除非空约束</span><br><span class="line">ALTER TABLE user MODIFY name VARCHAR(20);</span><br></pre></td></tr></table></figure><h3 id="默认约束"><a href="#默认约束" class="headerlink" title="默认约束"></a>默认约束</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 建表时添加默认约束</span><br><span class="line">-- 约束某个字段的默认值</span><br><span class="line">CREATE TABLE user2 (</span><br><span class="line">    id INT,</span><br><span class="line">    name VARCHAR(20),</span><br><span class="line">    age INT DEFAULT 10</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 移除非空约束</span><br><span class="line">ALTER TABLE user MODIFY age INT;</span><br></pre></td></tr></table></figure><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">-- 班级</span><br><span class="line">CREATE TABLE classes (</span><br><span class="line">    id INT PRIMARY KEY,</span><br><span class="line">    name VARCHAR(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 学生表</span><br><span class="line">CREATE TABLE students (</span><br><span class="line">    id INT PRIMARY KEY,</span><br><span class="line">    name VARCHAR(20),</span><br><span class="line">    -- 这里的 class_id 要和 classes 中的 id 字段相关联</span><br><span class="line">    class_id INT,</span><br><span class="line">    -- 表示 class_id 的值必须来自于 classes 中的 id 字段值</span><br><span class="line">    FOREIGN KEY(class_id) REFERENCES classes(id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 1. 主表（父表）classes 中没有的数据值，在副表（子表）students 中，是不可以使用的；</span><br><span class="line">-- 2. 主表中的记录被副表引用时，主表不可以被删除。</span><br></pre></td></tr></table></figure><h2 id="数据库的三大设计范式"><a href="#数据库的三大设计范式" class="headerlink" title="数据库的三大设计范式"></a>数据库的三大设计范式</h2><h3 id="1NF"><a href="#1NF" class="headerlink" title="1NF"></a>1NF</h3><p>只要字段值还可以继续拆分，就不满足第一范式。</p><p>范式设计得越详细，对某些实际操作可能会更好，但并非都有好处，需要对项目的实际情况进行设定。</p><h3 id="2NF"><a href="#2NF" class="headerlink" title="2NF"></a>2NF</h3><p>在满足第一范式的前提下，其他列都必须完全依赖于主键列。如果出现不完全依赖，只可能发生在联合主键的情况下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 订单表</span><br><span class="line">CREATE TABLE myorder (</span><br><span class="line">    product_id INT,</span><br><span class="line">    customer_id INT,</span><br><span class="line">    product_name VARCHAR(20),</span><br><span class="line">    customer_name VARCHAR(20),</span><br><span class="line">    PRIMARY KEY (product_id, customer_id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>实际上，在这张订单表中，<code>product_name</code> 只依赖于 <code>product_id</code> ，<code>customer_name</code> 只依赖于 <code>customer_id</code> 。也就是说，<code>product_name</code> 和 <code>customer_id</code> 是没用关系的，<code>customer_name</code> 和 <code>product_id</code> 也是没有关系的。</p><p>这就不满足第二范式：其他列都必须完全依赖于主键列！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE myorder (</span><br><span class="line">    order_id INT PRIMARY KEY,</span><br><span class="line">    product_id INT,</span><br><span class="line">    customer_id INT</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE product (</span><br><span class="line">    id INT PRIMARY KEY,</span><br><span class="line">    name VARCHAR(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE customer (</span><br><span class="line">    id INT PRIMARY KEY,</span><br><span class="line">    name VARCHAR(20)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>拆分之后，<code>myorder</code> 表中的 <code>product_id</code> 和 <code>customer_id</code> 完全依赖于 <code>order_id</code> 主键，而 <code>product</code> 和 <code>customer</code> 表中的其他字段又完全依赖于主键。满足了第二范式的设计！</p><h3 id="3NF"><a href="#3NF" class="headerlink" title="3NF"></a>3NF</h3><p>在满足第二范式的前提下，除了主键列之外，其他列之间不能有传递依赖关系。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE myorder (</span><br><span class="line">    order_id INT PRIMARY KEY,</span><br><span class="line">    product_id INT,</span><br><span class="line">    customer_id INT,</span><br><span class="line">    customer_phone VARCHAR(15)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>表中的 <code>customer_phone</code> 有可能依赖于 <code>order_id</code> 、 <code>customer_id</code> 两列，也就不满足了第三范式的设计：其他列之间不能有传递依赖关系。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE myorder (</span><br><span class="line">    order_id INT PRIMARY KEY,</span><br><span class="line">    product_id INT,</span><br><span class="line">    customer_id INT</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE customer (</span><br><span class="line">    id INT PRIMARY KEY,</span><br><span class="line">    name VARCHAR(20),</span><br><span class="line">    phone VARCHAR(15)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>修改后就不存在其他列之间的传递依赖关系，其他列都只依赖于主键列，满足了第三范式的设计！</p><h2 id="查询练习"><a href="#查询练习" class="headerlink" title="查询练习"></a>查询练习</h2><h3 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">-- 创建数据库</span><br><span class="line">CREATE DATABASE select_test;</span><br><span class="line">-- 切换数据库</span><br><span class="line">USE select_test;</span><br><span class="line"></span><br><span class="line">-- 创建学生表</span><br><span class="line">CREATE TABLE student (</span><br><span class="line">    no VARCHAR(20) PRIMARY KEY,</span><br><span class="line">    name VARCHAR(20) NOT NULL,</span><br><span class="line">    sex VARCHAR(10) NOT NULL,</span><br><span class="line">    birthday DATE, -- 生日</span><br><span class="line">    class VARCHAR(20) -- 所在班级</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 创建教师表</span><br><span class="line">CREATE TABLE teacher (</span><br><span class="line">    no VARCHAR(20) PRIMARY KEY,</span><br><span class="line">    name VARCHAR(20) NOT NULL,</span><br><span class="line">    sex VARCHAR(10) NOT NULL,</span><br><span class="line">    birthday DATE,</span><br><span class="line">    profession VARCHAR(20) NOT NULL, -- 职称</span><br><span class="line">    department VARCHAR(20) NOT NULL -- 部门</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 创建课程表</span><br><span class="line">CREATE TABLE course (</span><br><span class="line">    no VARCHAR(20) PRIMARY KEY,</span><br><span class="line">    name VARCHAR(20) NOT NULL,</span><br><span class="line">    t_no VARCHAR(20) NOT NULL, -- 教师编号</span><br><span class="line">    -- 表示该 tno 来自于 teacher 表中的 no 字段值</span><br><span class="line">    FOREIGN KEY(t_no) REFERENCES teacher(no) </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 成绩表</span><br><span class="line">CREATE TABLE score (</span><br><span class="line">    s_no VARCHAR(20) NOT NULL, -- 学生编号</span><br><span class="line">    c_no VARCHAR(20) NOT NULL, -- 课程号</span><br><span class="line">    degree DECIMAL,-- 成绩</span><br><span class="line">    -- 表示该 s_no, c_no 分别来自于 student, course 表中的 no 字段值</span><br><span class="line">    FOREIGN KEY(s_no) REFERENCES student(no),</span><br><span class="line">    FOREIGN KEY(c_no) REFERENCES course(no),</span><br><span class="line">    -- 设置 s_no, c_no 为联合主键</span><br><span class="line">    PRIMARY KEY(s_no, c_no)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 查看所有表</span><br><span class="line">SHOW TABLES;</span><br><span class="line"></span><br><span class="line">-- 添加学生表数据</span><br><span class="line">INSERT INTO student VALUES(&#39;101&#39;, &#39;曾华&#39;, &#39;男&#39;, &#39;1977-09-01&#39;, &#39;95033&#39;);</span><br><span class="line">INSERT INTO student VALUES(&#39;102&#39;, &#39;匡明&#39;, &#39;男&#39;, &#39;1975-10-02&#39;, &#39;95031&#39;);</span><br><span class="line">INSERT INTO student VALUES(&#39;103&#39;, &#39;王丽&#39;, &#39;女&#39;, &#39;1976-01-23&#39;, &#39;95033&#39;);</span><br><span class="line">INSERT INTO student VALUES(&#39;104&#39;, &#39;李军&#39;, &#39;男&#39;, &#39;1976-02-20&#39;, &#39;95033&#39;);</span><br><span class="line">INSERT INTO student VALUES(&#39;105&#39;, &#39;王芳&#39;, &#39;女&#39;, &#39;1975-02-10&#39;, &#39;95031&#39;);</span><br><span class="line">INSERT INTO student VALUES(&#39;106&#39;, &#39;陆军&#39;, &#39;男&#39;, &#39;1974-06-03&#39;, &#39;95031&#39;);</span><br><span class="line">INSERT INTO student VALUES(&#39;107&#39;, &#39;王尼玛&#39;, &#39;男&#39;, &#39;1976-02-20&#39;, &#39;95033&#39;);</span><br><span class="line">INSERT INTO student VALUES(&#39;108&#39;, &#39;张全蛋&#39;, &#39;男&#39;, &#39;1975-02-10&#39;, &#39;95031&#39;);</span><br><span class="line">INSERT INTO student VALUES(&#39;109&#39;, &#39;赵铁柱&#39;, &#39;男&#39;, &#39;1974-06-03&#39;, &#39;95031&#39;);</span><br><span class="line"></span><br><span class="line">-- 添加教师表数据</span><br><span class="line">INSERT INTO teacher VALUES(&#39;804&#39;, &#39;李诚&#39;, &#39;男&#39;, &#39;1958-12-02&#39;, &#39;副教授&#39;, &#39;计算机系&#39;);</span><br><span class="line">INSERT INTO teacher VALUES(&#39;856&#39;, &#39;张旭&#39;, &#39;男&#39;, &#39;1969-03-12&#39;, &#39;讲师&#39;, &#39;电子工程系&#39;);</span><br><span class="line">INSERT INTO teacher VALUES(&#39;825&#39;, &#39;王萍&#39;, &#39;女&#39;, &#39;1972-05-05&#39;, &#39;助教&#39;, &#39;计算机系&#39;);</span><br><span class="line">INSERT INTO teacher VALUES(&#39;831&#39;, &#39;刘冰&#39;, &#39;女&#39;, &#39;1977-08-14&#39;, &#39;助教&#39;, &#39;电子工程系&#39;);</span><br><span class="line"></span><br><span class="line">-- 添加课程表数据</span><br><span class="line">INSERT INTO course VALUES(&#39;3-105&#39;, &#39;计算机导论&#39;, &#39;825&#39;);</span><br><span class="line">INSERT INTO course VALUES(&#39;3-245&#39;, &#39;操作系统&#39;, &#39;804&#39;);</span><br><span class="line">INSERT INTO course VALUES(&#39;6-166&#39;, &#39;数字电路&#39;, &#39;856&#39;);</span><br><span class="line">INSERT INTO course VALUES(&#39;9-888&#39;, &#39;高等数学&#39;, &#39;831&#39;);</span><br><span class="line"></span><br><span class="line">-- 添加添加成绩表数据</span><br><span class="line">INSERT INTO score VALUES(&#39;103&#39;, &#39;3-105&#39;, &#39;92&#39;);</span><br><span class="line">INSERT INTO score VALUES(&#39;103&#39;, &#39;3-245&#39;, &#39;86&#39;);</span><br><span class="line">INSERT INTO score VALUES(&#39;103&#39;, &#39;6-166&#39;, &#39;85&#39;);</span><br><span class="line">INSERT INTO score VALUES(&#39;105&#39;, &#39;3-105&#39;, &#39;88&#39;);</span><br><span class="line">INSERT INTO score VALUES(&#39;105&#39;, &#39;3-245&#39;, &#39;75&#39;);</span><br><span class="line">INSERT INTO score VALUES(&#39;105&#39;, &#39;6-166&#39;, &#39;79&#39;);</span><br><span class="line">INSERT INTO score VALUES(&#39;109&#39;, &#39;3-105&#39;, &#39;76&#39;);</span><br><span class="line">INSERT INTO score VALUES(&#39;109&#39;, &#39;3-245&#39;, &#39;68&#39;);</span><br><span class="line">INSERT INTO score VALUES(&#39;109&#39;, &#39;6-166&#39;, &#39;81&#39;);</span><br><span class="line"></span><br><span class="line">-- 查看表结构</span><br><span class="line">SELECT * FROM course;</span><br><span class="line">SELECT * FROM score;</span><br><span class="line">SELECT * FROM student;</span><br><span class="line">SELECT * FROM teacher;</span><br></pre></td></tr></table></figure><h3 id="1-到-10"><a href="#1-到-10" class="headerlink" title="1 到 10"></a>1 到 10</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">-- 查询 student 表的所有行</span><br><span class="line">SELECT * FROM student;</span><br><span class="line"></span><br><span class="line">-- 查询 student 表中的 name、sex 和 class 字段的所有行</span><br><span class="line">SELECT name, sex, class FROM student;</span><br><span class="line"></span><br><span class="line">-- 查询 teacher 表中不重复的 department 列</span><br><span class="line">-- department: 去重查询</span><br><span class="line">SELECT DISTINCT department FROM teacher;</span><br><span class="line"></span><br><span class="line">-- 查询 score 表中成绩在60-80之间的所有行（区间查询和运算符查询）</span><br><span class="line">-- BETWEEN xx AND xx: 查询区间, AND 表示 &quot;并且&quot;</span><br><span class="line">SELECT * FROM score WHERE degree BETWEEN 60 AND 80;</span><br><span class="line">SELECT * FROM score WHERE degree &gt; 60 AND degree &lt; 80;</span><br><span class="line"></span><br><span class="line">-- 查询 score 表中成绩为 85, 86 或 88 的行</span><br><span class="line">-- IN: 查询规定中的多个值</span><br><span class="line">SELECT * FROM score WHERE degree IN (85, 86, 88);</span><br><span class="line"></span><br><span class="line">-- 查询 student 表中 &#39;95031&#39; 班或性别为 &#39;女&#39; 的所有行</span><br><span class="line">-- or: 表示或者关系</span><br><span class="line">SELECT * FROM student WHERE class &#x3D; &#39;95031&#39; or sex &#x3D; &#39;女&#39;;</span><br><span class="line"></span><br><span class="line">-- 以 class 降序的方式查询 student 表的所有行</span><br><span class="line">-- DESC: 降序，从高到低</span><br><span class="line">-- ASC（默认）: 升序，从低到高</span><br><span class="line">SELECT * FROM student ORDER BY class DESC;</span><br><span class="line">SELECT * FROM student ORDER BY class ASC;</span><br><span class="line"></span><br><span class="line">-- 以 c_no 升序、degree 降序查询 score 表的所有行</span><br><span class="line">SELECT * FROM score ORDER BY c_no ASC, degree DESC;</span><br><span class="line"></span><br><span class="line">-- 查询 &quot;95031&quot; 班的学生人数</span><br><span class="line">-- COUNT: 统计</span><br><span class="line">SELECT COUNT(*) FROM student WHERE class &#x3D; &#39;95031&#39;;</span><br><span class="line"></span><br><span class="line">-- 查询 score 表中的最高分的学生学号和课程编号（子查询或排序查询）。</span><br><span class="line">-- (SELECT MAX(degree) FROM score): 子查询，算出最高分</span><br><span class="line">SELECT s_no, c_no FROM score WHERE degree &#x3D; (SELECT MAX(degree) FROM score);</span><br><span class="line"></span><br><span class="line">--  排序查询</span><br><span class="line">-- LIMIT r, n: 表示从第r行开始，查询n条数据</span><br><span class="line">SELECT s_no, c_no, degree FROM score ORDER BY degree DESC LIMIT 0, 1;</span><br></pre></td></tr></table></figure><h3 id="分组计算平均成绩"><a href="#分组计算平均成绩" class="headerlink" title="分组计算平均成绩"></a>分组计算平均成绩</h3><p><strong>查询每门课的平均成绩。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- AVG: 平均值</span><br><span class="line">SELECT AVG(degree) FROM score WHERE c_no &#x3D; &#39;3-105&#39;;</span><br><span class="line">SELECT AVG(degree) FROM score WHERE c_no &#x3D; &#39;3-245&#39;;</span><br><span class="line">SELECT AVG(degree) FROM score WHERE c_no &#x3D; &#39;6-166&#39;;</span><br><span class="line"></span><br><span class="line">-- GROUP BY: 分组查询</span><br><span class="line">SELECT c_no, AVG(degree) FROM score GROUP BY c_no;</span><br></pre></td></tr></table></figure><h3 id="分组条件与模糊查询"><a href="#分组条件与模糊查询" class="headerlink" title="分组条件与模糊查询"></a>分组条件与模糊查询</h3><p><strong>查询 <code>score</code> 表中至少有 2 名学生选修，并以 3 开头的课程的平均分数。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM score;</span><br><span class="line">-- c_no 课程编号</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 103  | 3-105 |     92 |</span><br><span class="line">| 103  | 3-245 |     86 |</span><br><span class="line">| 103  | 6-166 |     85 |</span><br><span class="line">| 105  | 3-105 |     88 |</span><br><span class="line">| 105  | 3-245 |     75 |</span><br><span class="line">| 105  | 6-166 |     79 |</span><br><span class="line">| 109  | 3-105 |     76 |</span><br><span class="line">| 109  | 3-245 |     68 |</span><br><span class="line">| 109  | 6-166 |     81 |</span><br><span class="line">+------+-------+--------+</span><br></pre></td></tr></table></figure><p>分析表发现，至少有 2 名学生选修的课程是 <code>3-105</code> 、<code>3-245</code> 、<code>6-166</code> ，以 3 开头的课程是 <code>3-105</code> 、<code>3-245</code> 。也就是说，我们要查询所有 <code>3-105</code> 和 <code>3-245</code> 的 <code>degree</code> 平均分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">-- 首先把 c_no, AVG(degree) 通过分组查询出来</span><br><span class="line">SELECT c_no, AVG(degree) FROM score GROUP BY c_no</span><br><span class="line">+-------+-------------+</span><br><span class="line">| c_no  | AVG(degree) |</span><br><span class="line">+-------+-------------+</span><br><span class="line">| 3-105 |     85.3333 |</span><br><span class="line">| 3-245 |     76.3333 |</span><br><span class="line">| 6-166 |     81.6667 |</span><br><span class="line">+-------+-------------+</span><br><span class="line"></span><br><span class="line">-- 再查询出至少有 2 名学生选修的课程</span><br><span class="line">-- HAVING: 表示持有</span><br><span class="line">HAVING COUNT(c_no) &gt;&#x3D; 2</span><br><span class="line"></span><br><span class="line">-- 并且是以 3 开头的课程</span><br><span class="line">-- LIKE 表示模糊查询，&quot;%&quot; 是一个通配符，匹配 &quot;3&quot; 后面的任意字符。</span><br><span class="line">AND c_no LIKE &#39;3%&#39;;</span><br><span class="line"></span><br><span class="line">-- 把前面的SQL语句拼接起来，</span><br><span class="line">-- 后面加上一个 COUNT(*)，表示将每个分组的个数也查询出来。</span><br><span class="line">SELECT c_no, AVG(degree), COUNT(*) FROM score GROUP BY c_no</span><br><span class="line">HAVING COUNT(c_no) &gt;&#x3D; 2 AND c_no LIKE &#39;3%&#39;;</span><br><span class="line">+-------+-------------+----------+</span><br><span class="line">| c_no  | AVG(degree) | COUNT(*) |</span><br><span class="line">+-------+-------------+----------+</span><br><span class="line">| 3-105 |     85.3333 |        3 |</span><br><span class="line">| 3-245 |     76.3333 |        3 |</span><br><span class="line">+-------+-------------+----------+</span><br></pre></td></tr></table></figure><h3 id="多表查询-1"><a href="#多表查询-1" class="headerlink" title="多表查询 - 1"></a>多表查询 - 1</h3><p><strong>查询所有学生的 <code>name</code>，以及该学生在 <code>score</code> 表中对应的 <code>c_no</code> 和 <code>degree</code> 。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">SELECT no, name FROM student;</span><br><span class="line">+-----+-----------+</span><br><span class="line">| no  | name      |</span><br><span class="line">+-----+-----------+</span><br><span class="line">| 101 | 曾华      |</span><br><span class="line">| 102 | 匡明      |</span><br><span class="line">| 103 | 王丽      |</span><br><span class="line">| 104 | 李军      |</span><br><span class="line">| 105 | 王芳      |</span><br><span class="line">| 106 | 陆军      |</span><br><span class="line">| 107 | 王尼玛    |</span><br><span class="line">| 108 | 张全蛋    |</span><br><span class="line">| 109 | 赵铁柱    |</span><br><span class="line">+-----+-----------+</span><br><span class="line"></span><br><span class="line">SELECT s_no, c_no, degree FROM score;</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 103  | 3-105 |     92 |</span><br><span class="line">| 103  | 3-245 |     86 |</span><br><span class="line">| 103  | 6-166 |     85 |</span><br><span class="line">| 105  | 3-105 |     88 |</span><br><span class="line">| 105  | 3-245 |     75 |</span><br><span class="line">| 105  | 6-166 |     79 |</span><br><span class="line">| 109  | 3-105 |     76 |</span><br><span class="line">| 109  | 3-245 |     68 |</span><br><span class="line">| 109  | 6-166 |     81 |</span><br><span class="line">+------+-------+--------+</span><br></pre></td></tr></table></figure><p>通过分析可以发现，只要把 <code>score</code> 表中的 <code>s_no</code> 字段值替换成 <code>student</code> 表中对应的 <code>name</code> 字段值就可以了，如何做呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-- FROM...: 表示从 student, score 表中查询</span><br><span class="line">-- WHERE 的条件表示为，只有在 student.no 和 score.s_no 相等时才显示出来。</span><br><span class="line">SELECT name, c_no, degree FROM student, score </span><br><span class="line">WHERE student.no &#x3D; score.s_no;</span><br><span class="line">+-----------+-------+--------+</span><br><span class="line">| name      | c_no  | degree |</span><br><span class="line">+-----------+-------+--------+</span><br><span class="line">| 王丽      | 3-105 |     92 |</span><br><span class="line">| 王丽      | 3-245 |     86 |</span><br><span class="line">| 王丽      | 6-166 |     85 |</span><br><span class="line">| 王芳      | 3-105 |     88 |</span><br><span class="line">| 王芳      | 3-245 |     75 |</span><br><span class="line">| 王芳      | 6-166 |     79 |</span><br><span class="line">| 赵铁柱    | 3-105 |     76 |</span><br><span class="line">| 赵铁柱    | 3-245 |     68 |</span><br><span class="line">| 赵铁柱    | 6-166 |     81 |</span><br><span class="line">+-----------+-------+--------+</span><br></pre></td></tr></table></figure><h3 id="多表查询-2"><a href="#多表查询-2" class="headerlink" title="多表查询 - 2"></a>多表查询 - 2</h3><p><strong>查询所有学生的 <code>no</code> 、课程名称 ( <code>course</code> 表中的 <code>name</code> ) 和成绩 ( <code>score</code> 表中的 <code>degree</code> ) 列。</strong></p><p>只有 <code>score</code> 关联学生的 <code>no</code> ，因此只要查询 <code>score</code> 表，就能找出所有和学生相关的 <code>no</code> 和 <code>degree</code> ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SELECT s_no, c_no, degree FROM score;</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 103  | 3-105 |     92 |</span><br><span class="line">| 103  | 3-245 |     86 |</span><br><span class="line">| 103  | 6-166 |     85 |</span><br><span class="line">| 105  | 3-105 |     88 |</span><br><span class="line">| 105  | 3-245 |     75 |</span><br><span class="line">| 105  | 6-166 |     79 |</span><br><span class="line">| 109  | 3-105 |     76 |</span><br><span class="line">| 109  | 3-245 |     68 |</span><br><span class="line">| 109  | 6-166 |     81 |</span><br><span class="line">+------+-------+--------+</span><br></pre></td></tr></table></figure><p>然后查询 <code>course</code> 表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+-------+-----------------+</span><br><span class="line">| no    | name            |</span><br><span class="line">+-------+-----------------+</span><br><span class="line">| 3-105 | 计算机导论      |</span><br><span class="line">| 3-245 | 操作系统        |</span><br><span class="line">| 6-166 | 数字电路        |</span><br><span class="line">| 9-888 | 高等数学        |</span><br><span class="line">+-------+-----------------+</span><br></pre></td></tr></table></figure><p>只要把 <code>score</code> 表中的 <code>c_no</code> 替换成 <code>course</code> 表中对应的 <code>name</code> 字段值就可以了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-- 增加一个查询字段 name，分别从 score、course 这两个表中查询。</span><br><span class="line">-- as 表示取一个该字段的别名。</span><br><span class="line">SELECT s_no, name as c_name, degree FROM score, course</span><br><span class="line">WHERE score.c_no &#x3D; course.no;</span><br><span class="line">+------+-----------------+--------+</span><br><span class="line">| s_no | c_name          | degree |</span><br><span class="line">+------+-----------------+--------+</span><br><span class="line">| 103  | 计算机导论      |     92 |</span><br><span class="line">| 105  | 计算机导论      |     88 |</span><br><span class="line">| 109  | 计算机导论      |     76 |</span><br><span class="line">| 103  | 操作系统        |     86 |</span><br><span class="line">| 105  | 操作系统        |     75 |</span><br><span class="line">| 109  | 操作系统        |     68 |</span><br><span class="line">| 103  | 数字电路        |     85 |</span><br><span class="line">| 105  | 数字电路        |     79 |</span><br><span class="line">| 109  | 数字电路        |     81 |</span><br><span class="line">+------+-----------------+--------+</span><br></pre></td></tr></table></figure><h3 id="三表关联查询"><a href="#三表关联查询" class="headerlink" title="三表关联查询"></a>三表关联查询</h3><p><strong>查询所有学生的 <code>name</code> 、课程名 ( <code>course</code> 表中的 <code>name</code> ) 和 <code>degree</code> 。</strong></p><p>只有 <code>score</code> 表中关联学生的学号和课堂号，我们只要围绕着 <code>score</code> 这张表查询就好了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM score;</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 103  | 3-105 |     92 |</span><br><span class="line">| 103  | 3-245 |     86 |</span><br><span class="line">| 103  | 6-166 |     85 |</span><br><span class="line">| 105  | 3-105 |     88 |</span><br><span class="line">| 105  | 3-245 |     75 |</span><br><span class="line">| 105  | 6-166 |     79 |</span><br><span class="line">| 109  | 3-105 |     76 |</span><br><span class="line">| 109  | 3-245 |     68 |</span><br><span class="line">| 109  | 6-166 |     81 |</span><br><span class="line">+------+-------+--------+</span><br></pre></td></tr></table></figure><p>只要把 <code>s_no</code> 和 <code>c_no</code> 替换成 <code>student</code> 和 <code>srouse</code> 表中对应的 <code>name</code> 字段值就好了。</p><p>首先把 <code>s_no</code> 替换成 <code>student</code> 表中的 <code>name</code> 字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SELECT name, c_no, degree FROM student, score WHERE student.no &#x3D; score.s_no;</span><br><span class="line">+-----------+-------+--------+</span><br><span class="line">| name      | c_no  | degree |</span><br><span class="line">+-----------+-------+--------+</span><br><span class="line">| 王丽      | 3-105 |     92 |</span><br><span class="line">| 王丽      | 3-245 |     86 |</span><br><span class="line">| 王丽      | 6-166 |     85 |</span><br><span class="line">| 王芳      | 3-105 |     88 |</span><br><span class="line">| 王芳      | 3-245 |     75 |</span><br><span class="line">| 王芳      | 6-166 |     79 |</span><br><span class="line">| 赵铁柱    | 3-105 |     76 |</span><br><span class="line">| 赵铁柱    | 3-245 |     68 |</span><br><span class="line">| 赵铁柱    | 6-166 |     81 |</span><br><span class="line">+-----------+-------+--------+</span><br></pre></td></tr></table></figure><p>再把 <code>c_no</code> 替换成 <code>course</code> 表中的 <code>name</code> 字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-- 课程表</span><br><span class="line">SELECT no, name FROM course;</span><br><span class="line">+-------+-----------------+</span><br><span class="line">| no    | name            |</span><br><span class="line">+-------+-----------------+</span><br><span class="line">| 3-105 | 计算机导论      |</span><br><span class="line">| 3-245 | 操作系统        |</span><br><span class="line">| 6-166 | 数字电路        |</span><br><span class="line">| 9-888 | 高等数学        |</span><br><span class="line">+-------+-----------------+</span><br><span class="line"></span><br><span class="line">-- 由于字段名存在重复，使用 &quot;表名.字段名 as 别名&quot; 代替。</span><br><span class="line">SELECT student.name as s_name, course.name as c_name, degree </span><br><span class="line">FROM student, score, course</span><br><span class="line">WHERE student.NO &#x3D; score.s_no</span><br><span class="line">AND score.c_no &#x3D; course.no;</span><br></pre></td></tr></table></figure><h3 id="子查询加分组求平均分"><a href="#子查询加分组求平均分" class="headerlink" title="子查询加分组求平均分"></a>子查询加分组求平均分</h3><p><strong>查询 <code>95031</code> 班学生每门课程的平均成绩。</strong></p><p>在 <code>score</code> 表中根据 <code>student</code>  表的学生编号筛选出学生的课堂号和成绩：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- IN (..): 将筛选出的学生号当做 s_no 的条件查询</span><br><span class="line">SELECT s_no, c_no, degree FROM score</span><br><span class="line">WHERE s_no IN (SELECT no FROM student WHERE class &#x3D; &#39;95031&#39;);</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 105  | 3-105 |     88 |</span><br><span class="line">| 105  | 3-245 |     75 |</span><br><span class="line">| 105  | 6-166 |     79 |</span><br><span class="line">| 109  | 3-105 |     76 |</span><br><span class="line">| 109  | 3-245 |     68 |</span><br><span class="line">| 109  | 6-166 |     81 |</span><br><span class="line">+------+-------+--------+</span><br></pre></td></tr></table></figure><p>这时只要将 <code>c_no</code> 分组一下就能得出 <code>95031</code> 班学生每门课的平均成绩：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SELECT c_no, AVG(degree) FROM score</span><br><span class="line">WHERE s_no IN (SELECT no FROM student WHERE class &#x3D; &#39;95031&#39;)</span><br><span class="line">GROUP BY c_no;</span><br><span class="line">+-------+-------------+</span><br><span class="line">| c_no  | AVG(degree) |</span><br><span class="line">+-------+-------------+</span><br><span class="line">| 3-105 |     82.0000 |</span><br><span class="line">| 3-245 |     71.5000 |</span><br><span class="line">| 6-166 |     80.0000 |</span><br><span class="line">+-------+-------------+</span><br></pre></td></tr></table></figure><h3 id="子查询-1"><a href="#子查询-1" class="headerlink" title="子查询 - 1"></a>子查询 - 1</h3><p><strong>查询在 <code>3-105</code> 课程中，所有成绩高于 <code>109</code> 号同学的记录。</strong></p><p>首先筛选出课堂号为 <code>3-105</code> ，在找出所有成绩高于 <code>109</code> 号同学的的行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM score </span><br><span class="line">WHERE c_no &#x3D; &#39;3-105&#39;</span><br><span class="line">AND degree &gt; (SELECT degree FROM score WHERE s_no &#x3D; &#39;109&#39; AND c_no &#x3D; &#39;3-105&#39;);</span><br></pre></td></tr></table></figure><h3 id="子查询-2"><a href="#子查询-2" class="headerlink" title="子查询 - 2"></a>子查询 - 2</h3><p><strong>查询所有成绩高于 <code>109</code> 号同学的 <code>3-105</code> 课程成绩记录。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 不限制课程号，只要成绩大于109号同学的3-105课程成绩就可以。</span><br><span class="line">SELECT * FROM score</span><br><span class="line">WHERE degree &gt; (SELECT degree FROM score WHERE s_no &#x3D; &#39;109&#39; AND c_no &#x3D; &#39;3-105&#39;);</span><br></pre></td></tr></table></figure><h3 id="YEAR-函数与带-IN-关键字查询"><a href="#YEAR-函数与带-IN-关键字查询" class="headerlink" title="YEAR 函数与带 IN 关键字查询"></a>YEAR 函数与带 IN 关键字查询</h3><p><strong>查询所有和 <code>101</code> 、<code>108</code> 号学生同年出生的 <code>no</code> 、<code>name</code> 、<code>birthday</code> 列。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- YEAR(..): 取出日期中的年份</span><br><span class="line">SELECT no, name, birthday FROM student</span><br><span class="line">WHERE YEAR(birthday) IN (SELECT YEAR(birthday) FROM student WHERE no IN (101, 108));</span><br></pre></td></tr></table></figure><h3 id="多层嵌套子查询"><a href="#多层嵌套子查询" class="headerlink" title="多层嵌套子查询"></a>多层嵌套子查询</h3><p><strong>查询 <code>&#39;张旭&#39;</code> 教师任课的学生成绩表。</strong></p><p>首先找到教师编号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT NO FROM teacher WHERE NAME &#x3D; &#39;张旭&#39;</span><br></pre></td></tr></table></figure><p>通过 <code>sourse</code> 表找到该教师课程号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT NO FROM course WHERE t_no &#x3D; ( SELECT NO FROM teacher WHERE NAME &#x3D; &#39;张旭&#39; );</span><br></pre></td></tr></table></figure><p>通过筛选出的课程号查询成绩表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM score WHERE c_no &#x3D; (</span><br><span class="line">    SELECT no FROM course WHERE t_no &#x3D; ( </span><br><span class="line">        SELECT no FROM teacher WHERE NAME &#x3D; &#39;张旭&#39; </span><br><span class="line">    )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><p><strong>查询某选修课程多于5个同学的教师姓名。</strong></p><p>首先在 <code>teacher</code> 表中，根据 <code>no</code> 字段来判断该教师的同一门课程是否有至少5名学员选修：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-- 查询 teacher 表</span><br><span class="line">SELECT no, name FROM teacher;</span><br><span class="line">+-----+--------+</span><br><span class="line">| no  | name   |</span><br><span class="line">+-----+--------+</span><br><span class="line">| 804 | 李诚   |</span><br><span class="line">| 825 | 王萍   |</span><br><span class="line">| 831 | 刘冰   |</span><br><span class="line">| 856 | 张旭   |</span><br><span class="line">+-----+--------+</span><br><span class="line"></span><br><span class="line">SELECT name FROM teacher WHERE no IN (</span><br><span class="line">    -- 在这里找到对应的条件</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>查看和教师编号有有关的表的信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM course;</span><br><span class="line">-- t_no: 教师编号</span><br><span class="line">+-------+-----------------+------+</span><br><span class="line">| no    | name            | t_no |</span><br><span class="line">+-------+-----------------+------+</span><br><span class="line">| 3-105 | 计算机导论      | 825  |</span><br><span class="line">| 3-245 | 操作系统        | 804  |</span><br><span class="line">| 6-166 | 数字电路        | 856  |</span><br><span class="line">| 9-888 | 高等数学        | 831  |</span><br><span class="line">+-------+-----------------+------+</span><br></pre></td></tr></table></figure><p>我们已经找到和教师编号有关的字段就在 <code>course</code> 表中，但是还无法知道哪门课程至少有5名学生选修，所以还需要根据 <code>score</code> 表来查询：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">-- 在此之前向 score 插入一些数据，以便丰富查询条件。</span><br><span class="line">INSERT INTO score VALUES (&#39;101&#39;, &#39;3-105&#39;, &#39;90&#39;);</span><br><span class="line">INSERT INTO score VALUES (&#39;102&#39;, &#39;3-105&#39;, &#39;91&#39;);</span><br><span class="line">INSERT INTO score VALUES (&#39;104&#39;, &#39;3-105&#39;, &#39;89&#39;);</span><br><span class="line"></span><br><span class="line">-- 查询 score 表</span><br><span class="line">SELECT * FROM score;</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 101  | 3-105 |     90 |</span><br><span class="line">| 102  | 3-105 |     91 |</span><br><span class="line">| 103  | 3-105 |     92 |</span><br><span class="line">| 103  | 3-245 |     86 |</span><br><span class="line">| 103  | 6-166 |     85 |</span><br><span class="line">| 104  | 3-105 |     89 |</span><br><span class="line">| 105  | 3-105 |     88 |</span><br><span class="line">| 105  | 3-245 |     75 |</span><br><span class="line">| 105  | 6-166 |     79 |</span><br><span class="line">| 109  | 3-105 |     76 |</span><br><span class="line">| 109  | 3-245 |     68 |</span><br><span class="line">| 109  | 6-166 |     81 |</span><br><span class="line">+------+-------+--------+</span><br><span class="line"></span><br><span class="line">-- 在 score 表中将 c_no 作为分组，并且限制 c_no 持有至少 5 条数据。</span><br><span class="line">SELECT c_no FROM score GROUP BY c_no HAVING COUNT(*) &gt; 5;</span><br><span class="line">+-------+</span><br><span class="line">| c_no  |</span><br><span class="line">+-------+</span><br><span class="line">| 3-105 |</span><br><span class="line">+-------+</span><br></pre></td></tr></table></figure><p>根据筛选出来的课程号，找出在某课程中，拥有至少5名学员的教师编号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT t_no FROM course WHERE no IN (</span><br><span class="line">    SELECT c_no FROM score GROUP BY c_no HAVING COUNT(*) &gt; 5</span><br><span class="line">);</span><br><span class="line">+------+</span><br><span class="line">| t_no |</span><br><span class="line">+------+</span><br><span class="line">| 825  |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure><p>在 <code>teacher</code> 表中，根据筛选出来的教师编号找到教师姓名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT name FROM teacher WHERE no IN (</span><br><span class="line">    -- 最终条件</span><br><span class="line">    SELECT t_no FROM course WHERE no IN (</span><br><span class="line">        SELECT c_no FROM score GROUP BY c_no HAVING COUNT(*) &gt; 5</span><br><span class="line">    )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="子查询-3"><a href="#子查询-3" class="headerlink" title="子查询 - 3"></a>子查询 - 3</h3><p><strong>查询 “计算机系” 课程的成绩表。</strong></p><p>思路是，先找出 <code>course</code> 表中所有 <code>计算机系</code> 课程的编号，然后根据这个编号查询 <code>score</code> 表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">-- 通过 teacher 表查询所有 &#96;计算机系&#96; 的教师编号</span><br><span class="line">SELECT no, name, department FROM teacher WHERE department &#x3D; &#39;计算机系&#39;</span><br><span class="line">+-----+--------+--------------+</span><br><span class="line">| no  | name   | department   |</span><br><span class="line">+-----+--------+--------------+</span><br><span class="line">| 804 | 李诚   | 计算机系     |</span><br><span class="line">| 825 | 王萍   | 计算机系     |</span><br><span class="line">+-----+--------+--------------+</span><br><span class="line"></span><br><span class="line">-- 通过 course 表查询该教师的课程编号</span><br><span class="line">SELECT no FROM course WHERE t_no IN (</span><br><span class="line">    SELECT no FROM teacher WHERE department &#x3D; &#39;计算机系&#39;</span><br><span class="line">);</span><br><span class="line">+-------+</span><br><span class="line">| no    |</span><br><span class="line">+-------+</span><br><span class="line">| 3-245 |</span><br><span class="line">| 3-105 |</span><br><span class="line">+-------+</span><br><span class="line"></span><br><span class="line">-- 根据筛选出来的课程号查询成绩表</span><br><span class="line">SELECT * FROM score WHERE c_no IN (</span><br><span class="line">    SELECT no FROM course WHERE t_no IN (</span><br><span class="line">        SELECT no FROM teacher WHERE department &#x3D; &#39;计算机系&#39;</span><br><span class="line">    )</span><br><span class="line">);</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 103  | 3-245 |     86 |</span><br><span class="line">| 105  | 3-245 |     75 |</span><br><span class="line">| 109  | 3-245 |     68 |</span><br><span class="line">| 101  | 3-105 |     90 |</span><br><span class="line">| 102  | 3-105 |     91 |</span><br><span class="line">| 103  | 3-105 |     92 |</span><br><span class="line">| 104  | 3-105 |     89 |</span><br><span class="line">| 105  | 3-105 |     88 |</span><br><span class="line">| 109  | 3-105 |     76 |</span><br><span class="line">+------+-------+--------+</span><br></pre></td></tr></table></figure><h3 id="UNION-和-NOTIN-的使用"><a href="#UNION-和-NOTIN-的使用" class="headerlink" title="UNION 和 NOTIN 的使用"></a>UNION 和 NOTIN 的使用</h3><p><strong>查询 <code>计算机系</code> 与 <code>电子工程系</code> 中的不同职称的教师。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- NOT: 代表逻辑非</span><br><span class="line">SELECT * FROM teacher WHERE department &#x3D; &#39;计算机系&#39; AND profession NOT IN (</span><br><span class="line">    SELECT profession FROM teacher WHERE department &#x3D; &#39;电子工程系&#39;</span><br><span class="line">)</span><br><span class="line">-- 合并两个集</span><br><span class="line">UNION</span><br><span class="line">SELECT * FROM teacher WHERE department &#x3D; &#39;电子工程系&#39; AND profession NOT IN (</span><br><span class="line">    SELECT profession FROM teacher WHERE department &#x3D; &#39;计算机系&#39;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="ANY-表示至少一个-DESC-降序"><a href="#ANY-表示至少一个-DESC-降序" class="headerlink" title="ANY 表示至少一个 - DESC ( 降序 )"></a>ANY 表示至少一个 - DESC ( 降序 )</h3><p><strong>查询课程 <code>3-105</code> 且成绩 <u>至少</u> 高于 <code>3-245</code> 的 <code>score</code> 表。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM score WHERE c_no &#x3D; &#39;3-105&#39;;</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 101  | 3-105 |     90 |</span><br><span class="line">| 102  | 3-105 |     91 |</span><br><span class="line">| 103  | 3-105 |     92 |</span><br><span class="line">| 104  | 3-105 |     89 |</span><br><span class="line">| 105  | 3-105 |     88 |</span><br><span class="line">| 109  | 3-105 |     76 |</span><br><span class="line">+------+-------+--------+</span><br><span class="line"></span><br><span class="line">SELECT * FROM score WHERE c_no &#x3D; &#39;3-245&#39;;</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 103  | 3-245 |     86 |</span><br><span class="line">| 105  | 3-245 |     75 |</span><br><span class="line">| 109  | 3-245 |     68 |</span><br><span class="line">+------+-------+--------+</span><br><span class="line"></span><br><span class="line">-- ANY: 符合SQL语句中的任意条件。</span><br><span class="line">-- 也就是说，在 3-105 成绩中，只要有一个大于从 3-245 筛选出来的任意行就符合条件，</span><br><span class="line">-- 最后根据降序查询结果。</span><br><span class="line">SELECT * FROM score WHERE c_no &#x3D; &#39;3-105&#39; AND degree &gt; ANY(</span><br><span class="line">    SELECT degree FROM score WHERE c_no &#x3D; &#39;3-245&#39;</span><br><span class="line">) ORDER BY degree DESC;</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 103  | 3-105 |     92 |</span><br><span class="line">| 102  | 3-105 |     91 |</span><br><span class="line">| 101  | 3-105 |     90 |</span><br><span class="line">| 104  | 3-105 |     89 |</span><br><span class="line">| 105  | 3-105 |     88 |</span><br><span class="line">| 109  | 3-105 |     76 |</span><br><span class="line">+------+-------+--------+</span><br></pre></td></tr></table></figure><h3 id="表示所有的-ALL"><a href="#表示所有的-ALL" class="headerlink" title="表示所有的 ALL"></a>表示所有的 ALL</h3><p><strong>查询课程 <code>3-105</code> 且成绩高于 <code>3-245</code> 的 <code>score</code> 表。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-- 只需对上一道题稍作修改。</span><br><span class="line">-- ALL: 符合SQL语句中的所有条件。</span><br><span class="line">-- 也就是说，在 3-105 每一行成绩中，都要大于从 3-245 筛选出来全部行才算符合条件。</span><br><span class="line">SELECT * FROM score WHERE c_no &#x3D; &#39;3-105&#39; AND degree &gt; ALL(</span><br><span class="line">    SELECT degree FROM score WHERE c_no &#x3D; &#39;3-245&#39;</span><br><span class="line">);</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 101  | 3-105 |     90 |</span><br><span class="line">| 102  | 3-105 |     91 |</span><br><span class="line">| 103  | 3-105 |     92 |</span><br><span class="line">| 104  | 3-105 |     89 |</span><br><span class="line">| 105  | 3-105 |     88 |</span><br><span class="line">+------+-------+--------+</span><br></pre></td></tr></table></figure><h3 id="复制表的数据作为条件查询"><a href="#复制表的数据作为条件查询" class="headerlink" title="复制表的数据作为条件查询"></a>复制表的数据作为条件查询</h3><p><strong>查询某课程成绩比该课程平均成绩低的 <code>score</code> 表。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">-- 查询平均分</span><br><span class="line">SELECT c_no, AVG(degree) FROM score GROUP BY c_no;</span><br><span class="line">+-------+-------------+</span><br><span class="line">| c_no  | AVG(degree) |</span><br><span class="line">+-------+-------------+</span><br><span class="line">| 3-105 |     87.6667 |</span><br><span class="line">| 3-245 |     76.3333 |</span><br><span class="line">| 6-166 |     81.6667 |</span><br><span class="line">+-------+-------------+</span><br><span class="line"></span><br><span class="line">-- 查询 score 表</span><br><span class="line">SELECT degree FROM score;</span><br><span class="line">+--------+</span><br><span class="line">| degree |</span><br><span class="line">+--------+</span><br><span class="line">|     90 |</span><br><span class="line">|     91 |</span><br><span class="line">|     92 |</span><br><span class="line">|     86 |</span><br><span class="line">|     85 |</span><br><span class="line">|     89 |</span><br><span class="line">|     88 |</span><br><span class="line">|     75 |</span><br><span class="line">|     79 |</span><br><span class="line">|     76 |</span><br><span class="line">|     68 |</span><br><span class="line">|     81 |</span><br><span class="line">+--------+</span><br><span class="line"></span><br><span class="line">-- 将表 b 作用于表 a 中查询数据</span><br><span class="line">-- score a (b): 将表声明为 a (b)，</span><br><span class="line">-- 如此就能用 a.c_no &#x3D; b.c_no 作为条件执行查询了。</span><br><span class="line">SELECT * FROM score a WHERE degree &lt; (</span><br><span class="line">    (SELECT AVG(degree) FROM score b WHERE a.c_no &#x3D; b.c_no)</span><br><span class="line">);</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 105  | 3-245 |     75 |</span><br><span class="line">| 105  | 6-166 |     79 |</span><br><span class="line">| 109  | 3-105 |     76 |</span><br><span class="line">| 109  | 3-245 |     68 |</span><br><span class="line">| 109  | 6-166 |     81 |</span><br><span class="line">+------+-------+--------+</span><br></pre></td></tr></table></figure><h3 id="子查询-4"><a href="#子查询-4" class="headerlink" title="子查询 - 4"></a>子查询 - 4</h3><p><strong>查询所有任课 ( 在 <code>course</code> 表里有课程 ) 教师的 <code>name</code> 和 <code>department</code></strong> 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT name, department FROM teacher WHERE no IN (SELECT t_no FROM course);</span><br><span class="line">+--------+-----------------+</span><br><span class="line">| name   | department      |</span><br><span class="line">+--------+-----------------+</span><br><span class="line">| 李诚   | 计算机系        |</span><br><span class="line">| 王萍   | 计算机系        |</span><br><span class="line">| 刘冰   | 电子工程系      |</span><br><span class="line">| 张旭   | 电子工程系      |</span><br><span class="line">+--------+-----------------+</span><br></pre></td></tr></table></figure><h3 id="条件加组筛选"><a href="#条件加组筛选" class="headerlink" title="条件加组筛选"></a>条件加组筛选</h3><p><strong>查询 <code>student</code> 表中至少有 2 名男生的 <code>class</code> 。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">-- 查看学生表信息</span><br><span class="line">SELECT * FROM student;</span><br><span class="line">+-----+-----------+-----+------------+-------+</span><br><span class="line">| no  | name      | sex | birthday   | class |</span><br><span class="line">+-----+-----------+-----+------------+-------+</span><br><span class="line">| 101 | 曾华      | 男  | 1977-09-01 | 95033 |</span><br><span class="line">| 102 | 匡明      | 男  | 1975-10-02 | 95031 |</span><br><span class="line">| 103 | 王丽      | 女  | 1976-01-23 | 95033 |</span><br><span class="line">| 104 | 李军      | 男  | 1976-02-20 | 95033 |</span><br><span class="line">| 105 | 王芳      | 女  | 1975-02-10 | 95031 |</span><br><span class="line">| 106 | 陆军      | 男  | 1974-06-03 | 95031 |</span><br><span class="line">| 107 | 王尼玛    | 男  | 1976-02-20 | 95033 |</span><br><span class="line">| 108 | 张全蛋    | 男  | 1975-02-10 | 95031 |</span><br><span class="line">| 109 | 赵铁柱    | 男  | 1974-06-03 | 95031 |</span><br><span class="line">| 110 | 张飞      | 男  | 1974-06-03 | 95038 |</span><br><span class="line">+-----+-----------+-----+------------+-------+</span><br><span class="line"></span><br><span class="line">-- 只查询性别为男，然后按 class 分组，并限制 class 行大于 1。</span><br><span class="line">SELECT class FROM student WHERE sex &#x3D; &#39;男&#39; GROUP BY class HAVING COUNT(*) &gt; 1;</span><br><span class="line">+-------+</span><br><span class="line">| class |</span><br><span class="line">+-------+</span><br><span class="line">| 95033 |</span><br><span class="line">| 95031 |</span><br><span class="line">+-------+</span><br></pre></td></tr></table></figure><h3 id="NOTLIKE-模糊查询取反"><a href="#NOTLIKE-模糊查询取反" class="headerlink" title="NOTLIKE 模糊查询取反"></a>NOTLIKE 模糊查询取反</h3><p><strong>查询 <code>student</code> 表中不姓 “王” 的同学记录。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-- NOT: 取反</span><br><span class="line">-- LIKE: 模糊查询</span><br><span class="line">mysql&gt; SELECT * FROM student WHERE name NOT LIKE &#39;王%&#39;;</span><br><span class="line">+-----+-----------+-----+------------+-------+</span><br><span class="line">| no  | name      | sex | birthday   | class |</span><br><span class="line">+-----+-----------+-----+------------+-------+</span><br><span class="line">| 101 | 曾华      | 男  | 1977-09-01 | 95033 |</span><br><span class="line">| 102 | 匡明      | 男  | 1975-10-02 | 95031 |</span><br><span class="line">| 104 | 李军      | 男  | 1976-02-20 | 95033 |</span><br><span class="line">| 106 | 陆军      | 男  | 1974-06-03 | 95031 |</span><br><span class="line">| 108 | 张全蛋    | 男  | 1975-02-10 | 95031 |</span><br><span class="line">| 109 | 赵铁柱    | 男  | 1974-06-03 | 95031 |</span><br><span class="line">| 110 | 张飞      | 男  | 1974-06-03 | 95038 |</span><br><span class="line">+-----+-----------+-----+------------+-------+</span><br></pre></td></tr></table></figure><h3 id="YEAR-与-NOW-函数"><a href="#YEAR-与-NOW-函数" class="headerlink" title="YEAR 与 NOW 函数"></a>YEAR 与 NOW 函数</h3><p><strong>查询 <code>student</code> 表中每个学生的姓名和年龄。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-- 使用函数 YEAR(NOW()) 计算出当前年份，减去出生年份后得出年龄。</span><br><span class="line">SELECT name, YEAR(NOW()) - YEAR(birthday) as age FROM student;</span><br><span class="line">+-----------+------+</span><br><span class="line">| name      | age  |</span><br><span class="line">+-----------+------+</span><br><span class="line">| 曾华      |   42 |</span><br><span class="line">| 匡明      |   44 |</span><br><span class="line">| 王丽      |   43 |</span><br><span class="line">| 李军      |   43 |</span><br><span class="line">| 王芳      |   44 |</span><br><span class="line">| 陆军      |   45 |</span><br><span class="line">| 王尼玛    |   43 |</span><br><span class="line">| 张全蛋    |   44 |</span><br><span class="line">| 赵铁柱    |   45 |</span><br><span class="line">| 张飞      |   45 |</span><br><span class="line">+-----------+------+</span><br></pre></td></tr></table></figure><h3 id="MAX-与-MIN-函数"><a href="#MAX-与-MIN-函数" class="headerlink" title="MAX 与 MIN 函数"></a>MAX 与 MIN 函数</h3><p><strong>查询 <code>student</code> 表中最大和最小的 <code>birthday</code> 值。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT MAX(birthday), MIN(birthday) FROM student;</span><br><span class="line">+---------------+---------------+</span><br><span class="line">| MAX(birthday) | MIN(birthday) |</span><br><span class="line">+---------------+---------------+</span><br><span class="line">| 1977-09-01    | 1974-06-03    |</span><br><span class="line">+---------------+---------------+</span><br></pre></td></tr></table></figure><h3 id="多段排序"><a href="#多段排序" class="headerlink" title="多段排序"></a>多段排序</h3><p><strong>以 <code>class</code> 和 <code>birthday</code> 从大到小的顺序查询 <code>student</code> 表。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM student ORDER BY class DESC, birthday;</span><br><span class="line">+-----+-----------+-----+------------+-------+</span><br><span class="line">| no  | name      | sex | birthday   | class |</span><br><span class="line">+-----+-----------+-----+------------+-------+</span><br><span class="line">| 110 | 张飞      | 男  | 1974-06-03 | 95038 |</span><br><span class="line">| 103 | 王丽      | 女  | 1976-01-23 | 95033 |</span><br><span class="line">| 104 | 李军      | 男  | 1976-02-20 | 95033 |</span><br><span class="line">| 107 | 王尼玛    | 男  | 1976-02-20 | 95033 |</span><br><span class="line">| 101 | 曾华      | 男  | 1977-09-01 | 95033 |</span><br><span class="line">| 106 | 陆军      | 男  | 1974-06-03 | 95031 |</span><br><span class="line">| 109 | 赵铁柱    | 男  | 1974-06-03 | 95031 |</span><br><span class="line">| 105 | 王芳      | 女  | 1975-02-10 | 95031 |</span><br><span class="line">| 108 | 张全蛋    | 男  | 1975-02-10 | 95031 |</span><br><span class="line">| 102 | 匡明      | 男  | 1975-10-02 | 95031 |</span><br><span class="line">+-----+-----------+-----+------------+-------+</span><br></pre></td></tr></table></figure><h3 id="子查询-5"><a href="#子查询-5" class="headerlink" title="子查询 - 5"></a>子查询 - 5</h3><p><strong>查询 “男” 教师及其所上的课程。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM course WHERE t_no in (SELECT no FROM teacher WHERE sex &#x3D; &#39;男&#39;);</span><br><span class="line">+-------+--------------+------+</span><br><span class="line">| no    | name         | t_no |</span><br><span class="line">+-------+--------------+------+</span><br><span class="line">| 3-245 | 操作系统     | 804  |</span><br><span class="line">| 6-166 | 数字电路     | 856  |</span><br><span class="line">+-------+--------------+------+</span><br></pre></td></tr></table></figure><h3 id="MAX-函数与子查询"><a href="#MAX-函数与子查询" class="headerlink" title="MAX 函数与子查询"></a>MAX 函数与子查询</h3><p><strong>查询最高分同学的 <code>score</code> 表。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- 找出最高成绩（该查询只能有一个结果）</span><br><span class="line">SELECT MAX(degree) FROM score;</span><br><span class="line"></span><br><span class="line">-- 根据上面的条件筛选出所有最高成绩表，</span><br><span class="line">-- 该查询可能有多个结果，假设 degree 值多次符合条件。</span><br><span class="line">SELECT * FROM score WHERE degree &#x3D; (SELECT MAX(degree) FROM score);</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 103  | 3-105 |     92 |</span><br><span class="line">+------+-------+--------+</span><br></pre></td></tr></table></figure><h3 id="子查询-6"><a href="#子查询-6" class="headerlink" title="子查询 - 6"></a>子查询 - 6</h3><p><strong>查询和 “李军” 同性别的所有同学 <code>name</code> 。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">-- 首先将李军的性别作为条件取出来</span><br><span class="line">SELECT sex FROM student WHERE name &#x3D; &#39;李军&#39;;</span><br><span class="line">+-----+</span><br><span class="line">| sex |</span><br><span class="line">+-----+</span><br><span class="line">| 男  |</span><br><span class="line">+-----+</span><br><span class="line"></span><br><span class="line">-- 根据性别查询 name 和 sex</span><br><span class="line">SELECT name, sex FROM student WHERE sex &#x3D; (</span><br><span class="line">    SELECT sex FROM student WHERE name &#x3D; &#39;李军&#39;</span><br><span class="line">);</span><br><span class="line">+-----------+-----+</span><br><span class="line">| name      | sex |</span><br><span class="line">+-----------+-----+</span><br><span class="line">| 曾华      | 男  |</span><br><span class="line">| 匡明      | 男  |</span><br><span class="line">| 李军      | 男  |</span><br><span class="line">| 陆军      | 男  |</span><br><span class="line">| 王尼玛    | 男  |</span><br><span class="line">| 张全蛋    | 男  |</span><br><span class="line">| 赵铁柱    | 男  |</span><br><span class="line">| 张飞      | 男  |</span><br><span class="line">+-----------+-----+</span><br></pre></td></tr></table></figure><h3 id="子查询-7"><a href="#子查询-7" class="headerlink" title="子查询 - 7"></a>子查询 - 7</h3><p><strong>查询和 “李军” 同性别且同班的同学 <code>name</code> 。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SELECT name, sex, class FROM student WHERE sex &#x3D; (</span><br><span class="line">    SELECT sex FROM student WHERE name &#x3D; &#39;李军&#39;</span><br><span class="line">) AND class &#x3D; (</span><br><span class="line">    SELECT class FROM student WHERE name &#x3D; &#39;李军&#39;</span><br><span class="line">);</span><br><span class="line">+-----------+-----+-------+</span><br><span class="line">| name      | sex | class |</span><br><span class="line">+-----------+-----+-------+</span><br><span class="line">| 曾华      | 男  | 95033 |</span><br><span class="line">| 李军      | 男  | 95033 |</span><br><span class="line">| 王尼玛    | 男  | 95033 |</span><br><span class="line">+-----------+-----+-------+</span><br></pre></td></tr></table></figure><h3 id="子查询-8"><a href="#子查询-8" class="headerlink" title="子查询 - 8"></a>子查询 - 8</h3><p><strong>查询所有选修 “计算机导论” 课程的 “男” 同学成绩表。</strong></p><p>需要的 “计算机导论” 和性别为 “男” 的编号可以在 <code>course</code> 和 <code>student</code> 表中找到。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM score WHERE c_no &#x3D; (</span><br><span class="line">    SELECT no FROM course WHERE name &#x3D; &#39;计算机导论&#39;</span><br><span class="line">) AND s_no IN (</span><br><span class="line">    SELECT no FROM student WHERE sex &#x3D; &#39;男&#39;</span><br><span class="line">);</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 101  | 3-105 |     90 |</span><br><span class="line">| 102  | 3-105 |     91 |</span><br><span class="line">| 104  | 3-105 |     89 |</span><br><span class="line">| 109  | 3-105 |     76 |</span><br><span class="line">+------+-------+--------+</span><br></pre></td></tr></table></figure><h3 id="按等级查询"><a href="#按等级查询" class="headerlink" title="按等级查询"></a>按等级查询</h3><p>建立一个 <code>grade</code> 表代表学生的成绩等级，并插入数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE grade (</span><br><span class="line">    low INT(3),</span><br><span class="line">    upp INT(3),</span><br><span class="line">    grade char(1)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO grade VALUES (90, 100, &#39;A&#39;);</span><br><span class="line">INSERT INTO grade VALUES (80, 89, &#39;B&#39;);</span><br><span class="line">INSERT INTO grade VALUES (70, 79, &#39;C&#39;);</span><br><span class="line">INSERT INTO grade VALUES (60, 69, &#39;D&#39;);</span><br><span class="line">INSERT INTO grade VALUES (0, 59, &#39;E&#39;);</span><br><span class="line"></span><br><span class="line">SELECT * FROM grade;</span><br><span class="line">+------+------+-------+</span><br><span class="line">| low  | upp  | grade |</span><br><span class="line">+------+------+-------+</span><br><span class="line">|   90 |  100 | A     |</span><br><span class="line">|   80 |   89 | B     |</span><br><span class="line">|   70 |   79 | C     |</span><br><span class="line">|   60 |   69 | D     |</span><br><span class="line">|    0 |   59 | E     |</span><br><span class="line">+------+------+-------+</span><br></pre></td></tr></table></figure><p><strong>查询所有学生的 <code>s_no</code> 、<code>c_no</code> 和 <code>grade</code> 列。</strong></p><p>思路是，使用区间 ( <code>BETWEEN</code> ) 查询，判断学生的成绩 ( <code>degree</code> )  在 <code>grade</code> 表的 <code>low</code> 和 <code>upp</code> 之间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">SELECT s_no, c_no, grade FROM score, grade </span><br><span class="line">WHERE degree BETWEEN low AND upp;</span><br><span class="line">+------+-------+-------+</span><br><span class="line">| s_no | c_no  | grade |</span><br><span class="line">+------+-------+-------+</span><br><span class="line">| 101  | 3-105 | A     |</span><br><span class="line">| 102  | 3-105 | A     |</span><br><span class="line">| 103  | 3-105 | A     |</span><br><span class="line">| 103  | 3-245 | B     |</span><br><span class="line">| 103  | 6-166 | B     |</span><br><span class="line">| 104  | 3-105 | B     |</span><br><span class="line">| 105  | 3-105 | B     |</span><br><span class="line">| 105  | 3-245 | C     |</span><br><span class="line">| 105  | 6-166 | C     |</span><br><span class="line">| 109  | 3-105 | C     |</span><br><span class="line">| 109  | 3-245 | D     |</span><br><span class="line">| 109  | 6-166 | B     |</span><br><span class="line">+------+-------+-------+</span><br></pre></td></tr></table></figure><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><p>准备用于测试连接查询的数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE testJoin;</span><br><span class="line"></span><br><span class="line">CREATE TABLE person (</span><br><span class="line">    id INT,</span><br><span class="line">    name VARCHAR(20),</span><br><span class="line">    cardId INT</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE card (</span><br><span class="line">    id INT,</span><br><span class="line">    name VARCHAR(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO card VALUES (1, &#39;饭卡&#39;), (2, &#39;建行卡&#39;), (3, &#39;农行卡&#39;), (4, &#39;工商卡&#39;), (5, &#39;邮政卡&#39;);</span><br><span class="line">SELECT * FROM card;</span><br><span class="line">+------+-----------+</span><br><span class="line">| id   | name      |</span><br><span class="line">+------+-----------+</span><br><span class="line">|    1 | 饭卡      |</span><br><span class="line">|    2 | 建行卡    |</span><br><span class="line">|    3 | 农行卡    |</span><br><span class="line">|    4 | 工商卡    |</span><br><span class="line">|    5 | 邮政卡    |</span><br><span class="line">+------+-----------+</span><br><span class="line"></span><br><span class="line">INSERT INTO person VALUES (1, &#39;张三&#39;, 1), (2, &#39;李四&#39;, 3), (3, &#39;王五&#39;, 6);</span><br><span class="line">SELECT * FROM person;</span><br><span class="line">+------+--------+--------+</span><br><span class="line">| id   | name   | cardId |</span><br><span class="line">+------+--------+--------+</span><br><span class="line">|    1 | 张三   |      1 |</span><br><span class="line">|    2 | 李四   |      3 |</span><br><span class="line">|    3 | 王五   |      6 |</span><br><span class="line">+------+--------+--------+</span><br></pre></td></tr></table></figure><p>分析两张表发现，<code>person</code> 表并没有为 <code>cardId</code> 字段设置一个在 <code>card</code> 表中对应的 <code>id</code> 外键。如果设置了的话，<code>person</code> 中 <code>cardId</code> 字段值为 <code>6</code> 的行就插不进去，因为该 <code>cardId</code> 值在 <code>card</code> 表中并没有。</p><h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><p>要查询这两张表中有关系的数据，可以使用 <code>INNER JOIN</code> ( 内连接 ) 将它们连接在一起。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- INNER JOIN: 表示为内连接，将两张表拼接在一起。</span><br><span class="line">-- on: 表示要执行某个条件。</span><br><span class="line">SELECT * FROM person INNER JOIN card on person.cardId &#x3D; card.id;</span><br><span class="line">+------+--------+--------+------+-----------+</span><br><span class="line">| id   | name   | cardId | id   | name      |</span><br><span class="line">+------+--------+--------+------+-----------+</span><br><span class="line">|    1 | 张三   |      1 |    1 | 饭卡      |</span><br><span class="line">|    2 | 李四   |      3 |    3 | 农行卡    |</span><br><span class="line">+------+--------+--------+------+-----------+</span><br><span class="line"></span><br><span class="line">-- 将 INNER 关键字省略掉，结果也是一样的。</span><br><span class="line">-- SELECT * FROM person JOIN card on person.cardId &#x3D; card.id;</span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>card</code> 的整张表被连接到了右边。</p></blockquote><h4 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h4><p>完整显示左边的表 ( <code>person</code> ) ，右边的表如果符合条件就显示，不符合则补 <code>NULL</code> 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- LEFT JOIN 也叫做 LEFT OUTER JOIN，用这两种方式的查询结果是一样的。</span><br><span class="line">SELECT * FROM person LEFT JOIN card on person.cardId &#x3D; card.id;</span><br><span class="line">+------+--------+--------+------+-----------+</span><br><span class="line">| id   | name   | cardId | id   | name      |</span><br><span class="line">+------+--------+--------+------+-----------+</span><br><span class="line">|    1 | 张三   |      1 |    1 | 饭卡      |</span><br><span class="line">|    2 | 李四   |      3 |    3 | 农行卡    |</span><br><span class="line">|    3 | 王五   |      6 | NULL | NULL      |</span><br><span class="line">+------+--------+--------+------+-----------+</span><br></pre></td></tr></table></figure><h4 id="右外链接"><a href="#右外链接" class="headerlink" title="右外链接"></a>右外链接</h4><p>完整显示右边的表 ( <code>card</code> ) ，左边的表如果符合条件就显示，不符合则补 <code>NULL</code> 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM person RIGHT JOIN card on person.cardId &#x3D; card.id;</span><br><span class="line">+------+--------+--------+------+-----------+</span><br><span class="line">| id   | name   | cardId | id   | name      |</span><br><span class="line">+------+--------+--------+------+-----------+</span><br><span class="line">|    1 | 张三   |      1 |    1 | 饭卡      |</span><br><span class="line">|    2 | 李四   |      3 |    3 | 农行卡    |</span><br><span class="line">| NULL | NULL   |   NULL |    2 | 建行卡    |</span><br><span class="line">| NULL | NULL   |   NULL |    4 | 工商卡    |</span><br><span class="line">| NULL | NULL   |   NULL |    5 | 邮政卡    |</span><br><span class="line">+------+--------+--------+------+-----------+</span><br></pre></td></tr></table></figure><h4 id="全外链接"><a href="#全外链接" class="headerlink" title="全外链接"></a>全外链接</h4><p>完整显示两张表的全部数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-- MySQL 不支持这种语法的全外连接</span><br><span class="line">-- SELECT * FROM person FULL JOIN card on person.cardId &#x3D; card.id;</span><br><span class="line">-- 出现错误：</span><br><span class="line">-- ERROR 1054 (42S22): Unknown column &#39;person.cardId&#39; in &#39;on clause&#39;</span><br><span class="line"></span><br><span class="line">-- MySQL全连接语法，使用 UNION 将两张表合并在一起。</span><br><span class="line">SELECT * FROM person LEFT JOIN card on person.cardId &#x3D; card.id</span><br><span class="line">UNION</span><br><span class="line">SELECT * FROM person RIGHT JOIN card on person.cardId &#x3D; card.id;</span><br><span class="line">+------+--------+--------+------+-----------+</span><br><span class="line">| id   | name   | cardId | id   | name      |</span><br><span class="line">+------+--------+--------+------+-----------+</span><br><span class="line">|    1 | 张三   |      1 |    1 | 饭卡      |</span><br><span class="line">|    2 | 李四   |      3 |    3 | 农行卡    |</span><br><span class="line">|    3 | 王五   |      6 | NULL | NULL      |</span><br><span class="line">| NULL | NULL   |   NULL |    2 | 建行卡    |</span><br><span class="line">| NULL | NULL   |   NULL |    4 | 工商卡    |</span><br><span class="line">| NULL | NULL   |   NULL |    5 | 邮政卡    |</span><br><span class="line">+------+--------+--------+------+-----------+</span><br></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>在 MySQL 中，事务其实是一个最小的不可分割的工作单元。事务能够<strong>保证一个业务的完整性</strong>。</p><p>比如我们的银行转账：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- a -&gt; -100</span><br><span class="line">UPDATE user set money &#x3D; money - 100 WHERE name &#x3D; &#39;a&#39;;</span><br><span class="line"></span><br><span class="line">-- b -&gt; +100</span><br><span class="line">UPDATE user set money &#x3D; money + 100 WHERE name &#x3D; &#39;b&#39;;</span><br></pre></td></tr></table></figure><p>在实际项目中，假设只有一条 SQL 语句执行成功，而另外一条执行失败了，就会出现数据前后不一致。</p><p>因此，在执行多条有关联 SQL 语句时，<strong>事务</strong>可能会要求这些 SQL 语句要么同时执行成功，要么就都执行失败。</p><h3 id="如何控制事务-COMMIT-ROLLBACK"><a href="#如何控制事务-COMMIT-ROLLBACK" class="headerlink" title="如何控制事务 - COMMIT / ROLLBACK"></a>如何控制事务 - COMMIT / ROLLBACK</h3><p>在 MySQL 中，事务的<strong>自动提交</strong>状态默认是开启的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- 查询事务的自动提交状态</span><br><span class="line">SELECT @@AUTOCOMMIT;</span><br><span class="line">+--------------+</span><br><span class="line">| @@AUTOCOMMIT |</span><br><span class="line">+--------------+</span><br><span class="line">|            1 |</span><br><span class="line">+--------------+</span><br></pre></td></tr></table></figure><p><strong>自动提交的作用</strong>：当我们执行一条 SQL 语句的时候，其产生的效果就会立即体现出来，且不能<strong>回滚</strong>。</p><p>什么是回滚？举个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE bank;</span><br><span class="line"></span><br><span class="line">USE bank;</span><br><span class="line"></span><br><span class="line">CREATE TABLE user (</span><br><span class="line">    id INT PRIMARY KEY,</span><br><span class="line">    name VARCHAR(20),</span><br><span class="line">    money INT</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO user VALUES (1, &#39;a&#39;, 1000);</span><br><span class="line"></span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |  1000 |</span><br><span class="line">+----+------+-------+</span><br></pre></td></tr></table></figure><p>可以看到，在执行插入语句后数据立刻生效，原因是 MySQL 中的事务自动将它<strong>提交</strong>到了数据库中。那么所谓<strong>回滚</strong>的意思就是，撤销执行过的所有 SQL 语句，使其回滚到<strong>最后一次提交</strong>数据时的状态。</p><p>在 MySQL 中使用 <code>ROLLBACK</code> 执行回滚：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- 回滚到最后一次提交</span><br><span class="line">ROLLBACK;</span><br><span class="line"></span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |  1000 |</span><br><span class="line">+----+------+-------+</span><br></pre></td></tr></table></figure><p>由于所有执行过的 SQL 语句都已经被提交过了，所以数据并没有发生回滚。那如何让数据可以发生回滚？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 关闭自动提交</span><br><span class="line">SET AUTOCOMMIT &#x3D; 0;</span><br><span class="line"></span><br><span class="line">-- 查询自动提交状态</span><br><span class="line">SELECT @@AUTOCOMMIT;</span><br><span class="line">+--------------+</span><br><span class="line">| @@AUTOCOMMIT |</span><br><span class="line">+--------------+</span><br><span class="line">|            0 |</span><br><span class="line">+--------------+</span><br></pre></td></tr></table></figure><p>将自动提交关闭后，测试数据回滚：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO user VALUES (2, &#39;b&#39;, 1000);</span><br><span class="line"></span><br><span class="line">-- 关闭 AUTOCOMMIT 后，数据的变化是在一张虚拟的临时数据表中展示，</span><br><span class="line">-- 发生变化的数据并没有真正插入到数据表中。</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |  1000 |</span><br><span class="line">|  2 | b    |  1000 |</span><br><span class="line">+----+------+-------+</span><br><span class="line"></span><br><span class="line">-- 数据表中的真实数据其实还是：</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |  1000 |</span><br><span class="line">+----+------+-------+</span><br><span class="line"></span><br><span class="line">-- 由于数据还没有真正提交，可以使用回滚</span><br><span class="line">ROLLBACK;</span><br><span class="line"></span><br><span class="line">-- 再次查询</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |  1000 |</span><br><span class="line">+----+------+-------+</span><br></pre></td></tr></table></figure><p>那如何将虚拟的数据真正提交到数据库中？使用 <code>COMMIT</code> : </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO user VALUES (2, &#39;b&#39;, 1000);</span><br><span class="line">-- 手动提交数据（持久性），</span><br><span class="line">-- 将数据真正提交到数据库中，执行后不能再回滚提交过的数据。</span><br><span class="line">COMMIT;</span><br><span class="line"></span><br><span class="line">-- 提交后测试回滚</span><br><span class="line">ROLLBACK;</span><br><span class="line"></span><br><span class="line">-- 再次查询（回滚无效了）</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |  1000 |</span><br><span class="line">|  2 | b    |  1000 |</span><br><span class="line">+----+------+-------+</span><br></pre></td></tr></table></figure><blockquote><p><strong>总结</strong></p><ol><li><p><strong>自动提交</strong></p><ul><li><p>查看自动提交状态：<code>SELECT @@AUTOCOMMIT</code> ；</p></li><li><p>设置自动提交状态：<code>SET AUTOCOMMIT = 0</code> 。</p></li></ul></li><li><p><strong>手动提交</strong></p><p><code>@@AUTOCOMMIT = 0</code> 时，使用 <code>COMMIT</code> 命令提交事务。</p></li><li><p><strong>事务回滚</strong></p><p><code>@@AUTOCOMMIT = 0</code> 时，使用 <code>ROLLBACK</code> 命令回滚事务。</p></li></ol></blockquote><p><strong>事务的实际应用</strong>，让我们再回到银行转账项目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- 转账</span><br><span class="line">UPDATE user set money &#x3D; money - 100 WHERE name &#x3D; &#39;a&#39;;</span><br><span class="line"></span><br><span class="line">-- 到账</span><br><span class="line">UPDATE user set money &#x3D; money + 100 WHERE name &#x3D; &#39;b&#39;;</span><br><span class="line"></span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |   900 |</span><br><span class="line">|  2 | b    |  1100 |</span><br><span class="line">+----+------+-------+</span><br></pre></td></tr></table></figure><p>这时假设在转账时发生了意外，就可以使用 <code>ROLLBACK</code> 回滚到最后一次提交的状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 假设转账发生了意外，需要回滚。</span><br><span class="line">ROLLBACK;</span><br><span class="line"></span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |  1000 |</span><br><span class="line">|  2 | b    |  1000 |</span><br><span class="line">+----+------+-------+</span><br></pre></td></tr></table></figure><p>这时我们又回到了发生意外之前的状态，也就是说，事务给我们提供了一个可以反悔的机会。假设数据没有发生意外，这时可以手动将数据真正提交到数据表中：<code>COMMIT</code> 。</p><h3 id="手动开启事务-BEGIN-START-TRANSACTION"><a href="#手动开启事务-BEGIN-START-TRANSACTION" class="headerlink" title="手动开启事务 - BEGIN / START TRANSACTION"></a>手动开启事务 - BEGIN / START TRANSACTION</h3><p>事务的默认提交被开启 ( <code>@@AUTOCOMMIT = 1</code> ) 后，此时就不能使用事务回滚了。但是我们还可以手动开启一个事务处理事件，使其可以发生回滚：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">-- 使用 BEGIN 或者 START TRANSACTION 手动开启一个事务</span><br><span class="line">-- START TRANSACTION;</span><br><span class="line">BEGIN;</span><br><span class="line">UPDATE user set money &#x3D; money - 100 WHERE name &#x3D; &#39;a&#39;;</span><br><span class="line">UPDATE user set money &#x3D; money + 100 WHERE name &#x3D; &#39;b&#39;;</span><br><span class="line"></span><br><span class="line">-- 由于手动开启的事务没有开启自动提交，</span><br><span class="line">-- 此时发生变化的数据仍然是被保存在一张临时表中。</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |   900 |</span><br><span class="line">|  2 | b    |  1100 |</span><br><span class="line">+----+------+-------+</span><br><span class="line"></span><br><span class="line">-- 测试回滚</span><br><span class="line">ROLLBACK;</span><br><span class="line"></span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |  1000 |</span><br><span class="line">|  2 | b    |  1000 |</span><br><span class="line">+----+------+-------+</span><br></pre></td></tr></table></figure><p>仍然使用 <code>COMMIT</code> 提交数据，提交后无法再发生本次事务的回滚。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">BEGIN;</span><br><span class="line">UPDATE user set money &#x3D; money - 100 WHERE name &#x3D; &#39;a&#39;;</span><br><span class="line">UPDATE user set money &#x3D; money + 100 WHERE name &#x3D; &#39;b&#39;;</span><br><span class="line"></span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |   900 |</span><br><span class="line">|  2 | b    |  1100 |</span><br><span class="line">+----+------+-------+</span><br><span class="line"></span><br><span class="line">-- 提交数据</span><br><span class="line">COMMIT;</span><br><span class="line"></span><br><span class="line">-- 测试回滚（无效，因为表的数据已经被提交）</span><br><span class="line">ROLLBACK;</span><br></pre></td></tr></table></figure><h3 id="事务的-ACID-特征与使用"><a href="#事务的-ACID-特征与使用" class="headerlink" title="事务的 ACID 特征与使用"></a>事务的 ACID 特征与使用</h3><p><strong>事务的四大特征：</strong></p><ul><li><strong>A 原子性</strong>：事务是最小的单位，不可以再分割；</li><li><strong>C 一致性</strong>：要求同一事务中的 SQL 语句，必须保证同时成功或者失败；</li><li><strong>I 隔离性</strong>：事务1 和 事务2 之间是具有隔离性的；</li><li><strong>D 持久性</strong>：事务一旦结束 ( <code>COMMIT</code> ) ，就不可以再返回了 ( <code>ROLLBACK</code> ) 。</li></ul><h3 id="事务的隔离性"><a href="#事务的隔离性" class="headerlink" title="事务的隔离性"></a>事务的隔离性</h3><p><strong>事务的隔离性可分为四种 ( 性能从低到高 )</strong> ：</p><ol><li><p><strong>READ UNCOMMITTED ( 读取未提交 )</strong></p><p>如果有多个事务，那么任意事务都可以看见其他事务的<strong>未提交数据</strong>。</p></li><li><p><strong>READ COMMITTED ( 读取已提交 )</strong></p><p>只能读取到其他事务<strong>已经提交的数据</strong>。</p></li><li><p><strong>REPEATABLE READ ( 可被重复读 )</strong></p><p>如果有多个连接都开启了事务，那么事务之间不能共享数据记录，否则只能共享已提交的记录。</p></li><li><p><strong>SERIALIZABLE ( 串行化 )</strong></p><p>所有的事务都会按照<strong>固定顺序执行</strong>，执行完一个事务后再继续执行下一个事务的<strong>写入操作</strong>。</p></li></ol><p>查看当前数据库的默认隔离级别：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- MySQL 8.x, GLOBAL 表示系统级别，不加表示会话级别。</span><br><span class="line">SELECT @@GLOBAL.TRANSACTION_ISOLATION;</span><br><span class="line">SELECT @@TRANSACTION_ISOLATION;</span><br><span class="line">+--------------------------------+</span><br><span class="line">| @@GLOBAL.TRANSACTION_ISOLATION |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| REPEATABLE-READ                | -- MySQL的默认隔离级别，可以重复读。</span><br><span class="line">+--------------------------------+</span><br><span class="line"></span><br><span class="line">-- MySQL 5.x</span><br><span class="line">SELECT @@GLOBAL.TX_ISOLATION;</span><br><span class="line">SELECT @@TX_ISOLATION;</span><br></pre></td></tr></table></figure><p>修改隔离级别：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 设置系统隔离级别，LEVEL 后面表示要设置的隔离级别 (READ UNCOMMITTED)。</span><br><span class="line">SET GLOBAL TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;</span><br><span class="line"></span><br><span class="line">-- 查询系统隔离级别，发现已经被修改。</span><br><span class="line">SELECT @@GLOBAL.TRANSACTION_ISOLATION;</span><br><span class="line">+--------------------------------+</span><br><span class="line">| @@GLOBAL.TRANSACTION_ISOLATION |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| READ-UNCOMMITTED               |</span><br><span class="line">+--------------------------------+</span><br></pre></td></tr></table></figure><h4 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h4><p>测试 <strong>READ UNCOMMITTED ( 读取未提交 )</strong> 的隔离性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO user VALUES (3, &#39;小明&#39;, 1000);</span><br><span class="line">INSERT INTO user VALUES (4, &#39;淘宝店&#39;, 1000);</span><br><span class="line"></span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">| id | name      | money |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">|  1 | a         |   900 |</span><br><span class="line">|  2 | b         |  1100 |</span><br><span class="line">|  3 | 小明      |  1000 |</span><br><span class="line">|  4 | 淘宝店    |  1000 |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line"></span><br><span class="line">-- 开启一个事务操作数据</span><br><span class="line">-- 假设小明在淘宝店买了一双800块钱的鞋子：</span><br><span class="line">START TRANSACTION;</span><br><span class="line">UPDATE user SET money &#x3D; money - 800 WHERE name &#x3D; &#39;小明&#39;;</span><br><span class="line">UPDATE user SET money &#x3D; money + 800 WHERE name &#x3D; &#39;淘宝店&#39;;</span><br><span class="line"></span><br><span class="line">-- 然后淘宝店在另一方查询结果，发现钱已到账。</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">| id | name      | money |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">|  1 | a         |   900 |</span><br><span class="line">|  2 | b         |  1100 |</span><br><span class="line">|  3 | 小明      |   200 |</span><br><span class="line">|  4 | 淘宝店    |  1800 |</span><br><span class="line">+----+-----------+-------+</span><br></pre></td></tr></table></figure><p>由于小明的转账是在新开启的事务上进行操作的，而该操作的结果是可以被其他事务（另一方的淘宝店）看见的，因此淘宝店的查询结果是正确的，淘宝店确认到账。但就在这时，如果小明在它所处的事务上又执行了 <code>ROLLBACK</code> 命令，会发生什么？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- 小明所处的事务</span><br><span class="line">ROLLBACK;</span><br><span class="line"></span><br><span class="line">-- 此时无论对方是谁，如果再去查询结果就会发现：</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">| id | name      | money |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">|  1 | a         |   900 |</span><br><span class="line">|  2 | b         |  1100 |</span><br><span class="line">|  3 | 小明      |  1000 |</span><br><span class="line">|  4 | 淘宝店    |  1000 |</span><br><span class="line">+----+-----------+-------+</span><br></pre></td></tr></table></figure><p>这就是所谓的<strong>脏读</strong>，一个事务读取到另外一个事务还未提交的数据。这在实际开发中是不允许出现的。</p><h4 id="读取已提交"><a href="#读取已提交" class="headerlink" title="读取已提交"></a>读取已提交</h4><p>把隔离级别设置为 <strong>READ COMMITTED</strong> ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SET GLOBAL TRANSACTION ISOLATION LEVEL READ COMMITTED;</span><br><span class="line">SELECT @@GLOBAL.TRANSACTION_ISOLATION;</span><br><span class="line">+--------------------------------+</span><br><span class="line">| @@GLOBAL.TRANSACTION_ISOLATION |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| READ-COMMITTED                 |</span><br><span class="line">+--------------------------------+</span><br></pre></td></tr></table></figure><p>这样，再有新的事务连接进来时，它们就只能查询到已经提交过的事务数据了。但是对于当前事务来说，它们看到的还是未提交的数据，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">-- 正在操作数据事务（当前事务）</span><br><span class="line">START TRANSACTION;</span><br><span class="line">UPDATE user SET money &#x3D; money - 800 WHERE name &#x3D; &#39;小明&#39;;</span><br><span class="line">UPDATE user SET money &#x3D; money + 800 WHERE name &#x3D; &#39;淘宝店&#39;;</span><br><span class="line"></span><br><span class="line">-- 虽然隔离级别被设置为了 READ COMMITTED，但在当前事务中，</span><br><span class="line">-- 它看到的仍然是数据表中临时改变数据，而不是真正提交过的数据。</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">| id | name      | money |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">|  1 | a         |   900 |</span><br><span class="line">|  2 | b         |  1100 |</span><br><span class="line">|  3 | 小明      |   200 |</span><br><span class="line">|  4 | 淘宝店    |  1800 |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 假设此时在远程开启了一个新事务，连接到数据库。</span><br><span class="line">$ mysql -u root -p12345612</span><br><span class="line"></span><br><span class="line">-- 此时远程连接查询到的数据只能是已经提交过的</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">| id | name      | money |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">|  1 | a         |   900 |</span><br><span class="line">|  2 | b         |  1100 |</span><br><span class="line">|  3 | 小明      |  1000 |</span><br><span class="line">|  4 | 淘宝店    |  1000 |</span><br><span class="line">+----+-----------+-------+</span><br></pre></td></tr></table></figure><p>但是这样还有问题，那就是假设一个事务在操作数据时，其他事务干扰了这个事务的数据。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">-- 小张在查询数据的时候发现：</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">| id | name      | money |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">|  1 | a         |   900 |</span><br><span class="line">|  2 | b         |  1100 |</span><br><span class="line">|  3 | 小明      |   200 |</span><br><span class="line">|  4 | 淘宝店    |  1800 |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line"></span><br><span class="line">-- 在小张求表的 money 平均值之前，小王做了一个操作：</span><br><span class="line">START TRANSACTION;</span><br><span class="line">INSERT INTO user VALUES (5, &#39;c&#39;, 100);</span><br><span class="line">COMMIT;</span><br><span class="line"></span><br><span class="line">-- 此时表的真实数据是：</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">| id | name      | money |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">|  1 | a         |   900 |</span><br><span class="line">|  2 | b         |  1100 |</span><br><span class="line">|  3 | 小明      |  1000 |</span><br><span class="line">|  4 | 淘宝店    |  1000 |</span><br><span class="line">|  5 | c         |   100 |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line"></span><br><span class="line">-- 这时小张再求平均值的时候，就会出现计算不相符合的情况：</span><br><span class="line">SELECT AVG(money) FROM user;</span><br><span class="line">+------------+</span><br><span class="line">| AVG(money) |</span><br><span class="line">+------------+</span><br><span class="line">|  820.0000  |</span><br><span class="line">+------------+</span><br></pre></td></tr></table></figure><p>虽然 <strong>READ COMMITTED</strong> 让我们只能读取到其他事务已经提交的数据，但还是会出现问题，就是<strong>在读取同一个表的数据时，可能会发生前后不一致的情况。</strong>这被称为<strong>不可重复读现象 ( READ COMMITTED )</strong> 。</p><h4 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h4><p>将隔离级别设置为 <strong>REPEATABLE READ ( 可被重复读取 )</strong> :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SET GLOBAL TRANSACTION ISOLATION LEVEL REPEATABLE READ;</span><br><span class="line">SELECT @@GLOBAL.TRANSACTION_ISOLATION;</span><br><span class="line">+--------------------------------+</span><br><span class="line">| @@GLOBAL.TRANSACTION_ISOLATION |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| REPEATABLE-READ                |</span><br><span class="line">+--------------------------------+</span><br></pre></td></tr></table></figure><p>测试 <strong>REPEATABLE READ</strong> ，假设在两个不同的连接上分别执行 <code>START TRANSACTION</code> :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 小张 - 成都</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> <span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="string">&#x27;d&#x27;</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 小王 - 北京</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 小张 - 成都</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p>当前事务开启后，没提交之前，查询不到，提交后可以被查询到。但是，在提交之前其他事务被开启了，那么在这条事务线上，就不会查询到当前有操作事务的连接。相当于开辟出一条单独的线程。</p><p>无论小张是否执行过 <code>COMMIT</code> ，在小王这边，都不会查询到小张的事务记录，而是只会查询到自己所处事务的记录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name      <span class="operator">|</span> money <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> a         <span class="operator">|</span>   <span class="number">900</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> b         <span class="operator">|</span>  <span class="number">1100</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 小明      <span class="operator">|</span>  <span class="number">1000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> 淘宝店    <span class="operator">|</span>  <span class="number">1000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> c         <span class="operator">|</span>   <span class="number">100</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-------+</span></span><br></pre></td></tr></table></figure><p>这是<strong>因为小王在此之前开启了一个新的事务 ( <code>START TRANSACTION</code> ) **，那么</strong>在他的这条新事务的线上，跟其他事务是没有联系的**，也就是说，此时如果其他事务正在操作数据，它是不知道的。</p><p>然而事实是，在真实的数据表中，小张已经插入了一条数据。但是小王此时并不知道，也插入了同一条数据，会发生什么呢？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> <span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="string">&#x27;d&#x27;</span>, <span class="number">1000</span>);</span><br><span class="line"><span class="comment">-- ERROR 1062 (23000): Duplicate entry &#x27;6&#x27; for key &#x27;PRIMARY&#x27;</span></span><br></pre></td></tr></table></figure><p>报错了，操作被告知已存在主键为 <code>6</code> 的字段。这种现象也被称为<strong>幻读，一个事务提交的数据，不能被其他事务读取到</strong>。</p><h4 id="串行化"><a href="#串行化" class="headerlink" title="串行化"></a>串行化</h4><p>顾名思义，就是所有事务的<strong>写入操作</strong>全都是串行化的。什么意思？把隔离级别修改成 <strong>SERIALIZABLE</strong> :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SET GLOBAL TRANSACTION ISOLATION LEVEL SERIALIZABLE;</span><br><span class="line">SELECT @@GLOBAL.TRANSACTION_ISOLATION;</span><br><span class="line">+--------------------------------+</span><br><span class="line">| @@GLOBAL.TRANSACTION_ISOLATION |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| SERIALIZABLE                   |</span><br><span class="line">+--------------------------------+</span><br></pre></td></tr></table></figure><p>还是拿小张和小王来举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">-- 小张 - 成都</span><br><span class="line">START TRANSACTION;</span><br><span class="line"></span><br><span class="line">-- 小王 - 北京</span><br><span class="line">START TRANSACTION;</span><br><span class="line"></span><br><span class="line">-- 开启事务之前先查询表，准备操作数据。</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">| id | name      | money |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">|  1 | a         |   900 |</span><br><span class="line">|  2 | b         |  1100 |</span><br><span class="line">|  3 | 小明      |  1000 |</span><br><span class="line">|  4 | 淘宝店    |  1000 |</span><br><span class="line">|  5 | c         |   100 |</span><br><span class="line">|  6 | d         |  1000 |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line"></span><br><span class="line">-- 发现没有 7 号王小花，于是插入一条数据：</span><br><span class="line">INSERT INTO user VALUES (7, &#39;王小花&#39;, 1000);</span><br></pre></td></tr></table></figure><p>此时会发生什么呢？由于现在的隔离级别是 <strong>SERIALIZABLE ( 串行化 )</strong> ，串行化的意思就是：假设把所有的事务都放在一个串行的队列中，那么所有的事务都会按照<strong>固定顺序执行</strong>，执行完一个事务后再继续执行下一个事务的<strong>写入操作</strong> ( <strong>这意味着队列中同时只能执行一个事务的写入操作</strong> ) 。</p><p>根据这个解释，小王在插入数据时，会出现等待状态，直到小张执行 <code>COMMIT</code> 结束它所处的事务，或者出现等待超时。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MySQL学习笔记&quot;&gt;&lt;a href=&quot;#MySQL学习笔记&quot; class=&quot;headerlink&quot; title=&quot;MySQL学习笔记&quot;&gt;&lt;/a&gt;MySQL学习笔记&lt;/h1&gt;&lt;h2 id=&quot;登录和退出MySQL服务器&quot;&gt;&lt;a href=&quot;#登录和退出MySQL服务</summary>
      
    
    
    
    
    <category term="MySQL" scheme="https://182.92.7.32/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>个人网站的搭建</title>
    <link href="https://182.92.7.32/2021/01/22/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>https://182.92.7.32/2021/01/22/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E7%9A%84%E6%90%AD%E5%BB%BA/</id>
    <published>2021-01-22T13:47:14.000Z</published>
    <updated>2021-02-10T13:36:28.864Z</updated>
    
    <content type="html"><![CDATA[<h1 id="个人网站的搭建"><a href="#个人网站的搭建" class="headerlink" title="个人网站的搭建"></a>个人网站的搭建</h1><h2 id="1、软件的安装"><a href="#1、软件的安装" class="headerlink" title="1、软件的安装"></a>1、软件的安装</h2><ul><li><a href="https://blog.csdn.net/qq_43285335/article/details/90696126">nodejs软件的安装</a> 软件版本不宜过高，否则后续会部署失败，建议安装node-v12.14.1-x64  </li><li><a href="https://blog.csdn.net/qq_40593308/article/details/110559838">配置环境</a></li><li><a href="https://www.cnblogs.com/luyuandatabase/p/12145707.html">npm使用国内淘宝镜像的方法</a></li><li><a href="https://www.cnblogs.com/xueweisuoyong/p/11914045.html">安装Git</a></li><li>后续用到的软件：Visual Studio Code(直接360安装)，typro(MakeDown文本编辑器)  </li></ul><h2 id="2、注册GitHub账号并创建仓库"><a href="#2、注册GitHub账号并创建仓库" class="headerlink" title="2、注册GitHub账号并创建仓库"></a>2、注册GitHub账号并创建仓库</h2><ul><li><p>github仓库相当于一个域名，可直接部署到仓库</p></li><li><p><a href="https://www.xuanfengge.com/using-ssh-key-link-github-photo-tour.html">使用SSH密钥连接Github</a>  </p><h2 id="3、创建hexo博客"><a href="#3、创建hexo博客" class="headerlink" title="3、创建hexo博客"></a>3、创建hexo博客</h2></li><li><p><a href="https://hexoscript.gitbook.io/hexo-script/">hexoblog的安装</a> </p></li><li><p><a href="https://blog.csdn.net/jspnetcn/article/details/104111651">matery主题的安装</a></p></li><li><p><a href="https://blog.sky03.cn/posts/42790.html#toc-heading-1">hexo进阶之各种优化</a></p></li><li><p><a href="https://blog.csdn.net/kuashijidexibao/article/details/112971657?ops_request_misc=&request_id=&biz_id=102&utm_term=hexo+matery&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-3-112971657.pc_search_result_no_baidu_js">主题细致美化</a></p></li><li><p><a href="https://blog.csdn.net/NoCortY/article/details/99631249?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control">部署到阿里云</a></p></li><li><p><a href="https://blog.csdn.net/victoryxa/article/details/105841440?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522161175041816780265452803%252522%25252C%252522scm%252522%25253A%25252220140713.130102334.pc%25255Fall.%252522%25257D&request_id=161175041816780265452803&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-7-105841440.pc_search_result_no_baidu_js&utm_term=hexo%252Bmatery">主题个性化修改</a></p></li><li><p><a href="https://cungudafa.blog.csdn.net/article/details/106278206?utm_medium=distribute.pc_relevant.none-task-blog-OPENSEARCH-10.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-10.control">主题优化</a></p></li><li><p><a href="https://blog.csdn.net/cungudafa/article/details/104585711?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522161175295016780262558574%252522%25252C%252522scm%252522%25253A%25252220140713.130102334.pc%25255Fblog.%252522%25257D&request_id=161175295016780262558574&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-10-104585711.pc_v2_rank_blog_default&utm_term=hexo">Hexo自动部署到阿里云(Ubantu16.04)</a></p></li><li><p><a href="https://blog.csdn.net/kuashijidexibao/article/details/112971657?ops_request_misc=&request_id=&biz_id=102&utm_term=hexo+matery&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-3-112971657.pc_search_result_no_baidu_js">全</a></p></li><li><p><a href="https://artitalk.js.org/doc.html#%F0%9F%9A%80-%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8"> Artitalk.js</a>  </p></li></ul><h2 id="4、创建博客遇到的问题"><a href="#4、创建博客遇到的问题" class="headerlink" title="4、创建博客遇到的问题"></a>4、创建博客遇到的问题</h2><ul><li>在hexoblog文件夹下，右键git bash here进入博客 <img src="%E9%97%AE%E9%A2%981.png"></li><li><img src="%E9%97%AE%E9%A2%982.png"><br>改完_config文件后，确认保存再退出，然后hexo d，之后缺少git文件，然后安装git文件，最后就可发布成功</li><li><a href="https://rihiko.github.io/">https://rihiko.github.io/</a> 仓库文件加载不出来，改默认路径为上传分支master</li><li>映射端口出错，删掉C:\Users\DELL\getconfig，重新输入名称，邮箱<img src="%E9%97%AE%E9%A2%983.png"></li><li>首页空白页，主题文件一定要放到themes文件下  </li></ul><h2 id="5、优化"><a href="#5、优化" class="headerlink" title="5、优化"></a>5、优化</h2><h3 id="1、全屏显示"><a href="#1、全屏显示" class="headerlink" title="1、全屏显示"></a>1、全屏显示</h3><p>在navigation.ejs的搜索前或加入这段代码<br>  <li id="fullscreen_li" class="fullscreen"><br>    <a href="javascript:void(0);" class="modal-trigger waves-effect waves-light"><br>      <i class="fa fa-expand fa-lg"  title="全屏" ></i><br>    </a><br>  </li><br>然后在layout.ejs文件中引入<a href="https://cdn.jsdelivr.net/gh/small-rose/small-rose.github.io/js/fullscreen.js">fullscreen.js</a></p><h3 id="2、引入说说"><a href="#2、引入说说" class="headerlink" title="2、引入说说"></a>2、引入说说</h3><h3 id="3、安装看板娘"><a href="#3、安装看板娘" class="headerlink" title="3、安装看板娘"></a>3、安装看板娘</h3><p>卸载<br>npm uninstall hexo-helper-live2d<br>检查博客主目录下面的 package.json里是否有”hexo-helper-live2d”: “^3.0.3” 依赖<br>安装<br>npm install –save hexo-helper-live2d<br>F:\blog\hexoblog\node_modules  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;个人网站的搭建&quot;&gt;&lt;a href=&quot;#个人网站的搭建&quot; class=&quot;headerlink&quot; title=&quot;个人网站的搭建&quot;&gt;&lt;/a&gt;个人网站的搭建&lt;/h1&gt;&lt;h2 id=&quot;1、软件的安装&quot;&gt;&lt;a href=&quot;#1、软件的安装&quot; class=&quot;headerlink</summary>
      
    
    
    
    
    <category term="website" scheme="https://182.92.7.32/tags/website/"/>
    
  </entry>
  
  <entry>
    <title>centos</title>
    <link href="https://182.92.7.32/2021/01/20/centos/"/>
    <id>https://182.92.7.32/2021/01/20/centos/</id>
    <published>2021-01-20T03:20:14.000Z</published>
    <updated>2021-02-09T15:23:30.958Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h1><p>1、i：进入插入模式<br>2、保存：先按ESC键，再输入：wq<br>3、set nu查看行号<br>4、q！不保存退出<br>5、q退出<br>6、cd切换目录<br>7、rm -rf ./<em>删除当前目录下所有文件 .当前目录<br>8、umont卸载<br>9、ls查看目录下有什么内容<br>10、exit 登出<br>11、cat /etc/shells<br>12、var存放日志文件<br>13、file</em>     表示以file开头后面匹配所有字母<br>14、rpm -qf <code>which vim</code>（vim返回的结果作为rpm-qf查询的命令）<br>15、出现交换文件，vim正在运行或者没有正常关闭，直接关闭或删除就行<br>16、Windows中的文本文档，上传到Linux打开乱码<br>原因：编码问题<br>参数：<br>iconv -f gb2312 -t utf8 文件.txt（gb2312是文本的编码）<br>17、-l：列举所有已知的字符集<br>18、公司Linux服务器上脚本导到Windows上打开串行的问题（.sh）<br>原因：Windows和Linux处理回车的方法不同<br> 安装包：rpm -ivh /mnt/Packages/unix0DBC若没有换下一个<br>rpm -ivh /mnt/Packages/dos2unix-6.0.3.7.dl7.x86_64.rpm<br>测试：unix2dos 文件.sh<br>echo $?   (若好了会显示0)<br>注：dos2unix 这个命名是把Windows下的回车转成Linux类型<br>19、tail -1 /etc/passwd 显示文件最后一行<br>20、useradd -h查看提示<br>21、ll详细信息；ls只是列表<br>22、ctrl+shift+T在终端中打开终端<br>ctrl+d关闭终端也可以退出root权限<br>23、权限只看UID，0最大可以随便改<br>24、记不住修改命令，直接改vim /etc/passwd<br>25、service httpd start<br>reboot<br>26、touch {a,b,c}.txt,<br>ll *.txt<br>27、rm -rf 1.txt删除文件<br>28、查看文件CAL拓展权限（getfactl /tmp/a.txt）<br>29、echo aa &gt;&gt; hack.sh追加内容到hack.sh<br>30、qpi查看各种包的详细信息：rpm -qpi /mnt/Packages/php-mysql-5.4.16-42.el7.x86_64.rpm<br>31、rpm -Va &gt;rpm_check.txt列到txt文件中<br>32、网络yum源配不出来：下载Centos-7.repo后，不用能，解决：打开<a href="http://mirrors.aliyun.com/centos/">阿里云链接</a>找到centos7最新版本号，然后执行sed全文替换<br>33、-j 4以4核速度进行<br>34、docker images 查看docker镜像  </p><h1 id="一、12个使用技巧"><a href="#一、12个使用技巧" class="headerlink" title="一、12个使用技巧"></a>一、12个使用技巧</h1><p>1、增加内存，编辑虚拟机设置（关机去调）<br>2、忘记命令：唯一命令按Tab自动补全，多个命令按两次Tab<br>3、硬件设备的添加：编辑虚拟机设置-硬盘-添加<br>4、控制权限的切换：Ctrl+Alt<br>5、关机：init 0<br>6、发送快捷键：虚拟机发送Ctrl+Alt+Del或Ctrl+Alt+Insert<br>7、网卡使用：桥接模式 ip与主机在同一网段地址转换模式（NAT）虚拟机与物理机共有一个ip，Linux系统要配置成动态获取ip虚拟机与外网隔开<br>8、BIOS设置：打开电源时进入固件<br>9、安装VM-tools解决显示屏幕分辨率<br>10、编辑虚拟机添加iso镜像<br>11、删除虚拟机：虚拟机-管理-从磁盘中删除<br>12、快照：虚拟机-快照-拍摄快照（保存快照，那天系统崩溃可以恢复到快照）  </p><h1 id="二、网络概念"><a href="#二、网络概念" class="headerlink" title="二、网络概念"></a>二、网络概念</h1><h2 id="1、修改ip"><a href="#1、修改ip" class="headerlink" title="1、修改ip"></a>1、修改ip</h2><p>1、临时修改ip：ifconfig ens33 加IP<br>2、只看ens33：ifconfig ens33<br>3、重启网络：systemctl restart network<br>4、多个临时ip：ifconfig ens33:0 ip ，ifconfig ens33:1 ip<br>5、临时删除ip：ifconfig ens33:0 del 192.168.1.110  </p><h2 id="2、监视网络进程"><a href="#2、监视网络进程" class="headerlink" title="2、监视网络进程"></a>2、监视网络进程</h2><p>systemctl status NetworkManager(NM大写)</p><h2 id="3、网络配置相关文件"><a href="#3、网络配置相关文件" class="headerlink" title="3、网络配置相关文件"></a>3、网络配置相关文件</h2><p>1、ip地址，子网掩码等配置文件  ls /etc/sysconfig/network-scripts/<br>2、DNS配置文件 ls /etc/resolv.conf<br>cat !$<br>3、设置主机名 cat /etc/hostname</p><h2 id="4、永久修改ip："><a href="#4、永久修改ip：" class="headerlink" title="4、永久修改ip："></a>4、永久修改ip：</h2><h3 id="1、使用nmtui文本框"><a href="#1、使用nmtui文本框" class="headerlink" title="1、使用nmtui文本框"></a>1、使用nmtui文本框</h3><p>光标移动最后进行保存service network restart 重启网络</p><h3 id="2、通过修改网卡配置文件修改ip地址"><a href="#2、通过修改网卡配置文件修改ip地址" class="headerlink" title="2、通过修改网卡配置文件修改ip地址"></a>2、通过修改网卡配置文件修改ip地址</h3><p>1、vim /etc/sysconfig/network-scripts/ifcfg-ens33<br>2、键盘i进入编辑修改完之后 ESC退出，输入：wq保存退出<br>3、type种类：以太网<br>BOOTPROTO=none #等号后面写：dhcp表示动态获取ip地址，satic表示表态ip，none表示不指定，就是静态<br>DEVICE=ens33<br>ONBOOT=yes网络才能生效    </p><h1 id="三、设置防火墙开机不启动"><a href="#三、设置防火墙开机不启动" class="headerlink" title="三、设置防火墙开机不启动"></a>三、设置防火墙开机不启动</h1><p>1、静态防火墙systemctl status firewalld.service<br>2、关闭防火墙systemctl stop firewalld.service<br>3、启动systemctl start firewalld.service<br>4、开机不启动systemctl disable firewalld.service<br>5、开机启动systemctl enable firewalld.service<br>6、临时和永久关闭Selinux<br>   getenfore enforcing说明开启<br>   setenforce 0临时关闭<br>   永久关闭：vim /etc/selinux/config 将enforcing改为enable，然后保存退出。    reboot重启  </p><h1 id="四、设置系统光盘开机自动挂载"><a href="#四、设置系统光盘开机自动挂载" class="headerlink" title="四、设置系统光盘开机自动挂载"></a>四、设置系统光盘开机自动挂载</h1><p>vim /etc/fastab<br>文档最后添加/dev/cdrom/mnt iso9660 defaults 00<br>mount -a<br>ls /mnt可以查看到内容说明挂载成功  </p><h1 id="五、配置本地YUM源"><a href="#五、配置本地YUM源" class="headerlink" title="五、配置本地YUM源"></a>五、配置本地YUM源</h1><p>1、 yum的一切配置信息都存在一个叫yum.reos.d目录下的配置文件中，删除原有文件（/etc/yum.repos.d/*）<br>创建一个新的yum源配置文件，yum源的结尾必须是.repo<br>[CentOS7]   yum源的ID，必须唯一  name=CentOS-server  描述信息<br>baseurl=file:///mnt       /mnt表示的是光盘的挂载点<br>enabled=1        启用<br>gpgcheck    取消验证<br>2、 yum clean all 清空yum缓存<br>yum list 查询一下 如果有很多包说明没问题<br>yum insatll -y httped<br>3、创建可用实验拍照<br>后期不可用，可通过快照直接恢复到当前可用情况  </p><h1 id="六、DIY一台1u服务器"><a href="#六、DIY一台1u服务器" class="headerlink" title="六、DIY一台1u服务器"></a>六、DIY一台1u服务器</h1><p>Linux基本命令操作  </p><h1 id="七、Linux终端和shell提示符"><a href="#七、Linux终端和shell提示符" class="headerlink" title="七、Linux终端和shell提示符"></a>七、Linux终端和shell提示符</h1><h2 id="1、登录Linux终端"><a href="#1、登录Linux终端" class="headerlink" title="1、登录Linux终端"></a>1、登录Linux终端</h2><p>1、通过tty命令看到当前所属的虚拟终端<br>2、shift+ctrl+N快速打开一个终端<br>shift+ctrl+加号终端字体放大<br>ctrl+减号终端字体减小<br>3、不同终端之间的通讯<br>同时打开两个终端，第一个终端执行echo xuegod &gt; dec/pts/1,第二个终端有xuegod输出<br>4、对所有终端广播消息<br>shutdown +10 十分钟后关机<br>shutdown -c取消关机<br>wall  “  ”所有终端广播  </p><h2 id="2、shell：提供用户与内核进行通讯"><a href="#2、shell：提供用户与内核进行通讯" class="headerlink" title="2、shell：提供用户与内核进行通讯"></a>2、shell：提供用户与内核进行通讯</h2><p>shell时间上是一个命名解释器，通过解释用户输入的命令并传给系统内核去执行<br>启用mysql数据库就属于外部命令<br>用type来区别是内部还是外部命令<br>su - baituichangan切换到普通用户</p><h2 id="3、命令-选项-参数"><a href="#3、命令-选项-参数" class="headerlink" title="3、命令+选项+参数"></a>3、命令+选项+参数</h2><h1 id="八、ls查看命令和alias别名使用方法"><a href="#八、ls查看命令和alias别名使用方法" class="headerlink" title="八、ls查看命令和alias别名使用方法"></a>八、ls查看命令和alias别名使用方法</h1><p>1、ls - l文件创建信息<br>ls .当前目录<br>ls -a所有文件<br>ls -ld/root/查看目录<br>ls -l和ll命令等价<br>2、文件类型d l b c p -<br>不同颜色代表不同文件类型<br>3、别名，长文件起别名直接打开<br>alias vimenss33=”vim /etc/sysconfig/network-scripts/ifcfg-ens33”<br>删除别名：unalisa vimeness33<br>永久有效：1、当前用户vim /root/.bashrc<br>插入以下内容：alias vimens33=”vim /etc/sysconfig/network-scripts/ifcfg-ens33”<br>重启文件生效source /root/.bashrc<br>2、所有用户（全局使用）<br>vim /etc/bashrc  文件最后一行插入：<br>alias vimens33=”vim /etc/sysconfig/network-scripts/ifcfg-ens33”</p><h1 id="九、cd（change-directory）命令快速查找历史命令和命令快捷键"><a href="#九、cd（change-directory）命令快速查找历史命令和命令快捷键" class="headerlink" title="九、cd（change directory）命令快速查找历史命令和命令快捷键"></a>九、cd（change directory）命令快速查找历史命令和命令快捷键</h1><h2 id="1、cd命令"><a href="#1、cd命令" class="headerlink" title="1、cd命令"></a>1、cd命令</h2><p>1、cd 或者cd ~ 切换目录，说明：直接输入cd表示回到当前用户的家目录<br>2、cd ..返回到上级目录<br>3、cd .表示进入到当前目录<br>4、cd -返回切换之前的目录      </p><h2 id="2、历史命令之history"><a href="#2、历史命令之history" class="headerlink" title="2、历史命令之history"></a>2、历史命令之history</h2><p>方法一，上下键光标去切<br>方法二，history<br>方法三，ctrl+r 搜索历史命名关键字，找出对应命令按左右光标键<br>方法四，！数字，执行历史命令中的第n条命令，先用history查找历史命令<br>方法五，！字符串从下往上最近一次（不太准确，不建议使用）</p><h2 id="3、Linux下快捷键（-表示Ctrl）"><a href="#3、Linux下快捷键（-表示Ctrl）" class="headerlink" title="3、Linux下快捷键（^表示Ctrl）"></a>3、Linux下快捷键（^表示Ctrl）</h2><p>1、终止前台运行的程序，Ctrl+c<br>2、退出，Ctrl+D等价于exit，直接关闭终端<br>3、清屏，Ctrl+L与clear功能一样<br>4、跳到命令行的开头，Ctrl+A<br>5、跳到命令行的末尾，Ctrl+E<br>6、将光标处到命令行开头的内容删除，Ctrl+U<br>7、将光标到命令行末尾的内容删除，Ctrl+K<br>8、搜素历史命令，可以利用好关键词，Ctrl+R<br>9、再执行上一个命令：!$<br>10、Tab只能补全命令和文件  </p><h1 id="十、系统时间管理（系统时钟，硬件时钟）写shell定时脚本"><a href="#十、系统时间管理（系统时钟，硬件时钟）写shell定时脚本" class="headerlink" title="十、系统时间管理（系统时钟，硬件时钟）写shell定时脚本"></a>十、系统时间管理（系统时钟，硬件时钟）写shell定时脚本</h1><p>1、硬件时间：hwclock<br>系统时钟：date<br>2、CST中国标准时间 ，UTC世界标准时间，GMT格林尼治时间<br>3、修改时间：查看date用法：date –help<br>m月；M分钟；Y年份；y年份后两位<br>4、time测试一个命令运行的时间<br>time后面直接跟命令和参数<br>real：实际使用时间<br>user：用户状态使用的时间<br>sys：内核状态使用的时间<br>5、用到帮助命令不知道如何使用，使用help<br>man命令：查看手册页或命令描述man find  用q退出<br>–help 或-h  </p><h1 id="十一、开机命令及7个启动级别"><a href="#十一、开机命令及7个启动级别" class="headerlink" title="十一、开机命令及7个启动级别"></a>十一、开机命令及7个启动级别</h1><p>1、shutdown命令<br>shutdown -r重新启动<br>shutdown -c取消<br>shutdown -h加时间，定时关机（shutdown -h now立即关机）<br>2、系统启动级别7个<br>init3进入字符界面<br>init5进入图形界面<br>init0关机<br>3、设置默认启动级别<br>systemctl set- default multi- user.target字符界面（3级别）<br>runlevel级别切换<br>systemctl get-default查看当前级别  </p><h1 id="十二、文件的基本管理和CFS文件系统备份恢复"><a href="#十二、文件的基本管理和CFS文件系统备份恢复" class="headerlink" title="十二、文件的基本管理和CFS文件系统备份恢复"></a>十二、文件的基本管理和CFS文件系统备份恢复</h1><h2 id="1、文件"><a href="#1、文件" class="headerlink" title="1、文件"></a>1、文件</h2><p>1、passwd用户信息文件；shadow用户密码文件；hosts用户与主机名对应信息<br>2、home：普通用户的家目录<br>3、lib函数库<br>4、/mnt 临时挂载储存设备的挂载目录<br>5、查看一个文件大小：du - sh /etc/<br>6、tmp用来存放临时文件   </p><h2 id="2、绝对路径："><a href="#2、绝对路径：" class="headerlink" title="2、绝对路径："></a>2、绝对路径：</h2><p>从/开始相对路径，以.或..开始</p><h2 id="3、文件管理："><a href="#3、文件管理：" class="headerlink" title="3、文件管理："></a>3、文件管理：</h2><h3 id="1、改变目录：cd"><a href="#1、改变目录：cd" class="headerlink" title="1、改变目录：cd"></a>1、改变目录：cd</h3><h3 id="2、创建-修改-移动-删除：touch-mkdir-mv-vi-rm-cp"><a href="#2、创建-修改-移动-删除：touch-mkdir-mv-vi-rm-cp" class="headerlink" title="2、创建/修改/移动/删除：touch mkdir mv vi rm cp"></a>2、创建/修改/移动/删除：touch mkdir mv vi rm cp</h3><p>1、mkdir （创建目录）在创建一个目录时，如果这个目录的上一级不存在，加参数-p mkdir -p/tmp/a/b/c<br>2、删除rm<br>rm -r /day1 删除目录；<br>rm -f 强制删除，没有提示；<br>rm -rf删除目录下文件（目录文件全删除，慎用）rm /1.txt删除文件<br>3、复制cp<br>命令：cp 源文件/目录   目录文件/目录<br>-r;递归处理，将指定目录下的所有文件与子目录一并处理<br>cp /etc/passwd /opt/   复制文件<br>cp -r /boot/grub /opt/  复制目录<br>4、mv移动文件<br>mv passwd dir1（移动passwd到dir1）<br>mv xuegod.txt dair1/a.txt（移动xuegod.txt到dair1，并改名为a.txt）  </p><h2 id="4、查看文件"><a href="#4、查看文件" class="headerlink" title="4、查看文件"></a>4、查看文件</h2><p>1、cat /文件名（查看文件内容，一次显示整个文件的内容）<br>2、more /文件名（按下回车刷新一行，按下空格刷新一屏，输入q退出）不支持后退<br>3、less /etc/passwd 作用和more一样支持前后翻滚<br>4、head用于显示文件开头的内容，默认情况下显示文件头10行内容<br>head -n 3 /etc/passwd  显示前3行<br>5、tail用于显示文件末尾的内容，默认情况下末尾文件头10行内容<br>-n：显示文件尾部多少行的内容（n为数字）<br>-f：动态显示数据，用来查看日志<br>tail -n 3 /var/log/secure  </p><h2 id="5、xfs文件系统的备份和恢复（提供了xfxdump和xfsrestore工具协助备份）"><a href="#5、xfs文件系统的备份和恢复（提供了xfxdump和xfsrestore工具协助备份）" class="headerlink" title="5、xfs文件系统的备份和恢复（提供了xfxdump和xfsrestore工具协助备份）"></a>5、xfs文件系统的备份和恢复（提供了xfxdump和xfsrestore工具协助备份）</h2><h3 id="1、原始备份数据方法：cp"><a href="#1、原始备份数据方法：cp" class="headerlink" title="1、原始备份数据方法：cp"></a>1、原始备份数据方法：cp</h3><h3 id="2、xfsdump的备份级别有两种，默认为0"><a href="#2、xfsdump的备份级别有两种，默认为0" class="headerlink" title="2、xfsdump的备份级别有两种，默认为0"></a>2、xfsdump的备份级别有两种，默认为0</h3><p>0：完全备份<br>1到9级别代表：增量备份<br>完全备份：每次都把指定备份目录完整的复制一遍，不管目录下文件有没有变化<br>增量备份：每次将之前（第一次、、、直到前一次）做过的备份之后有变化的文件备份<br>差异备份：每次都将第一次完整备份以来有变化的文件进行备份</p><h3 id="3、环境准备"><a href="#3、环境准备" class="headerlink" title="3、环境准备"></a>3、环境准备</h3><p>1、添加磁盘<br>2、对添加磁盘进行格式化<br>3、指定分区设备fdisk /dev/sdb<br>创建一个新的分区n；<br>创建一个主分区p；<br>指定分区大小；<br>打印分区表；<br>保存磁盘w；<br>正在同步磁盘ls /dev/sdb*</p><h3 id="4、使用新的分区，格式化分区，并进行挂载（必须挂载才能使用分区）"><a href="#4、使用新的分区，格式化分区，并进行挂载（必须挂载才能使用分区）" class="headerlink" title="4、使用新的分区，格式化分区，并进行挂载（必须挂载才能使用分区）"></a>4、使用新的分区，格式化分区，并进行挂载（必须挂载才能使用分区）</h3><p>1、mkfs.xfs /dev/sdb1<br>2、mkdir /sdb1创建挂载点<br>3、mount /dev/sdb1 /sdb1挂载     </p><h3 id="5、备份："><a href="#5、备份：" class="headerlink" title="5、备份："></a>5、备份：</h3><p>1、备份整个分区（类似虚拟机快照，进行快速恢复）<br>xfsdump -f 备份存放位置 要备份路径<br>xfsdump -f /opt/dump_sdb1 /sdb1<br>dump_sdb1指定备份会话标签<br>sdb1指定设备标签<br>2、指定备份时免交互操作，方便后期做定时备份<br>xfsdump -f /opt/dump_passwd /sdb1 -L   dump_passwd -M sdb1<br>3、指定只备份分区中的某个目录<br> -s 文件路径，只对指定文件或目录进行备份，相对路径<br>xfsdump -f /opt/dump_grub2 -s grub2/grbu.cfg /boot -L dump_grub2 -M boot- sda1<br>4、查看备份文件 xfsdump -I </p><h3 id="6、文件系统恢复"><a href="#6、文件系统恢复" class="headerlink" title="6、文件系统恢复"></a>6、文件系统恢复</h3><p>1、xfsrestore -f 指定恢复文件的位置 指定存放恢复后文件的路径<br>2、xfsrestore -f /opt/dump_sdb1 /sdb1<br>3、xfsrestore -f /opt/dump_grub2 -s grub2/grub.cfg /var/test恢复单个文件  </p><h3 id="7、增量备份"><a href="#7、增量备份" class="headerlink" title="7、增量备份"></a>7、增量备份</h3><p>每次对上一次增加或修改的文件<br>1、先恢复完全备份<br>2、情况1：恢复最后一次增量备份（如果两次增量备份都是1级，所以只需恢复最后一次增量<br>3、情况2：第一次是1级，第二次是2级（先恢复完全备份，然后1级，最后2</p><h1 id="十三、Vim编辑器"><a href="#十三、Vim编辑器" class="headerlink" title="十三、Vim编辑器"></a>十三、Vim编辑器</h1><h2 id="1、vim编辑器模式：菜单模式，i编辑模式，v进入可视模式、R擦除、改写进入替换模式，：命令行模式"><a href="#1、vim编辑器模式：菜单模式，i编辑模式，v进入可视模式、R擦除、改写进入替换模式，：命令行模式" class="headerlink" title="1、vim编辑器模式：菜单模式，i编辑模式，v进入可视模式、R擦除、改写进入替换模式，：命令行模式"></a>1、vim编辑器模式：菜单模式，i编辑模式，v进入可视模式、R擦除、改写进入替换模式，：命令行模式</h2><h3 id="1、命令模式下做的操作"><a href="#1、命令模式下做的操作" class="headerlink" title="1、命令模式下做的操作"></a>1、命令模式下做的操作</h3><p>1、光标定位    h j k l  左下上右<br>2、0和home键表示切换到行首，$和end键表示切换到行尾<br>3、3gg快速定位到文档的第3行 G快速定位到末行</p><h3 id="2、如何对文本进行编辑"><a href="#2、如何对文本进行编辑" class="headerlink" title="2、如何对文本进行编辑"></a>2、如何对文本进行编辑</h3><p>删除、复制、粘贴、撤销<br>1、y 复制：表示对单个字符进行复制，如果要复制整行，用yy；复制N行：Nyy，比如2yy，表示复制2行<br>2、dd (以行为单位，删除当前光标所在行)<br>3、粘贴 p<br>4、剪切：dd<br>5、x删除光标所在位置的字符<br>6、D从光标处删除到行尾<br>7、u撤销<br>8、ctrl+r还原撤销过的操作<br>9、r替换，或者说用来修改一个字符  </p><h3 id="3、V模式（列）"><a href="#3、V模式（列）" class="headerlink" title="3、V模式（列）"></a>3、V模式（列）</h3><p>进入v模式，移动光标选择区域<br>1、ctrl+v进入列编辑模式<br>2、向下或向上移动光标，把需要注释、编辑的行的开头标记起来<br>3、然后按大写的I<br>4、再插入注释符或者你需要插入的符号#<br>5、再按ESC退出就会全部注释或添加<br>6、删除选中注释部分，然后按d  </p><h3 id="4、命名行模式操作"><a href="#4、命名行模式操作" class="headerlink" title="4、命名行模式操作"></a>4、命名行模式操作</h3><p>1、w保存save<br>2、w！强制保存<br>3、q没有进行任何修改，退出quit<br>4、q！修改了，不保存，强制退出<br>5、wq保存并退出<br>6、wq！强制保存并退出<br>7、x保存退出<br>8、e！恢复到原始状态<br>9、调用外部文件或命令：我想要写入我的网卡MAC地址，需要查看， 现在在vim编辑文档<br>：！ifconfig调取命令<br>：r 加文件 读取其它文件中的内容（把其他文件中的内容追加到当前文档中）<br>10、替换    </p><ul><li>1，3 s/bin/r把第一到3行的bin替换为r，只替换首个  </li><li>1，3 s/bin/r/g所有的都替换        </li><li>3 s/bin/r只把第三行中bin替换第  </li><li> % s/do/r/g全文中的do都替换（% s/do/r/gi    i表示忽略大小写）<br>11、自定义vim使用环境  </li><li>set nu加行号</li><li>set nonu取消设置行号</li><li>noh取消高亮显示<h2 id="2、永久设置环境"><a href="#2、永久设置环境" class="headerlink" title="2、永久设置环境"></a>2、永久设置环境</h2>vim /etc/vimrc设置后会影响到系统所有的用户<br>~/.virc在用户的家目录下，创建一个.vimrc这样只影响到某一个用户<br>vim .vimrc写入set un<br>cat .vimrc  <h2 id="3、vim打开多个文件"><a href="#3、vim打开多个文件" class="headerlink" title="3、vim打开多个文件"></a>3、vim打开多个文件</h2><h3 id="1、以上下方式"><a href="#1、以上下方式" class="headerlink" title="1、以上下方式"></a>1、以上下方式</h3>vim - o /etc/passwd /etc/hosts  -同时打开两个文件（小写o）<br>qa 两个全部退出    <h3 id="2、以左右方式打开两个文档"><a href="#2、以左右方式打开两个文档" class="headerlink" title="2、以左右方式打开两个文档"></a>2、以左右方式打开两个文档</h3>vim - O /etc/passwd /etc/hosts  -同时打开两个文件（大写O）<br>按ctrl+w切换文档  <h3 id="3、对比两个文档的不同"><a href="#3、对比两个文档的不同" class="headerlink" title="3、对比两个文档的不同"></a>3、对比两个文档的不同</h3>1、 diff /etc/passwd mima.txt<br>2、vimdiff /etc/passwd mima.txt  <h3 id="4、其它编辑器"><a href="#4、其它编辑器" class="headerlink" title="4、其它编辑器"></a>4、其它编辑器</h3>nano编辑器<br>emacs编辑器<br>GHOME编辑器 gedit<h1 id="十四、恢复ext4下误删除的文件"><a href="#十四、恢复ext4下误删除的文件" class="headerlink" title="十四、恢复ext4下误删除的文件"></a>十四、恢复ext4下误删除的文件</h1>centos6下执行删除操作（rm -rf /*）<br>ext4上系统删除文件，可以恢复：extundelete，ext3恢复使用：ext3grep<br>Windows恢复误删除文件：final data v2.0汉化版和easyrecovery<br>文件名（a.txt）–存放文件元数据信息（inode）–真实存放数据（block）<h2 id="1、下列操作只能在centos6下删除文件恢复"><a href="#1、下列操作只能在centos6下删除文件恢复" class="headerlink" title="1、下列操作只能在centos6下删除文件恢复"></a>1、下列操作只能在centos6下删除文件恢复</h2>1、查看文件文件名：ls a.txt<br>2、查看inode号（每个文件都有一个inode号）：ls -i a.txt<br>3、stat命令可以看到文件属性：stat a.txt等价于（ls -l a.txt）  <h2 id="2、逻辑关系：删除只是删除文件名a-txt，没有删除inode号所以文件可以复原"><a href="#2、逻辑关系：删除只是删除文件名a-txt，没有删除inode号所以文件可以复原" class="headerlink" title="2、逻辑关系：删除只是删除文件名a.txt，没有删除inode号所以文件可以复原"></a>2、逻辑关系：删除只是删除文件名a.txt，没有删除inode号所以文件可以复原</h2>如果新文件b用了同样的inode号也可以恢复，block中的bb信息通过奇偶校验推算出aa信息<h2 id="3、误删除文件后，第一件事"><a href="#3、误删除文件后，第一件事" class="headerlink" title="3、误删除文件后，第一件事"></a>3、误删除文件后，第一件事</h2>避免误删除的文件内容被覆盖<br>（如何避免）卸载需要恢复文件的分区或以只读的方式挂载      <h2 id="4、实战，在（centos6）ext4文件系统上恢复被误删除的文件"><a href="#4、实战，在（centos6）ext4文件系统上恢复被误删除的文件" class="headerlink" title="4、实战，在（centos6）ext4文件系统上恢复被误删除的文件"></a>4、实战，在（centos6）ext4文件系统上恢复被误删除的文件</h2>下载extundelete，在<a href="http://sourceforge.net/%E5%BC%80%E5%85%83%E8%BD%AF%E4%BB%B6%E5%8F%91%E5%B8%83%E4%B8%AD%E5%BF%83.github.com">http://sourceforge.net/开元软件发布中心.github.com</a>  <h2 id="5、在根下删除文件想恢复-："><a href="#5、在根下删除文件想恢复-：" class="headerlink" title="5、在根下删除文件想恢复 ："></a>5、在根下删除文件想恢复 ：</h2>1、立即断电，把磁盘以只读方式，挂载到另一个电脑进行恢复<br>2、把extundelete在虚拟机上，提前安装好后再复制到u盘中，把u盘插入到服务器，恢复时，要把恢复的文件保存到u盘中（不要让恢复的数据写到/下）  <h2 id="6、新的分区表如何使用，创建挂载点，格式化，再挂载"><a href="#6、新的分区表如何使用，创建挂载点，格式化，再挂载" class="headerlink" title="6、新的分区表如何使用，创建挂载点，格式化，再挂载"></a>6、新的分区表如何使用，创建挂载点，格式化，再挂载</h2>mount /dev/sda4 /tmp/sda4/<br>ls /tmp/sda4/ 如果显示lost+found则显示挂载成功<h2 id="7、删除并恢复"><a href="#7、删除并恢复" class="headerlink" title="7、删除并恢复"></a>7、删除并恢复</h2>1、创建测试文件<br>2、利用tree看测试文件树<br>3、删除文件<br>4、用cd切除文件目录，然后删除挂载sda4<br>5、安装extundelete进行恢复  </li><li>从Windows上传extundelete到linux用xmanager v5或CRT<br>（rz：上传Windows中的文件到Linux；sz：下载Linux中的文件到Windows）<br>如果没有这两个命令，rpm -ivh /mnt/Packages/Irzsz-0.12….s</li><li>安装：tar -jxvf extundelete剩下tab补全（jxvf针对压缩包镜像）</li><li>cd ex。。。</li><li>安装之前需要安装工具：rpm -ivh /mnt/Packages/e2fspro……</li><li>装完以后./configure（检查安装环境）</li><li>make -j 4（使用4核同时编译）</li><li>make install</li><li>install也能复制与cp的区别是install复制可以指定权限，cp不可以  </li></ul><p>6、先扫描被删除的文件</p><ul><li>ls -i /a.txt看普通文件的inode号</li><li>ls -id /tmp/sda4看他的inode号是从几开始，从根开始为2</li><li>extundelete /dev/sda4 –inode 2从inode号为2开始扫，查看恢复文件的inode号</li><li>ext4文件系统的分区根目录的inode值为2，xfs分区根目录的inode值为64</li><li>ls -id/boot/ xfs文件系统</li></ul><p>7、恢复</p><ul><li>通过inode号进行恢复<br>extundelete /dev/sda4 –restore-inode 12（12：第6步的3）恢复后文件名为file12</li><li>通过文件名恢复<br>extundelete /dev/sda4 –restore-file passwd</li><li>恢复某个目录（会产生空文件和空目录）<br>extundelete /dev/sda4 –restore-directory a</li><li>恢复所有的文件（这种方法没有空文件和空目录）<br>extundelete /dev/sda4 –restore-all<h1 id="十五、使用xmanager等远程连接工具管理Linux"><a href="#十五、使用xmanager等远程连接工具管理Linux" class="headerlink" title="十五、使用xmanager等远程连接工具管理Linux"></a>十五、使用xmanager等远程连接工具管理Linux</h1>常见远程连接工具：secureCRT（64位、32位）、xmanager（可以上传文件夹，图形界面，使用不带后门官网下载最新版，序列号）、putty、ssh<br>xmanager使用方法（xshell，xstart。。。）<h2 id="1、xshell的使用方法"><a href="#1、xshell的使用方法" class="headerlink" title="1、xshell的使用方法"></a>1、xshell的使用方法</h2><h3 id="1、连接一台新的服务器"><a href="#1、连接一台新的服务器" class="headerlink" title="1、连接一台新的服务器"></a>1、连接一台新的服务器</h3>1、文件–新建<br>2、名称随便写<br>3、主机为ip地址（之前设置为192.168.1.63后来改过）<br>4、端口号为22<br>5、身份认证选root密码为123456或b928382191<br>6、确认后先确定，然后在会话选择连接  <h3 id="2、调字体"><a href="#2、调字体" class="headerlink" title="2、调字体"></a>2、调字体</h3>文件–属性只是本主机的属性  <h3 id="3、调整rz和sz命令的默认路径"><a href="#3、调整rz和sz命令的默认路径" class="headerlink" title="3、调整rz和sz命令的默认路径"></a>3、调整rz和sz命令的默认路径</h3>属性–文件传输–使用以下路径–打开用zmodem<h2 id="2、xftp的使用方法（上传文件夹）"><a href="#2、xftp的使用方法（上传文件夹）" class="headerlink" title="2、xftp的使用方法（上传文件夹）"></a>2、xftp的使用方法（上传文件夹）</h2>可以直接新建文件传输（ctrl+alt+f）或者新建会话属性选择sftp协议<h2 id="3、xstart（调用图形界面）安装数据库需要远程调用"><a href="#3、xstart（调用图形界面）安装数据库需要远程调用" class="headerlink" title="3、xstart（调用图形界面）安装数据库需要远程调用"></a>3、xstart（调用图形界面）安装数据库需要远程调用</h2>1、xshell直接运行图形桌面<br>xhell 代码（root权限）gnome-terminal<br>2、直接打开软件xstart，新建会话ssh协议，运行成功会显示两个窗口<br>3、调用火狐浏览器 firefox &amp;     <h1 id="十六、centos7用户管理"><a href="#十六、centos7用户管理" class="headerlink" title="十六、centos7用户管理"></a>十六、centos7用户管理</h1>用ll或者stat /etc/passwd可以查看文件的属性包括用户权限<h2 id="1、用户账号"><a href="#1、用户账号" class="headerlink" title="1、用户账号"></a>1、用户账号</h2>1、用户分类<br>超级用户：root拥有对系统的最高的管理权限uid=0<br>普通用户：系统用户：uid：1-999（centos7）<br>本地用户：uid：1000+   500+（uid类似身份证号）<br>虚伪用户：伪用户：一般不用来登录系统，用来维持某个服务的正常运行例如：ftp，apache<br>2、用户与组：一对一，一对多，多对一，多对多  <h2 id="2、配置文件："><a href="#2、配置文件：" class="headerlink" title="2、配置文件："></a>2、配置文件：</h2>1、用户配置文件：/etc/passwd；记录用户的基本属性全部信息<br>2、用户组文件：/etc/group<br>3、用户对应的密码信息：/etc/shadow只有root有读取权限  <h2 id="3、用户管理"><a href="#3、用户管理" class="headerlink" title="3、用户管理"></a>3、用户管理</h2>1、用户命令：useradd<br>useradd -d“主目录” -u “UID” -g“初始组”-G“附加组”-s“登陆的shell”<br>2、添加登录用户  </li><li>添加一个名为Harry的用户，并使用bash作为登录的shell<br>useradd harry此命令自动创建harry组，并成为harry用户的默认主组，同时默认的默认登录shell是bash  </li><li>vim /etc/passwd    查看是否添加成功  </li><li>root:x:0:0:root:/root:/bin/bash<br>用户名：密码占位符：UID：GID：用户描述：用户主目录（bash中的“~”代表那个）：登录后使用的shell  </li><li>查看系统中，支持那些shell<br>cat /etc/shells    <h2 id="4、指定用户的UID：-u-用户UID"><a href="#4、指定用户的UID：-u-用户UID" class="headerlink" title="4、指定用户的UID：-u 用户UID"></a>4、指定用户的UID：-u 用户UID</h2>1、useradd -u 1100 oracle创建uid为1100的用户<br>2、查看id<br>id oracle或者tail -1 /etc/passwd<br>家目录：ls /home/oracle/<br>ls /home/oracle/ -a  <h2 id="5、指定用户家目录"><a href="#5、指定用户家目录" class="headerlink" title="5、指定用户家目录"></a>5、指定用户家目录</h2>useradd -d /opt/mk1 mk1<br>tail -1 /etc/passwd    <h2 id="6、指定用户的主组useradd-h查看提示"><a href="#6、指定用户的主组useradd-h查看提示" class="headerlink" title="6、指定用户的主组useradd -h查看提示"></a>6、指定用户的主组useradd -h查看提示</h2>1、tail -1 /etc/group默认创建用户的组和gid与用户名和uid相同<br>2、改为不一样：useradd -g xuegod xuegod2<br>3、id方式去查看：id xuegod2  <h2 id="7、指定用户的附属组（补充组）"><a href="#7、指定用户的附属组（补充组）" class="headerlink" title="7、指定用户的附属组（补充组）"></a>7、指定用户的附属组（补充组）</h2>useradd -G xuegod,harry,root xuegod3<br>id xuegod3<br>vim /etc/group在文件的最后去找<h2 id="8、adduser"><a href="#8、adduser" class="headerlink" title="8、adduser"></a>8、adduser</h2>which adduser 查看adduser路径<h2 id="9、删除用户"><a href="#9、删除用户" class="headerlink" title="9、删除用户"></a>9、删除用户</h2></li><li>r删除的时候，会同时删除用户的家目录和/var/mail下的目录<br>userdel xuegod4没有删除目录<br>userdel -r xuegod3把目录也删除  <h1 id="十七、shadow文件讲解-用户修改密码"><a href="#十七、shadow文件讲解-用户修改密码" class="headerlink" title="十七、shadow文件讲解-用户修改密码"></a>十七、shadow文件讲解-用户修改密码</h1><h2 id="1、密码的文件：head-3-etc-shadow"><a href="#1、密码的文件：head-3-etc-shadow" class="headerlink" title="1、密码的文件：head -3 /etc/shadow"></a>1、密码的文件：head -3 /etc/shadow</h2>1、用户名<br>2、被加密后的密码<br>已加密密码，分为三部分，<br>第一部分是表示使用哪种哈希算法；<br>第二部分是用于加密哈希的salt；<br>第三部分是已加密的哈希；<br>哈希算法：$1表示MD5；$6表示SHA-512；$5表示SHA-256<br>3、最近更改密码的日期等<h2 id="2、修改用户密码"><a href="#2、修改用户密码" class="headerlink" title="2、修改用户密码"></a>2、修改用户密码</h2>1、passwd oracle（更改用户oracle的密码）<br>2、 echo 123456 | passwd  –stdin xuegod<br>3、密码一样，sahdow中加密的hash值不一样，原因是salt值不一样<br>4、把两端加密互换还能登录<br>salt是passwd自动生成的      <h2 id="3、修改密码信息"><a href="#3、修改密码信息" class="headerlink" title="3、修改密码信息"></a>3、修改密码信息</h2>1、vim /etc/login.defs密码信息<br>2、egrep -v ‘’^$| ^#’’ /etc/login.defs 把不是#和空行开头的都过滤出来<br>3、cat /etc/default/useradd<br>4、更改密码让用户每次登录前必须更改密码<br>chage -d 0 mk<br>ssh <a href="mailto:&#109;&#107;&#64;&#113;&#x39;&#x32;&#x2e;&#x31;&#x36;&#x38;&#x2e;&#x31;&#x2e;&#x36;&#x33;">&#109;&#107;&#64;&#113;&#x39;&#x32;&#x2e;&#x31;&#x36;&#x38;&#x2e;&#x31;&#x2e;&#x36;&#x33;</a><br>5、用户的uid可以随便改（0权限最大）<br>vim /etc/passwd  <h2 id="4、更改用户主目录"><a href="#4、更改用户主目录" class="headerlink" title="4、更改用户主目录"></a>4、更改用户主目录</h2>usermod -m -d /mnt/market marked自动创建新目录并移动内容到新目录中<h2 id="5、添加说明信息"><a href="#5、添加说明信息" class="headerlink" title="5、添加说明信息"></a>5、添加说明信息</h2>usermod -c “hello world” xuegod<h2 id="6、出现不完整的shell提示符，如何处理"><a href="#6、出现不完整的shell提示符，如何处理" class="headerlink" title="6、出现不完整的shell提示符，如何处理"></a>6、出现不完整的shell提示符，如何处理</h2>cp /etc/skel/.bash* /home/xuegod/<br>chown xuegod:xuegod /home/xuegod/.bash*<br>su -xuegod  <h1 id="十八、进入centos7紧急模式恢复root密码"><a href="#十八、进入centos7紧急模式恢复root密码" class="headerlink" title="十八、进入centos7紧急模式恢复root密码"></a>十八、进入centos7紧急模式恢复root密码</h1>1、重启，按上下键，选择第一项，按下e键进行编辑<br>2、原来是ro改为rw init=/sysroot/bin/sh<br>3、按下ctrl-x启动进入紧急模式<br>4、切根chroot /sysroot（chroot用来在指定根目录下运行指令）<br>5、passwd 输密码<br>6、exit退出，reboot  <h1 id="十九、文件的基本权限"><a href="#十九、文件的基本权限" class="headerlink" title="十九、文件的基本权限"></a>十九、文件的基本权限</h1><h2 id="1、权限的作用"><a href="#1、权限的作用" class="headerlink" title="1、权限的作用"></a>1、权限的作用</h2>通过对文件设定权限可以达到以下三种访问限制权限：<br>1、只允许用户自己访问；<br>2、允许一个预先指定的用户组中的用户访问<br>3、允许系统中的任何用户访问<h2 id="2、查看权限"><a href="#2、查看权限" class="headerlink" title="2、查看权限"></a>2、查看权限</h2><h2 id="3、权限说明"><a href="#3、权限说明" class="headerlink" title="3、权限说明"></a>3、权限说明</h2>1、对于文件来说<br>r：读，w：写，x：执行<br>2、对于目录来说<br>r：读（看到目录里面有什么）ls<br>w：在目录里面建文件，删除，移动 touch   mkdir rm mv cp<br>x：进入cd cat  <h2 id="4、文件拥有者"><a href="#4、文件拥有者" class="headerlink" title="4、文件拥有者"></a>4、文件拥有者</h2>UGO：所有者-用户组-其它用户     <h2 id="5、常见几种文件权限组成"><a href="#5、常见几种文件权限组成" class="headerlink" title="5、常见几种文件权限组成"></a>5、常见几种文件权限组成</h2>rwx — —：文件所有者对文件具有读取、写入和执行的权限。  </li><li>rwx r– r–： 文件所有者具有读、写与执行的权限，用户组里用户及其他用户则具有读取的权限  </li><li>rw- rw- r-x：文件所有者与同组用户对文件具有读写的权限，而其他用户仅具有读取和执行的权限。<br>drwx–x—x： 目录所有者具有读写与进入目录的权限,其他用户近能进入该目录，却无法读取任何数据。<br>drwx——： 除了目录所有者具有完整的权限之外，其他用户对该目录完全没有任何权限。<br>rwx — —表示目录所有者本身具有的额权限，其它用户是无法进入的，root除外<br>你以什么用户身份登录，那么你创建的文件或目录，自动成为该文件的所属主和组  <h2 id="6、更改文件的属主和属组"><a href="#6、更改文件的属主和属组" class="headerlink" title="6、更改文件的属主和属组"></a>6、更改文件的属主和属组</h2>chown：可以用来改变文件（或目录）的属主<br>chgrp：用来改变文件（或目录）的默认属组<br>如果要对目录进行操作，加参数-R<br>语法：chown user:group filename   比如：chown hr:san a.txt  把文件的属主和属组改为hr,san<br>chown user filename  比如：chown san a.txt  把文件的属主改为san用户<br>chown :group filename  比如： chown :miao a.txt   把文件的属组改为miao这个组<br>chgrp hr filename 比如： chgrp hr f.txt  （拓展）  </li><li>R:递归（目录下的所有内容都更改，否则只修改目录）  <h2 id="7、修改权限：命令chmod"><a href="#7、修改权限：命令chmod" class="headerlink" title="7、修改权限：命令chmod"></a>7、修改权限：命令chmod</h2>chmod [对谁操作] [操作符] [赋于什么权限] 文件名<br>对谁操作：<br>u—-&gt; 用户user，表示文件或目录的所有者<br>g—-&gt;用户组group，表示文件或目录所属的用户组<br>o—-&gt;其它用户others<br>a—-&gt;所有用户all<br>操作符:<br>；+  #添加权限  ；  -  # 减少权限  ； =  #直接给定一个权限<br>权限：r w x<br>例如：[root@localhost changan]# touch 1.txt<br>[root@localhost changan]# ll 1.txt  </li><li>rw-r–r–. 1 root root 0 11月 28 15:05 1.  txt<br>[root@localhost changan]# chmod u-w 1.txt<br>[root@localhost changan]# ll 1.txt  </li><li>r–r–r–. 1 root root 0 11月 28 15:05 1.txt  <h2 id="8、使用八进制（0-7）数字表示权限法"><a href="#8、使用八进制（0-7）数字表示权限法" class="headerlink" title="8、使用八进制（0-7）数字表示权限法"></a>8、使用八进制（0-7）数字表示权限法</h2></li><li>– 000;–x 001;-w- 010;-wx 011;r– 100;r-x 101 rw- 110; rwx 111<br>chmod a+x 1.txt 给shell脚本加一个可执行权限<br>更多还是用数字 <h2 id="9、权限对目录的影响"><a href="#9、权限对目录的影响" class="headerlink" title="9、权限对目录的影响"></a>9、权限对目录的影响</h2>r列出目录的内容<br>w创建或删除目录中任意文件<br>x访问目录的内容<h2 id="10、为什么创建文件的默认权限是644"><a href="#10、为什么创建文件的默认权限是644" class="headerlink" title="10、为什么创建文件的默认权限是644"></a>10、为什么创建文件的默认权限是644</h2>文件默认权限666-umask值，目录默认权限777-umask值<br>永久生效，编辑用户的配置文件 vim .bash_profile<br>临时生效：umask权限补码  <h1 id="二十、文件的特殊权限：suid-sgid-sticky和文件拓展权限ACL"><a href="#二十、文件的特殊权限：suid-sgid-sticky和文件拓展权限ACL" class="headerlink" title="二十、文件的特殊权限：suid sgid sticky和文件拓展权限ACL"></a>二十、文件的特殊权限：suid sgid sticky和文件拓展权限ACL</h1>1、文件的特殊权限<br>SUID：一般用在可执行文件上，当用户执行该文件时，会临时拥有该执行文件的所有者权限（u+s或u=4）<br>SGID：新创建文件的所属组会继承上级目录的所属组（g+s或g=2）<br>Stickybit：粘滞位权限，针对目录，对文件无效，也叫防删除位（o+t或o=1）<br>2、ACL<br>[mk@xuegod63 ~]$ ll /tmp/a.txt   </li><li>rw-rwxr–+ 1 root root 8 5月   8 22:42 /tmp/a.txt (多一个+号)  <h1 id="二十一、创建一个让root都无法删除的文件"><a href="#二十一、创建一个让root都无法删除的文件" class="headerlink" title="二十一、创建一个让root都无法删除的文件"></a>二十一、创建一个让root都无法删除的文件</h1>1、Windows出现删除不了的文件用360粉碎<br>2、rm rf hack.sh（无法删除hack脚本）<br>原因：用xshell在后台添加attr拓展属性<br>chattr +i hack.sh<br>3、为什么删除不了，rehl6新增文件系统拓展属性<br>参数：a（append）只能追加内容 i    （immutable）不能被修改<br>4、lsatter hack.sh（发现里面多了i内容）<br>chatter -i hack.sh<br>echo aa &gt;&gt;hack.sh一切正常<br>5、chatter +a hack.sh 只能追加内容  <h1 id="二十二、使用rpm命令-安装-查看-卸载-rpm软件包"><a href="#二十二、使用rpm命令-安装-查看-卸载-rpm软件包" class="headerlink" title="二十二、使用rpm命令-安装-查看-卸载-rpm软件包"></a>二十二、使用rpm命令-安装-查看-卸载-rpm软件包</h1><h2 id="1、rpm软件包的管理"><a href="#1、rpm软件包的管理" class="headerlink" title="1、rpm软件包的管理"></a>1、rpm软件包的管理</h2>rpm包（例如ls /mnt/Packages/zsh-5.0.2-28.el7.x86_64.rpm）的获取方式<br>1、centos系统镜像光盘<br>2、网站rpmfind.net<br>3、比如安装mysql、nginx软件去<a href="https://www.mysql.com/mnt/Packages/zsh-5.0.2-28.el7.x86_64.rpm">https://www.mysql.com/mnt/Packages/zsh-5.0.2-28.el7.x86_64.rpm</a>  <h2 id="2、通过光盘获取"><a href="#2、通过光盘获取" class="headerlink" title="2、通过光盘获取"></a>2、通过光盘获取</h2>挂载 mount /dev/sr0 /mnt<br>卸载 umount /mnt或umount /dev/sr0 <h2 id="3、安装rpm软件（当一个rpm安装到系统上之后，信息通常会保存到ls-var-lib-rpm目录下）"><a href="#3、安装rpm软件（当一个rpm安装到系统上之后，信息通常会保存到ls-var-lib-rpm目录下）" class="headerlink" title="3、安装rpm软件（当一个rpm安装到系统上之后，信息通常会保存到ls /var/lib/rpm目录下）"></a>3、安装rpm软件（当一个rpm安装到系统上之后，信息通常会保存到ls /var/lib/rpm目录下）</h2>全名：在安装和更新升级时用<br>包名：对已安装过的软件进行操作             <h2 id="4、从本地安装"><a href="#4、从本地安装" class="headerlink" title="4、从本地安装"></a>4、从本地安装</h2>rpm    ls /mnt/Packages/zsh-5.0.2-28.el7.x86_64.rpm  (设置，iso开机时连接才能确保有Package)<br>没有的话去挂载mount /dev/cdrom /mnt<br>[root@localhost changan]# cat /etc/  shells<br>/bin/sh<br>/bin/bash<br>/sbin/nologin<br>/usr/bin/sh<br>/usr/bin/bash<br>/usr/sbin/nologin<br>/bin/tcsh<br>/bin/csh<br>/bin/zsh安装成功以后多一个zsh<br>rpm -q zsh看有无被安装  <h2 id="5、从网上下载直接安装centos-epel扩展源"><a href="#5、从网上下载直接安装centos-epel扩展源" class="headerlink" title="5、从网上下载直接安装centos epel扩展源"></a>5、从网上下载直接安装centos epel扩展源</h2>rpm -ivh+rpm超链接（ivh安装）  <h2 id="6、查询功能"><a href="#6、查询功能" class="headerlink" title="6、查询功能"></a>6、查询功能</h2>用法：rpm -q（query） 常与下面参数组合使用</li><li>a（all）  查询所有已安装的软件包  </li><li>f（file）系统文件名（查询系统文件所属哪个软件包），反向查询  </li><li>i  显示已经安装的rpm软件包信息，后面直接跟包名  </li><li>l（list）  查询软件包中文件安装的位置  </li><li>p  查询未安装软件包的相关信息，后面要跟软件的命名</li><li>R 查询软件包的依赖性<br>1、针对已被安装rpm -q zsh看有无被安装<br>2、查询已经安装包的详细信息：rpm -qpi /mnt/Packages/php-mysql-5.4.16-42.el7.x86_64.rpm<br>Summary     : A module for PHP   applications that use MySQL databases    #php使用mysql数据库的一个模块<br>3、针对没有被安装的包（加参数-p），从光盘镜像中查询<br>[root@xuegod63 mnt]# rpm -qpl  /mnt/Packages/zip-3.0-10.el7.x86_64.rpm  #查看rpm安装后，将生成哪些文件<br>rpm -ivh /mnt/Packages/php-mysql-5.4.16-42.el7.x86_64.rpm<br>rpm -qi lrzsz<h2 id="7、查看软件包内容是否修改，用于检验命令是否被黑客修改"><a href="#7、查看软件包内容是否修改，用于检验命令是否被黑客修改" class="headerlink" title="7、查看软件包内容是否修改，用于检验命令是否被黑客修改"></a>7、查看软件包内容是否修改，用于检验命令是否被黑客修改</h2>rpm -V包名<br>rpm -Vf文件路径<br>注：没有消息（或全是………）则没有被修改<br>查看系统中所有的包是否被修改<br>rpm -Va<br>rpm -Va &gt;rpm_check.txt列到txt文件中<br>检验时参考了 /var/lib/rpm目录下的rpm数据库信息  <h2 id="8、rpm包卸载和升级"><a href="#8、rpm包卸载和升级" class="headerlink" title="8、rpm包卸载和升级"></a>8、rpm包卸载和升级</h2>rpm -qa zsh<br>卸载：rpm -e zsh<br>忽略依赖关系，强制卸载 rpm -e –nodeps lrzsz<br>升级：rpm -Uvh /mnt/Packages/zsh-5.0.2-28.el7.x86_64.rpm  <h2 id="9、手动解决依赖关系"><a href="#9、手动解决依赖关系" class="headerlink" title="9、手动解决依赖关系"></a>9、手动解决依赖关系</h2>rpm -ivh /mnt/Packages/mariadb-server-5.5.56-2.el7.x86_64.rpm<br>分别安装<h1 id="二十三、yum的使用（yum自动解决依赖关系，并且一次安装所有依赖的软体包）"><a href="#二十三、yum的使用（yum自动解决依赖关系，并且一次安装所有依赖的软体包）" class="headerlink" title="二十三、yum的使用（yum自动解决依赖关系，并且一次安装所有依赖的软体包）"></a>二十三、yum的使用（yum自动解决依赖关系，并且一次安装所有依赖的软体包）</h1>yum：解决依赖关系问题，自动下载软件包，基于C/S架构（client s=ftp\http\file）<h2 id="1、配置yum源"><a href="#1、配置yum源" class="headerlink" title="1、配置yum源"></a>1、配置yum源</h2><h3 id="1、配置本地yum源"><a href="#1、配置本地yum源" class="headerlink" title="1、配置本地yum源"></a>1、配置本地yum源</h3>1、挂载镜像mount /dev/cdrom /mnt/<br>cd /etc/yum.repos.d/<br>2、配置yum源文件<br>vim etc/yum.repos.d/centos7.repo必须以.repo结尾，插入以下内容<br>[centos7]       在本服务器上必须为1<br>name=CentOS7<br>baseurl=file:///mnt<br>enable=1        1表示启用yum源，0为禁用<br>gpgcheck=0    0不校验<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7  如果要校验进行  <h2 id="2、配置网络yum源"><a href="#2、配置网络yum源" class="headerlink" title="2、配置网络yum源"></a>2、配置网络yum源</h2>1、[root@localhost ~]# wget -O /etc/yum.repos.d/CentOS-Base.repo <a href="http://mirrors.aliyun.com/repo/Centos-7.repo">http://mirrors.aliyun.com/repo/Centos-7.repo</a><br>2、#wget 下载文件 ，-O 将wget下载的文件，保存到指定的位置，保存时可以重新起一个名字，或者直接写一个要保存的路径，这样还用原来的文件名。<br>3、查看：vim /etc/yum.repos.d/CentOS-Base.repo<br>4、<a href="http://mirrors.aliyun.com/centos/$releasever/os/$basearch/">http://mirrors.aliyun.com/centos/$releasever/os/$basearch/</a><br>如果下载后不能用，解决：打开阿里云链接：<a href="http://mirrors.aliyun.com/centos/">http://mirrors.aliyun.com/centos/</a> 找到centos7最新版本号<br>5、然后执行sed全文替换<br>[root@localhost ~]# sed -i  ‘s/$releasever/7.4.1708/g’ /etc/yum.repos.d/CentOS-Base.repo<br>[root@localhost ~]# yum clean all    #清空一下yum缓存<br>[root@localhost ~]# yum list         #查看列表  <h2 id="3、yum使用"><a href="#3、yum使用" class="headerlink" title="3、yum使用"></a>3、yum使用</h2>yum常用操作：<br>[root@xuegod63 ~]#  yum install -y httpd   #安装软件包， -y 直接安装<br>[root@xuegod63 ~]#  yum -y update    #升级软件包，改变软件设置和系统设置,系统版本内核都升级<br>[root@xuegod63 ~]#  yum -y upgrade   #升级软件包，不改变软件设置和系统设置，系统版本升级，内核不改变<br>[root@xuegod63 ~]#  yum -y update  # 不加任何包，表示整个系统进行升级<br>[root@xuegod63 ~]#  yum info  httpd    #查询rpm包作用<br>[root@xuegod63 ~]#  yum provides /usr/bin/find  #查看命令是哪个软件包安装的<br>[root@xuegod63 ~]#  yum -y remove  包名    #卸载包<br>[root@xuegod63 ~]#  yum search keyword   #按关键字搜索软件包<br>yum报错，注意的几个小问题：  </li><li>确定光盘是否链接，光盘是否挂载</li><li>配置文件中格式是否正确，字母，符号有没有少写,挂载点和配置文件中设置的是否一致</li><li>网络源需要联网，操作和RPM类似，只是会自动安装依赖项。</li><li>yum安装开发工具软件包组</li><li>yum grouplist查看有哪些软件包组<h1 id="二十四、tar源码包管理-srpm源码包安装方法"><a href="#二十四、tar源码包管理-srpm源码包安装方法" class="headerlink" title="二十四、tar源码包管理-srpm源码包安装方法"></a>二十四、tar源码包管理-srpm源码包安装方法</h1><h2 id="1、源码安装nginx"><a href="#1、源码安装nginx" class="headerlink" title="1、源码安装nginx"></a>1、源码安装nginx</h2>1、编译环境gcc和gcc-c++编译器，make<br>2、准备软件：nighx-1.12.2.tar.gz<br>部署Nginx # yum -y install gcc gcc-c++ make zlib-devel pcre pcre-devel openssl-devel<h2 id="2、上传Nginx"><a href="#2、上传Nginx" class="headerlink" title="2、上传Nginx"></a>2、上传Nginx</h2>源码编译：./configure  ， make  ，make install, # ./configure  </li><li>指定安装路径，例如 –prefix=/usr/local/nginx</li><li>启用或禁用某项功能, 例如 –enable-ssl, –disable-filter – -with-http_ssl_module</li><li>和其它软件关联，例如–with-pcre</li><li>检查安装环境，例如是否有编译器gcc，是否满足软件的依赖需求最终生成：Makefile  </li><li> make  -j 4   #按Makefile文件编译，可以使用-j 4指定4核心CPU编译，提升速度</li><li> make install  #按Makefile定义的文件路径安装</li><li> make clean //清除上次的make命令所产生的object和Makefile文件。使用场景：当需要重新执行configure时，需要执行make clean  <h2 id="3、删除源码包"><a href="#3、删除源码包" class="headerlink" title="3、删除源码包"></a>3、删除源码包</h2></li><li>-prefix=/usr/local/nginx，直接删除指定的目录就可以<h2 id="4、源码编译出错的解决方案"><a href="#4、源码编译出错的解决方案" class="headerlink" title="4、源码编译出错的解决方案"></a>4、源码编译出错的解决方案</h2>./configure<br>方法1：[root@xuegod63 Packages]# rpm -ivh ext2fs^C   #按两下tab键。 一般情况，ext2fs就是要安装的软件包的名字开头。如果存在 自动补全<br>方法2：[root@xuegod63 Packages]# ls <em>ext2fs</em>   #查找完整关键字<br>方法3：[root@xuegod63 Packages]# ls <em>2fs</em>    #查找部分关键字<br>方法4:  终极大招<a href="http://www.rpmseek.com/index.html">http://www.rpmseek.com/index.html</a><br>方法5：yum search ext2fs（关键字）<h2 id="5、安装了库又找不到，需要安装库的开发文件"><a href="#5、安装了库又找不到，需要安装库的开发文件" class="headerlink" title="5、安装了库又找不到，需要安装库的开发文件"></a>5、安装了库又找不到，需要安装库的开发文件</h2>rpm -ivh /mnt/Packages/e2fsprogs-devel-1.41.12-11.el6.x86_64.rpm<h2 id="6、总结-软件安装方法特点："><a href="#6、总结-软件安装方法特点：" class="headerlink" title="6、总结,软件安装方法特点："></a>6、总结,软件安装方法特点：</h2>rpm＋yum：方便，软件版本低。稳定性好、管理方便。性能稍差。<br>源码编译安装：麻烦，软件版本新，可以定制。稳定性稍差、管理稍差。性能好。<br>源码编译安装：主要是安装LAMP或LNMP 架构时，我们会用  <h1 id="二十五、Docker概述-（现在软件包必须和系统相关，docker镜像一次编译，到处运行）"><a href="#二十五、Docker概述-（现在软件包必须和系统相关，docker镜像一次编译，到处运行）" class="headerlink" title="二十五、Docker概述 （现在软件包必须和系统相关，docker镜像一次编译，到处运行）"></a>二十五、Docker概述 （现在软件包必须和系统相关，docker镜像一次编译，到处运行）</h1>1、linux -》 JVM-》 java程序 app<br>linux-》 docker-》把app做成镜像，运行起来<br>windows-》 docker-》把app做成镜像，运行起来<br>IOS 苹果-》 docker-》把app做成镜像，运行起来<br>2、docker官网  <a href="https://www.docker.com/">https://www.docker.com/</a><br><a href="https://github.com/docker/docker">https://github.com/docker/docker</a><br>3、docker相对于VM虚拟机，少了虚拟机操作系统这一层，所以docker效率比虚拟机高<br>4、docker架构<br>工作流程：运行docker–下载centos镜像到本地–启动docker容器实例  <h1 id="二十六、部署docker容器虚拟化平台"><a href="#二十六、部署docker容器虚拟化平台" class="headerlink" title="二十六、部署docker容器虚拟化平台"></a>二十六、部署docker容器虚拟化平台</h1><h2 id="1、-实验环境准备"><a href="#1、-实验环境准备" class="headerlink" title="1、  实验环境准备"></a>1、  实验环境准备</h2>实战1：部署docker容器虚拟化平台<br>实验环境： CENTOS7.4  64位  IP： 192.168.1.63<br>把docker-rpm.tar.gz上传到linux系统上，我已经提下载好安装包<br>[root@xuegod63 ~]# tar zxvf docker-rpm.tar.gz<br>docker.io ,docker ,docker-engine 三个docker发行版本。  </li></ul><p>配置本地yum源：<br>[root@xuegod63 ~]# vim  /etc/yum.repos.d/docker-rpm.repo<br>[docker-rpm]<br>name=docker-rpm<br>baseurl=file:///root/docker-rpm<br>enable=1<br>gpgcheck=0<br>[root@xuegod63 yum.repos.d]# mv CentOS-* /opt/   #移出centos自带的yum源<br>安装 docker软件包<br>[root@xuegod63 yum.repos.d]# yum -y install docker<br>方法2： 直接使用centos系统自带的yum源安装，比较慢<br>[root@xuegod63 yum.repos.d]# yum -y install docker   </p><p>启动docker平台：<br>[root@xuegod63 ~]# systemctl start docker   #启动 docker 服务<br>[root@xuegod63 ~]# systemctl enable docker  #设置开机启动docker服务</p><p>[root@xuegod63 ~]# docker version    #显示 Docker 版本信息</p><h2 id="2、下载centos镜像到本地"><a href="#2、下载centos镜像到本地" class="headerlink" title="2、下载centos镜像到本地"></a>2、下载centos镜像到本地</h2><h3 id="1、外网下载"><a href="#1、外网下载" class="headerlink" title="1、外网下载"></a>1、外网下载</h3><p>1、搜索docker search centos<br>2、如果official为ok，则说明可以使用<br>3、从公网docker hub拉取image（如果报错则是网络的问题）  </p><h3 id="2、把之前下载好的image镜像导入image："><a href="#2、把之前下载好的image镜像导入image：" class="headerlink" title="2、把之前下载好的image镜像导入image："></a>2、把之前下载好的image镜像导入image：</h3><p>把docker.io-centos.tar  镜像上传到linux上<br>docker pull docker.io/centos</p><h3 id="3、方法3：直接下载其他站点的镜像"><a href="#3、方法3：直接下载其他站点的镜像" class="headerlink" title="3、方法3：直接下载其他站点的镜像"></a>3、方法3：直接下载其他站点的镜像</h3><p>[root@xuegod63 ~]# docker pull hub.c.163.com/library/tomcat:latest<br>[root@xuegod63 ~]# docker images</p><h1 id="二十七、docker平台的使用方法（docker无终端，如果不指定，直接运行到后台）"><a href="#二十七、docker平台的使用方法（docker无终端，如果不指定，直接运行到后台）" class="headerlink" title="二十七、docker平台的使用方法（docker无终端，如果不指定，直接运行到后台）"></a>二十七、docker平台的使用方法（docker无终端，如果不指定，直接运行到后台）</h1><p>1、运行一个 container并加载镜像centos，运行起来这个实例后，在实例中执行 /bin/bash命令<br>docker run -it centos: latest /bin/bash<br>运行失败：网络问题<br>cat /proc/sys/net/ipv4/ip_forward（查看ip4值，如果不是1改为1）<br>sysctl -p<br>输出：net.ipv4.ip_forward=1<br>2、exit退出<br>3、在 container 中启动一个长久运行的进程，不断向stdin输出 hello world 。模拟一个后台运行的服务<br>docker run -d centos: lastest bash -c “while true;do echo hello world;    sleep 1; done”（centos: lastest镜像的名字）<br>4、运行服务<br>从容器中取日志，查看输出的内容（docker  logs   容器实例的Name/ID）<br>如果不知道id docker ps（列出所有运行的容器）<br>docker ps -a（列出所有容器）<br>docker images（列出所有本地镜像）<br>5、杀死一个容器<br>docker kill id<br>6、启动、停止、重启容器<br>docker run -d 镜像名字： /bin/sh/ -c ….<br>docker stop 容器id<br>docker start 容器id<br>7、删除镜像<br>docker rm（不能删除正在运行的，如果强制删除docker rm -f）</p><h1 id="二十八、docker镜像制作方法"><a href="#二十八、docker镜像制作方法" class="headerlink" title="二十八、docker镜像制作方法"></a>二十八、docker镜像制作方法</h1><h2 id="1、docker-image-的制作两种方法"><a href="#1、docker-image-的制作两种方法" class="headerlink" title="1、docker image 的制作两种方法"></a>1、docker image 的制作两种方法</h2><p>1、docker commit 保存container的当前状态到image后，然后生成对应的image<br>2、docker build 使用 dockerfile 文件自动化制作image     </p><h2 id="2、docker-commit"><a href="#2、docker-commit" class="headerlink" title="2、docker commit"></a>2、docker commit</h2><p>1、创建一个安装好apache工具的容器镜像<br>2、根据容器当前状态做一个image镜像：创建一个安装了apache工具的centos镜像<br>3、docker run -it docker.io/centos:latest /bin/bash<br>4、yum -y install  httpd   #在 container 中安装 apache 软件包  </p><h2 id="3、创建start-sh脚本启动httpd服务和apache默认首页Index-html文件"><a href="#3、创建start-sh脚本启动httpd服务和apache默认首页Index-html文件" class="headerlink" title="3、创建start.sh脚本启动httpd服务和apache默认首页Index.html文件"></a>3、创建start.sh脚本启动httpd服务和apache默认首页Index.html文件</h2><p>1、创建脚本<br>echo “/usr/sbin/httpd -DFOREGROUND” &gt; start.sh<br>2、给一个执行权限<br>chmod a+x start.sh<br>3、创建index.html文件<br>echo “docker image build test” &gt; index.html  </p><h2 id="4、使用命令bulid来创建新的image"><a href="#4、使用命令bulid来创建新的image" class="headerlink" title="4、使用命令bulid来创建新的image"></a>4、使用命令bulid来创建新的image</h2><p>docker build -t docker.io/cnetos: httpd ./  </p><h2 id="5、docker镜像-应用-程序-库"><a href="#5、docker镜像-应用-程序-库" class="headerlink" title="5、docker镜像=应用/程序+库"></a>5、docker镜像=应用/程序+库</h2><h2 id="6、发布镜像docker"><a href="#6、发布镜像docker" class="headerlink" title="6、发布镜像docker"></a>6、发布镜像docker</h2><p>1、save image to tarball<br>保存 Image 到 tar 包<br>语法：docker save -o 导出的镜像名.tar  本地镜像名：镜像标签<br>2、push image to docker hub  </p><ul><li>Signup on docker hub &amp; create repo    注册一个帐号<br><a href="https://hub.docker.com/">https://hub.docker.com/</a>    </li><li>Login to docker hub   # docker login -u userabc -p abc123 -e <a href="mailto:&#x75;&#115;&#x65;&#114;&#x61;&#x62;&#64;&#x67;&#x6d;&#97;&#x69;&#x6c;&#46;&#x63;&#111;&#109;">&#x75;&#115;&#x65;&#114;&#x61;&#x62;&#64;&#x67;&#x6d;&#97;&#x69;&#x6c;&#46;&#x63;&#111;&#109;</a>     </li></ul><p>3、Push image to docker hub   #上传镜像# docker push centos:httpd<br>4、Pull image from docker hub   #下载镜像# docker pull userabc/centos:httpd     #  用户名/镜像名  </p><h1 id="二十九、容器端口映射"><a href="#二十九、容器端口映射" class="headerlink" title="二十九、容器端口映射"></a>二十九、容器端口映射</h1><p>1、docker images<br>ls<br>docker run -d -p 80:80  docker.io/centos:httpd 87fadc0249a96736f588f16b7d3ad662ef3536a06d7a74115cd7c76546ed3a22<br>注： -p 物理机的80端口:容器实例的80端口  ，把容器中的80端口映射到物理机上的80端 口<br>2、访问正在运行的container容器<br>docker exec -it &lt;container id | name&gt; /bin/bash  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基本命令&quot;&gt;&lt;a href=&quot;#基本命令&quot; class=&quot;headerlink&quot; title=&quot;基本命令&quot;&gt;&lt;/a&gt;基本命令&lt;/h1&gt;&lt;p&gt;1、i：进入插入模式&lt;br&gt;2、保存：先按ESC键，再输入：wq&lt;br&gt;3、set nu查看行号&lt;br&gt;4、q！不保存退出&lt;</summary>
      
    
    
    
    
    <category term="Linux" scheme="https://182.92.7.32/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>毕设学习</title>
    <link href="https://182.92.7.32/2021/01/19/%E6%AF%95%E8%AE%BE%E5%AD%A6%E4%B9%A0/"/>
    <id>https://182.92.7.32/2021/01/19/%E6%AF%95%E8%AE%BE%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-01-19T03:20:14.000Z</published>
    <updated>2021-02-08T15:00:48.826Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网站搭建"><a href="#网站搭建" class="headerlink" title="网站搭建"></a>网站搭建</h1><p><a href="https://www.bilibili.com/video/BV1rJ411d7qs?p=4">djgao框架</a><br><a href="https://www.bilibili.com/video/BV1Fx411d7Eb?p=4">Ubuntu MySQL数据库</a><br><a href="https://www.bilibili.com/video/BV1Vt411z7wy?p=3">windows MySQL数据库</a><br><a href="https://www.bilibili.com/video/BV1v7411R7mp/?spm_id_from=333.788.recommend_more_video.0">ECharts数据可视化项目</a><br><a href="https://www.bilibili.com/video/BV1Tf4y1v7oC?from=search&seid=3961295768451107705">Web前端Ajax入门实战教程-深入剖析ajax技术</a><br><a href="https://www.bilibili.com/video/BV177411j7qJ?p=1">Python爬取疫情实战：Flask搭建web/Echarts可视化大屏/MySQL数据库/Linux项目部署与任务定时调度</a></p><h1 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h1><p><a href="https://www.bilibili.com/video/BV1Lx411j7ws?from=search&seid=18345481475633435180">tensorflow搭建神经网络</a><br><a href="https://www.bilibili.com/video/BV164411m79z?p=4">吴恩达深度学习课程第一课 — 神经网络与深度学习</a><br><a href="https://www.bilibili.com/video/BV164411S78V?p=14">吴恩达机器学习经典名课</a><br><a href="https://www.bilibili.com/video/BV1zE411T7nb?p=13">吴恩达团队Tensorflow2.0实践系列课程第一课</a><br><a href="https://www.bilibili.com/video/BV1XJ411D7wF">Keras 搭建自己的yolo3目标检测平台</a></p><h1 id="python"><a href="#python" class="headerlink" title="python"></a>python</h1><p><a href="https://www.bilibili.com/video/BV1D4411U7bq?p=14">python云端</a><br><a href="https://www.bilibili.com/video/BV1ha4y1H7sx?p=3">python爬虫</a><br><a href="https://www.bilibili.com/video/BV1ps411x7rm?from=search&seid=2033601188766898335">python数据可视化</a><br><a href="https://www.bilibili.com/video/BV1rK4y1V7Pv?p=3">Ubuntu安装TensorFlow</a></p><h1 id="图像处理"><a href="#图像处理" class="headerlink" title="图像处理"></a>图像处理</h1><p><a href="https://www.bilibili.com/video/BV16K411W7x9?from=search&seid=9670843360083724597">opencv</a></p><h1 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h1><p><a href="https://www.anleenoxu.top/archives/308.html">计算机视觉“目标检测”方向历年论文整理</a><br><a href="https://www.cnblogs.com/HL-space/p/10888556.html">基于卷积神经网络的面部表情识别(Pytorch实现)—-台大李宏毅机器学习作业3(HW3)</a>  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;网站搭建&quot;&gt;&lt;a href=&quot;#网站搭建&quot; class=&quot;headerlink&quot; title=&quot;网站搭建&quot;&gt;&lt;/a&gt;网站搭建&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1rJ411d7qs?p=4&quot;&gt;djga</summary>
      
    
    
    
    
    <category term="实用" scheme="https://182.92.7.32/tags/%E5%AE%9E%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>如何高效搜索github</title>
    <link href="https://182.92.7.32/2021/01/18/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E6%90%9C%E7%B4%A2github/"/>
    <id>https://182.92.7.32/2021/01/18/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E6%90%9C%E7%B4%A2github/</id>
    <published>2021-01-18T03:20:14.000Z</published>
    <updated>2021-02-05T13:30:28.860Z</updated>
    
    <content type="html"><![CDATA[<p>gitbub如何高效搜索 （spring boot）为例<br>1、名字中带spring boot<br>in:name spring boot<br>2、下载数大于3000<br>in:name spring boot stars:&gt;3000<br>3、在readme里面搜<br>in:readme spring boot<br>4、在描述中搜<br>in:description 微服务 language:java pushed:&gt;2019-09-03<br>5、python爬虫<br>in:description 爬虫 language:python stars:&gt;1000 pushed:&gt;2019-02</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;gitbub如何高效搜索 （spring boot）为例&lt;br&gt;1、名字中带spring boot&lt;br&gt;in:name spring boot&lt;br&gt;2、下载数大于3000&lt;br&gt;in:name spring boot stars:&amp;gt;3000&lt;br&gt;3、在readm</summary>
      
    
    
    
    
    <category term="实用" scheme="https://182.92.7.32/tags/%E5%AE%9E%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://182.92.7.32/2021/01/17/hello-world/"/>
    <id>https://182.92.7.32/2021/01/17/hello-world/</id>
    <published>2021-01-17T02:16:35.898Z</published>
    <updated>2021-02-05T13:29:54.686Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
